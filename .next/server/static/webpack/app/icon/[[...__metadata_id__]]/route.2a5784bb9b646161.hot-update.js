/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/icon/[[...__metadata_id__]]/route",{

/***/ "(app-metadata-route)/./app/icon.tsx":
/*!**********************!*\
  !*** ./app/icon.tsx ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   contentType: () => (/* binding */ contentType),\n/* harmony export */   \"default\": () => (/* binding */ Icon),\n/* harmony export */   runtime: () => (/* binding */ runtime),\n/* harmony export */   size: () => (/* binding */ size)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-metadata-route)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var next_og__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/og */ \"(app-metadata-route)/./node_modules/next/dist/esm/api/og.js\");\n\n\n// Route segment config\nconst runtime = \"edge\";\n// Image metadata\nconst size = {\n    width: 32,\n    height: 32\n};\nconst contentType = \"image/png\";\n// Image generation\nfunction Icon() {\n    return new next_og__WEBPACK_IMPORTED_MODULE_1__.ImageResponse(// ImageResponse JSX element\n    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        style: {\n            fontSize: 24,\n            background: \"#3B82F6\",\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            color: \"white\",\n            fontWeight: 700,\n            borderRadius: \"20%\"\n        },\n        children: \"A\"\n    }, void 0, false, {\n        fileName: \"D:\\\\vs-code-projects\\\\RESUME\\\\resume\\\\app\\\\icon.tsx\",\n        lineNumber: 18,\n        columnNumber: 7\n    }, this), // ImageResponse options\n    {\n        // For convenience, we can re-use the exported size metadata\n        // config to also set the ImageResponse's width and height.\n        ...size\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1tZXRhZGF0YS1yb3V0ZSkvLi9hcHAvaWNvbi50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUF1QztBQUV2Qyx1QkFBdUI7QUFDaEIsTUFBTUMsVUFBVSxPQUFNO0FBRTdCLGlCQUFpQjtBQUNWLE1BQU1DLE9BQU87SUFDbEJDLE9BQU87SUFDUEMsUUFBUTtBQUNWLEVBQUM7QUFDTSxNQUFNQyxjQUFjLFlBQVc7QUFFdEMsbUJBQW1CO0FBQ0osU0FBU0M7SUFDdEIsT0FBTyxJQUFJTixrREFBYUEsQ0FFcEIsNEJBQTRCO2tCQUM1Qiw4REFBQ087UUFDQ0MsT0FBTztZQUNMQyxVQUFVO1lBQ1ZDLFlBQVk7WUFDWlAsT0FBTztZQUNQQyxRQUFRO1lBQ1JPLFNBQVM7WUFDVEMsWUFBWTtZQUNaQyxnQkFBZ0I7WUFDaEJDLE9BQU87WUFDUEMsWUFBWTtZQUNaQyxjQUFjO1FBQ2hCO2tCQUNEOzs7OztjQUlILHdCQUF3QjtJQUN4QjtRQUNFLDREQUE0RDtRQUM1RCwyREFBMkQ7UUFDM0QsR0FBR2QsSUFBSTtJQUNUO0FBRUoiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL2ljb24udHN4PzZlODgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW1hZ2VSZXNwb25zZSB9IGZyb20gJ25leHQvb2cnXHJcblxyXG4vLyBSb3V0ZSBzZWdtZW50IGNvbmZpZ1xyXG5leHBvcnQgY29uc3QgcnVudGltZSA9ICdlZGdlJ1xyXG5cclxuLy8gSW1hZ2UgbWV0YWRhdGFcclxuZXhwb3J0IGNvbnN0IHNpemUgPSB7XHJcbiAgd2lkdGg6IDMyLFxyXG4gIGhlaWdodDogMzIsXHJcbn1cclxuZXhwb3J0IGNvbnN0IGNvbnRlbnRUeXBlID0gJ2ltYWdlL3BuZydcclxuXHJcbi8vIEltYWdlIGdlbmVyYXRpb25cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSWNvbigpIHtcclxuICByZXR1cm4gbmV3IEltYWdlUmVzcG9uc2UoXHJcbiAgICAoXHJcbiAgICAgIC8vIEltYWdlUmVzcG9uc2UgSlNYIGVsZW1lbnRcclxuICAgICAgPGRpdlxyXG4gICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICBmb250U2l6ZTogMjQsXHJcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAnIzNCODJGNicsXHJcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXHJcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXHJcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcclxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcclxuICAgICAgICAgIGNvbG9yOiAnd2hpdGUnLFxyXG4gICAgICAgICAgZm9udFdlaWdodDogNzAwLFxyXG4gICAgICAgICAgYm9yZGVyUmFkaXVzOiAnMjAlJyxcclxuICAgICAgICB9fVxyXG4gICAgICA+XHJcbiAgICAgICAgQVxyXG4gICAgICA8L2Rpdj5cclxuICAgICksXHJcbiAgICAvLyBJbWFnZVJlc3BvbnNlIG9wdGlvbnNcclxuICAgIHtcclxuICAgICAgLy8gRm9yIGNvbnZlbmllbmNlLCB3ZSBjYW4gcmUtdXNlIHRoZSBleHBvcnRlZCBzaXplIG1ldGFkYXRhXHJcbiAgICAgIC8vIGNvbmZpZyB0byBhbHNvIHNldCB0aGUgSW1hZ2VSZXNwb25zZSdzIHdpZHRoIGFuZCBoZWlnaHQuXHJcbiAgICAgIC4uLnNpemUsXHJcbiAgICB9XHJcbiAgKVxyXG59ICJdLCJuYW1lcyI6WyJJbWFnZVJlc3BvbnNlIiwicnVudGltZSIsInNpemUiLCJ3aWR0aCIsImhlaWdodCIsImNvbnRlbnRUeXBlIiwiSWNvbiIsImRpdiIsInN0eWxlIiwiZm9udFNpemUiLCJiYWNrZ3JvdW5kIiwiZGlzcGxheSIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsImNvbG9yIiwiZm9udFdlaWdodCIsImJvcmRlclJhZGl1cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-metadata-route)/./app/icon.tsx\n");

/***/ }),

/***/ "(app-metadata-route)/./node_modules/next/dist/esm/api/og.js":
/*!**********************************************!*\
  !*** ./node_modules/next/dist/esm/api/og.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImageResponse: () => (/* reexport safe */ _server_og_image_response__WEBPACK_IMPORTED_MODULE_0__.ImageResponse)\n/* harmony export */ });\n/* harmony import */ var _server_og_image_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../server/og/image-response */ \"(app-metadata-route)/./node_modules/next/dist/esm/server/og/image-response.js\");\n //# sourceMappingURL=og.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1tZXRhZGF0YS1yb3V0ZSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9hcGkvb2cuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEMsQ0FFNUMsOEJBQThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvZXNtL2FwaS9vZy5qcz80MjZjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuLi9zZXJ2ZXIvb2cvaW1hZ2UtcmVzcG9uc2VcIjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2cuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-metadata-route)/./node_modules/next/dist/esm/api/og.js\n");

/***/ }),

/***/ "(app-metadata-route)/./node_modules/next/dist/esm/server/og/image-response.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/og/image-response.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImageResponse: () => (/* binding */ ImageResponse)\n/* harmony export */ });\nfunction importModule() {\n    return Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! next/dist/compiled/@vercel/og/index.edge.js */ \"(app-metadata-route)/./node_modules/next/dist/compiled/@vercel/og/index.edge.js\"));\n}\nclass ImageResponse extends Response {\n    static #_ = this.displayName = \"ImageResponse\";\n    constructor(...args){\n        const readable = new ReadableStream({\n            async start (controller) {\n                const OGImageResponse = // as the auto resolving is not working\n                (await importModule()).ImageResponse;\n                const imageResponse = new OGImageResponse(...args);\n                if (!imageResponse.body) {\n                    return controller.close();\n                }\n                const reader = imageResponse.body.getReader();\n                while(true){\n                    const { done, value } = await reader.read();\n                    if (done) {\n                        return controller.close();\n                    }\n                    controller.enqueue(value);\n                }\n            }\n        });\n        const options = args[1] || {};\n        super(readable, {\n            headers: {\n                \"content-type\": \"image/png\",\n                \"cache-control\":  true ? \"no-cache, no-store\" : 0,\n                ...options.headers\n            },\n            status: options.status,\n            statusText: options.statusText\n        });\n    }\n} //# sourceMappingURL=image-response.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1tZXRhZGF0YS1yb3V0ZSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvb2cvaW1hZ2UtcmVzcG9uc2UuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBO0lBQ0wsT0FBTywwTkFBMkk7QUFDdEo7QUFDTyxNQUFNSSxzQkFBc0JDO0lBQy9CLE9BQU8sQ0FBQ0MsQ0FBQyxHQUFHLElBQUksQ0FBQ0MsV0FBVyxHQUFHLGdCQUFnQjtJQUMvQ0MsWUFBWSxHQUFHQyxJQUFJLENBQUM7UUFDaEIsTUFBTUMsV0FBVyxJQUFJQyxlQUFlO1lBQ2hDLE1BQU1DLE9BQU9DLFVBQVU7Z0JBQ25CLE1BQU1DLGtCQUVOLHVDQUR1QztnQkFDdEMsT0FBTWQsY0FBYSxFQUFHSSxhQUFhO2dCQUNwQyxNQUFNVyxnQkFBZ0IsSUFBSUQsbUJBQW1CTDtnQkFDN0MsSUFBSSxDQUFDTSxjQUFjQyxJQUFJLEVBQUU7b0JBQ3JCLE9BQU9ILFdBQVdJLEtBQUs7Z0JBQzNCO2dCQUNBLE1BQU1DLFNBQVNILGNBQWNDLElBQUksQ0FBQ0csU0FBUztnQkFDM0MsTUFBTSxLQUFLO29CQUNQLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxLQUFLLEVBQUUsR0FBRyxNQUFNSCxPQUFPSSxJQUFJO29CQUN6QyxJQUFJRixNQUFNO3dCQUNOLE9BQU9QLFdBQVdJLEtBQUs7b0JBQzNCO29CQUNBSixXQUFXVSxPQUFPLENBQUNGO2dCQUN2QjtZQUNKO1FBQ0o7UUFDQSxNQUFNRyxVQUFVZixJQUFJLENBQUMsRUFBRSxJQUFJLENBQUM7UUFDNUIsS0FBSyxDQUFDQyxVQUFVO1lBQ1plLFNBQVM7Z0JBQ0wsZ0JBQWdCO2dCQUNoQixpQkFBaUJ4QixLQUFzQyxHQUFHLHVCQUF1QixDQUFtRDtnQkFDcEksR0FBR3VCLFFBQVFDLE9BQU87WUFDdEI7WUFDQUMsUUFBUUYsUUFBUUUsTUFBTTtZQUN0QkMsWUFBWUgsUUFBUUcsVUFBVTtRQUNsQztJQUNKO0FBQ0osRUFFQSwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2VydmVyL29nL2ltYWdlLXJlc3BvbnNlLmpzPzFiYjIiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaW1wb3J0TW9kdWxlKCkge1xuICAgIHJldHVybiBpbXBvcnQocHJvY2Vzcy5lbnYuTkVYVF9SVU5USU1FID09PSBcImVkZ2VcIiA/IFwibmV4dC9kaXN0L2NvbXBpbGVkL0B2ZXJjZWwvb2cvaW5kZXguZWRnZS5qc1wiIDogXCJuZXh0L2Rpc3QvY29tcGlsZWQvQHZlcmNlbC9vZy9pbmRleC5ub2RlLmpzXCIpO1xufVxuZXhwb3J0IGNsYXNzIEltYWdlUmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XG4gICAgc3RhdGljICNfID0gdGhpcy5kaXNwbGF5TmFtZSA9IFwiSW1hZ2VSZXNwb25zZVwiO1xuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3Mpe1xuICAgICAgICBjb25zdCByZWFkYWJsZSA9IG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgICAgICAgICBhc3luYyBzdGFydCAoY29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IE9HSW1hZ2VSZXNwb25zZSA9IC8vIFNvIGZhciB3ZSBoYXZlIHRvIG1hbnVhbGx5IGRldGVybWluZSB3aGljaCBidWlsZCB0byB1c2UsXG4gICAgICAgICAgICAgICAgLy8gYXMgdGhlIGF1dG8gcmVzb2x2aW5nIGlzIG5vdCB3b3JraW5nXG4gICAgICAgICAgICAgICAgKGF3YWl0IGltcG9ydE1vZHVsZSgpKS5JbWFnZVJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGltYWdlUmVzcG9uc2UgPSBuZXcgT0dJbWFnZVJlc3BvbnNlKC4uLmFyZ3MpO1xuICAgICAgICAgICAgICAgIGlmICghaW1hZ2VSZXNwb25zZS5ib2R5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHJlYWRlciA9IGltYWdlUmVzcG9uc2UuYm9keS5nZXRSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICB3aGlsZSh0cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0gYXdhaXQgcmVhZGVyLnJlYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gYXJnc1sxXSB8fCB7fTtcbiAgICAgICAgc3VwZXIocmVhZGFibGUsIHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImltYWdlL3BuZ1wiLFxuICAgICAgICAgICAgICAgIFwiY2FjaGUtY29udHJvbFwiOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJkZXZlbG9wbWVudFwiID8gXCJuby1jYWNoZSwgbm8tc3RvcmVcIiA6IFwicHVibGljLCBpbW11dGFibGUsIG5vLXRyYW5zZm9ybSwgbWF4LWFnZT0zMTUzNjAwMFwiLFxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMuaGVhZGVyc1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0YXR1czogb3B0aW9ucy5zdGF0dXMsXG4gICAgICAgICAgICBzdGF0dXNUZXh0OiBvcHRpb25zLnN0YXR1c1RleHRcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbWFnZS1yZXNwb25zZS5qcy5tYXAiXSwibmFtZXMiOlsiaW1wb3J0TW9kdWxlIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUlVOVElNRSIsIkltYWdlUmVzcG9uc2UiLCJSZXNwb25zZSIsIl8iLCJkaXNwbGF5TmFtZSIsImNvbnN0cnVjdG9yIiwiYXJncyIsInJlYWRhYmxlIiwiUmVhZGFibGVTdHJlYW0iLCJzdGFydCIsImNvbnRyb2xsZXIiLCJPR0ltYWdlUmVzcG9uc2UiLCJpbWFnZVJlc3BvbnNlIiwiYm9keSIsImNsb3NlIiwicmVhZGVyIiwiZ2V0UmVhZGVyIiwiZG9uZSIsInZhbHVlIiwicmVhZCIsImVucXVldWUiLCJvcHRpb25zIiwiaGVhZGVycyIsInN0YXR1cyIsInN0YXR1c1RleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-metadata-route)/./node_modules/next/dist/esm/server/og/image-response.js\n");

/***/ }),

/***/ "(edge-asset)/./node_modules/next/dist/compiled/@vercel/og/noto-sans-v27-latin-regular.ttf":
/*!************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/@vercel/og/noto-sans-v27-latin-regular.ttf ***!
  \************************************************************************************/
/***/ ((module) => {

eval("module.exports = \"blob:noto-sans-v27-latin-regular.5dda3fca77107598.ttf\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGVkZ2UtYXNzZXQpLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9AdmVyY2VsL29nL25vdG8tc2Fucy12MjctbGF0aW4tcmVndWxhci50dGYiLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9AdmVyY2VsL29nL25vdG8tc2Fucy12MjctbGF0aW4tcmVndWxhci50dGY/MGY3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiYmxvYjpub3RvLXNhbnMtdjI3LWxhdGluLXJlZ3VsYXIuNWRkYTNmY2E3NzEwNzU5OC50dGZcIiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(edge-asset)/./node_modules/next/dist/compiled/@vercel/og/noto-sans-v27-latin-regular.ttf\n");

/***/ }),

/***/ "(app-metadata-route)/./node_modules/next/dist/compiled/@vercel/og/resvg.wasm?module":
/*!**********************************************************************!*\
  !*** ./node_modules/next/dist/compiled/@vercel/og/resvg.wasm?module ***!
  \**********************************************************************/
/***/ ((module) => {

eval("module.exports = wasm_77d9faebf7af9e421806970ce10a58e9d83116d7;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1tZXRhZGF0YS1yb3V0ZSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0B2ZXJjZWwvb2cvcmVzdmcud2FzbT9tb2R1bGUiLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9AdmVyY2VsL29nL3Jlc3ZnLndhc20/MWU4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHdhc21fNzdkOWZhZWJmN2FmOWU0MjE4MDY5NzBjZTEwYTU4ZTlkODMxMTZkNzsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-metadata-route)/./node_modules/next/dist/compiled/@vercel/og/resvg.wasm?module\n");

/***/ }),

/***/ "(app-metadata-route)/./node_modules/next/dist/compiled/@vercel/og/yoga.wasm?module":
/*!*********************************************************************!*\
  !*** ./node_modules/next/dist/compiled/@vercel/og/yoga.wasm?module ***!
  \*********************************************************************/
/***/ ((module) => {

eval("module.exports = wasm_ef4866ecae192fd87727067cf2c0c0cf9fb8b020;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1tZXRhZGF0YS1yb3V0ZSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0B2ZXJjZWwvb2cveW9nYS53YXNtP21vZHVsZSIsIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0B2ZXJjZWwvb2cveW9nYS53YXNtPzEwNjQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB3YXNtX2VmNDg2NmVjYWUxOTJmZDg3NzI3MDY3Y2YyYzBjMGNmOWZiOGIwMjA7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-metadata-route)/./node_modules/next/dist/compiled/@vercel/og/yoga.wasm?module\n");

/***/ }),

/***/ "(app-metadata-route)/./node_modules/next/dist/compiled/@vercel/og/index.edge.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/@vercel/og/index.edge.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImageResponse: () => (/* binding */ ImageResponse),\n/* harmony export */   experimental_FigmaImageResponse: () => (/* binding */ experimental_FigmaImageResponse)\n/* harmony export */ });\n/* harmony import */ var _resvg_wasm_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resvg.wasm?module */ \"(app-metadata-route)/./node_modules/next/dist/compiled/@vercel/og/resvg.wasm?module\");\n/* harmony import */ var _yoga_wasm_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./yoga.wasm?module */ \"(app-metadata-route)/./node_modules/next/dist/compiled/@vercel/og/yoga.wasm?module\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"buffer\")[\"Buffer\"];\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod)=>function __require() {\n        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {\n            exports: {}\n        }).exports, mod), mod.exports;\n    };\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to2, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to2, key) && key !== except) __defProp(to2, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to2;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\n// node_modules/.pnpm/tiny-inflate@1.0.3/node_modules/tiny-inflate/index.js\nvar require_tiny_inflate = __commonJS({\n    \"node_modules/.pnpm/tiny-inflate@1.0.3/node_modules/tiny-inflate/index.js\" (exports2, module) {\n        var TINF_OK = 0;\n        var TINF_DATA_ERROR = -3;\n        function Tree() {\n            this.table = new Uint16Array(16);\n            this.trans = new Uint16Array(288);\n        }\n        function Data(source, dest) {\n            this.source = source;\n            this.sourceIndex = 0;\n            this.tag = 0;\n            this.bitcount = 0;\n            this.dest = dest;\n            this.destLen = 0;\n            this.ltree = new Tree();\n            this.dtree = new Tree();\n        }\n        var sltree = new Tree();\n        var sdtree = new Tree();\n        var length_bits = new Uint8Array(30);\n        var length_base = new Uint16Array(30);\n        var dist_bits = new Uint8Array(30);\n        var dist_base = new Uint16Array(30);\n        var clcidx = new Uint8Array([\n            16,\n            17,\n            18,\n            0,\n            8,\n            7,\n            9,\n            6,\n            10,\n            5,\n            11,\n            4,\n            12,\n            3,\n            13,\n            2,\n            14,\n            1,\n            15\n        ]);\n        var code_tree = new Tree();\n        var lengths = new Uint8Array(288 + 32);\n        function tinf_build_bits_base(bits2, base, delta, first) {\n            var i, sum;\n            for(i = 0; i < delta; ++i)bits2[i] = 0;\n            for(i = 0; i < 30 - delta; ++i)bits2[i + delta] = i / delta | 0;\n            for(sum = first, i = 0; i < 30; ++i){\n                base[i] = sum;\n                sum += 1 << bits2[i];\n            }\n        }\n        function tinf_build_fixed_trees(lt, dt2) {\n            var i;\n            for(i = 0; i < 7; ++i)lt.table[i] = 0;\n            lt.table[7] = 24;\n            lt.table[8] = 152;\n            lt.table[9] = 112;\n            for(i = 0; i < 24; ++i)lt.trans[i] = 256 + i;\n            for(i = 0; i < 144; ++i)lt.trans[24 + i] = i;\n            for(i = 0; i < 8; ++i)lt.trans[24 + 144 + i] = 280 + i;\n            for(i = 0; i < 112; ++i)lt.trans[24 + 144 + 8 + i] = 144 + i;\n            for(i = 0; i < 5; ++i)dt2.table[i] = 0;\n            dt2.table[5] = 32;\n            for(i = 0; i < 32; ++i)dt2.trans[i] = i;\n        }\n        var offs = new Uint16Array(16);\n        function tinf_build_tree(t, lengths2, off, num) {\n            var i, sum;\n            for(i = 0; i < 16; ++i)t.table[i] = 0;\n            for(i = 0; i < num; ++i)t.table[lengths2[off + i]]++;\n            t.table[0] = 0;\n            for(sum = 0, i = 0; i < 16; ++i){\n                offs[i] = sum;\n                sum += t.table[i];\n            }\n            for(i = 0; i < num; ++i){\n                if (lengths2[off + i]) t.trans[offs[lengths2[off + i]]++] = i;\n            }\n        }\n        function tinf_getbit(d) {\n            if (!d.bitcount--) {\n                d.tag = d.source[d.sourceIndex++];\n                d.bitcount = 7;\n            }\n            var bit = d.tag & 1;\n            d.tag >>>= 1;\n            return bit;\n        }\n        function tinf_read_bits(d, num, base) {\n            if (!num) return base;\n            while(d.bitcount < 24){\n                d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n                d.bitcount += 8;\n            }\n            var val = d.tag & 65535 >>> 16 - num;\n            d.tag >>>= num;\n            d.bitcount -= num;\n            return val + base;\n        }\n        function tinf_decode_symbol(d, t) {\n            while(d.bitcount < 24){\n                d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n                d.bitcount += 8;\n            }\n            var sum = 0, cur = 0, len = 0;\n            var tag = d.tag;\n            do {\n                cur = 2 * cur + (tag & 1);\n                tag >>>= 1;\n                ++len;\n                sum += t.table[len];\n                cur -= t.table[len];\n            }while (cur >= 0);\n            d.tag = tag;\n            d.bitcount -= len;\n            return t.trans[sum + cur];\n        }\n        function tinf_decode_trees(d, lt, dt2) {\n            var hlit, hdist, hclen;\n            var i, num, length;\n            hlit = tinf_read_bits(d, 5, 257);\n            hdist = tinf_read_bits(d, 5, 1);\n            hclen = tinf_read_bits(d, 4, 4);\n            for(i = 0; i < 19; ++i)lengths[i] = 0;\n            for(i = 0; i < hclen; ++i){\n                var clen = tinf_read_bits(d, 3, 0);\n                lengths[clcidx[i]] = clen;\n            }\n            tinf_build_tree(code_tree, lengths, 0, 19);\n            for(num = 0; num < hlit + hdist;){\n                var sym = tinf_decode_symbol(d, code_tree);\n                switch(sym){\n                    case 16:\n                        var prev = lengths[num - 1];\n                        for(length = tinf_read_bits(d, 2, 3); length; --length){\n                            lengths[num++] = prev;\n                        }\n                        break;\n                    case 17:\n                        for(length = tinf_read_bits(d, 3, 3); length; --length){\n                            lengths[num++] = 0;\n                        }\n                        break;\n                    case 18:\n                        for(length = tinf_read_bits(d, 7, 11); length; --length){\n                            lengths[num++] = 0;\n                        }\n                        break;\n                    default:\n                        lengths[num++] = sym;\n                        break;\n                }\n            }\n            tinf_build_tree(lt, lengths, 0, hlit);\n            tinf_build_tree(dt2, lengths, hlit, hdist);\n        }\n        function tinf_inflate_block_data(d, lt, dt2) {\n            while(1){\n                var sym = tinf_decode_symbol(d, lt);\n                if (sym === 256) {\n                    return TINF_OK;\n                }\n                if (sym < 256) {\n                    d.dest[d.destLen++] = sym;\n                } else {\n                    var length, dist, offs2;\n                    var i;\n                    sym -= 257;\n                    length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n                    dist = tinf_decode_symbol(d, dt2);\n                    offs2 = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n                    for(i = offs2; i < offs2 + length; ++i){\n                        d.dest[d.destLen++] = d.dest[i];\n                    }\n                }\n            }\n        }\n        function tinf_inflate_uncompressed_block(d) {\n            var length, invlength;\n            var i;\n            while(d.bitcount > 8){\n                d.sourceIndex--;\n                d.bitcount -= 8;\n            }\n            length = d.source[d.sourceIndex + 1];\n            length = 256 * length + d.source[d.sourceIndex];\n            invlength = d.source[d.sourceIndex + 3];\n            invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n            if (length !== (~invlength & 65535)) return TINF_DATA_ERROR;\n            d.sourceIndex += 4;\n            for(i = length; i; --i)d.dest[d.destLen++] = d.source[d.sourceIndex++];\n            d.bitcount = 0;\n            return TINF_OK;\n        }\n        function tinf_uncompress(source, dest) {\n            var d = new Data(source, dest);\n            var bfinal, btype, res;\n            do {\n                bfinal = tinf_getbit(d);\n                btype = tinf_read_bits(d, 2, 0);\n                switch(btype){\n                    case 0:\n                        res = tinf_inflate_uncompressed_block(d);\n                        break;\n                    case 1:\n                        res = tinf_inflate_block_data(d, sltree, sdtree);\n                        break;\n                    case 2:\n                        tinf_decode_trees(d, d.ltree, d.dtree);\n                        res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n                        break;\n                    default:\n                        res = TINF_DATA_ERROR;\n                }\n                if (res !== TINF_OK) throw new Error(\"Data error\");\n            }while (!bfinal);\n            if (d.destLen < d.dest.length) {\n                if (typeof d.dest.slice === \"function\") return d.dest.slice(0, d.destLen);\n                else return d.dest.subarray(0, d.destLen);\n            }\n            return d.dest;\n        }\n        tinf_build_fixed_trees(sltree, sdtree);\n        tinf_build_bits_base(length_bits, length_base, 4, 3);\n        tinf_build_bits_base(dist_bits, dist_base, 2, 1);\n        length_bits[28] = 0;\n        length_base[28] = 258;\n        module.exports = tinf_uncompress;\n    }\n});\n// node_modules/.pnpm/unicode-trie@2.0.0/node_modules/unicode-trie/swap.js\nvar require_swap = __commonJS({\n    \"node_modules/.pnpm/unicode-trie@2.0.0/node_modules/unicode-trie/swap.js\" (exports2, module) {\n        var isBigEndian = new Uint8Array(new Uint32Array([\n            305419896\n        ]).buffer)[0] === 18;\n        var swap = (b, n, m)=>{\n            let i = b[n];\n            b[n] = b[m];\n            b[m] = i;\n        };\n        var swap32 = (array)=>{\n            const len = array.length;\n            for(let i = 0; i < len; i += 4){\n                swap(array, i, i + 3);\n                swap(array, i + 1, i + 2);\n            }\n        };\n        var swap32LE = (array)=>{\n            if (isBigEndian) {\n                swap32(array);\n            }\n        };\n        module.exports = {\n            swap32LE\n        };\n    }\n});\n// node_modules/.pnpm/unicode-trie@2.0.0/node_modules/unicode-trie/index.js\nvar require_unicode_trie = __commonJS({\n    \"node_modules/.pnpm/unicode-trie@2.0.0/node_modules/unicode-trie/index.js\" (exports2, module) {\n        var inflate = require_tiny_inflate();\n        var { swap32LE } = require_swap();\n        var SHIFT_1 = 6 + 5;\n        var SHIFT_2 = 5;\n        var SHIFT_1_2 = SHIFT_1 - SHIFT_2;\n        var OMITTED_BMP_INDEX_1_LENGTH = 65536 >> SHIFT_1;\n        var INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;\n        var INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;\n        var INDEX_SHIFT = 2;\n        var DATA_BLOCK_LENGTH = 1 << SHIFT_2;\n        var DATA_MASK = DATA_BLOCK_LENGTH - 1;\n        var LSCP_INDEX_2_OFFSET = 65536 >> SHIFT_2;\n        var LSCP_INDEX_2_LENGTH = 1024 >> SHIFT_2;\n        var INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;\n        var UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;\n        var UTF8_2B_INDEX_2_LENGTH = 2048 >> 6;\n        var INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;\n        var DATA_GRANULARITY = 1 << INDEX_SHIFT;\n        var UnicodeTrie = class {\n            constructor(data){\n                const isBuffer = typeof data.readUInt32BE === \"function\" && typeof data.slice === \"function\";\n                if (isBuffer || data instanceof Uint8Array) {\n                    let uncompressedLength;\n                    if (isBuffer) {\n                        this.highStart = data.readUInt32LE(0);\n                        this.errorValue = data.readUInt32LE(4);\n                        uncompressedLength = data.readUInt32LE(8);\n                        data = data.slice(12);\n                    } else {\n                        const view = new DataView(data.buffer);\n                        this.highStart = view.getUint32(0, true);\n                        this.errorValue = view.getUint32(4, true);\n                        uncompressedLength = view.getUint32(8, true);\n                        data = data.subarray(12);\n                    }\n                    data = inflate(data, new Uint8Array(uncompressedLength));\n                    data = inflate(data, new Uint8Array(uncompressedLength));\n                    swap32LE(data);\n                    this.data = new Uint32Array(data.buffer);\n                } else {\n                    ({ data: this.data, highStart: this.highStart, errorValue: this.errorValue } = data);\n                }\n            }\n            get(codePoint) {\n                let index;\n                if (codePoint < 0 || codePoint > 1114111) {\n                    return this.errorValue;\n                }\n                if (codePoint < 55296 || codePoint > 56319 && codePoint <= 65535) {\n                    index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n                    return this.data[index];\n                }\n                if (codePoint <= 65535) {\n                    index = (this.data[LSCP_INDEX_2_OFFSET + (codePoint - 55296 >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n                    return this.data[index];\n                }\n                if (codePoint < this.highStart) {\n                    index = this.data[INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH + (codePoint >> SHIFT_1)];\n                    index = this.data[index + (codePoint >> SHIFT_2 & INDEX_2_MASK)];\n                    index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);\n                    return this.data[index];\n                }\n                return this.data[this.data.length - DATA_GRANULARITY];\n            }\n        };\n        module.exports = UnicodeTrie;\n    }\n});\n// node_modules/.pnpm/base64-js@0.0.8/node_modules/base64-js/lib/b64.js\nvar require_b64 = __commonJS({\n    \"node_modules/.pnpm/base64-js@0.0.8/node_modules/base64-js/lib/b64.js\" (exports2) {\n        var lookup = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n        (function(exports3) {\n            \"use strict\";\n            var Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n            var PLUS = \"+\".charCodeAt(0);\n            var SLASH = \"/\".charCodeAt(0);\n            var NUMBER = \"0\".charCodeAt(0);\n            var LOWER = \"a\".charCodeAt(0);\n            var UPPER = \"A\".charCodeAt(0);\n            var PLUS_URL_SAFE = \"-\".charCodeAt(0);\n            var SLASH_URL_SAFE = \"_\".charCodeAt(0);\n            function decode2(elt) {\n                var code = elt.charCodeAt(0);\n                if (code === PLUS || code === PLUS_URL_SAFE) return 62;\n                if (code === SLASH || code === SLASH_URL_SAFE) return 63;\n                if (code < NUMBER) return -1;\n                if (code < NUMBER + 10) return code - NUMBER + 26 + 26;\n                if (code < UPPER + 26) return code - UPPER;\n                if (code < LOWER + 26) return code - LOWER + 26;\n            }\n            function b64ToByteArray(b64) {\n                var i, j, l, tmp, placeHolders, arr;\n                if (b64.length % 4 > 0) {\n                    throw new Error(\"Invalid string. Length must be a multiple of 4\");\n                }\n                var len = b64.length;\n                placeHolders = b64.charAt(len - 2) === \"=\" ? 2 : b64.charAt(len - 1) === \"=\" ? 1 : 0;\n                arr = new Arr(b64.length * 3 / 4 - placeHolders);\n                l = placeHolders > 0 ? b64.length - 4 : b64.length;\n                var L = 0;\n                function push(v) {\n                    arr[L++] = v;\n                }\n                for(i = 0, j = 0; i < l; i += 4, j += 3){\n                    tmp = decode2(b64.charAt(i)) << 18 | decode2(b64.charAt(i + 1)) << 12 | decode2(b64.charAt(i + 2)) << 6 | decode2(b64.charAt(i + 3));\n                    push((tmp & 16711680) >> 16);\n                    push((tmp & 65280) >> 8);\n                    push(tmp & 255);\n                }\n                if (placeHolders === 2) {\n                    tmp = decode2(b64.charAt(i)) << 2 | decode2(b64.charAt(i + 1)) >> 4;\n                    push(tmp & 255);\n                } else if (placeHolders === 1) {\n                    tmp = decode2(b64.charAt(i)) << 10 | decode2(b64.charAt(i + 1)) << 4 | decode2(b64.charAt(i + 2)) >> 2;\n                    push(tmp >> 8 & 255);\n                    push(tmp & 255);\n                }\n                return arr;\n            }\n            function uint8ToBase64(uint8) {\n                var i, extraBytes = uint8.length % 3, output = \"\", temp, length;\n                function encode(num) {\n                    return lookup.charAt(num);\n                }\n                function tripletToBase64(num) {\n                    return encode(num >> 18 & 63) + encode(num >> 12 & 63) + encode(num >> 6 & 63) + encode(num & 63);\n                }\n                for(i = 0, length = uint8.length - extraBytes; i < length; i += 3){\n                    temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];\n                    output += tripletToBase64(temp);\n                }\n                switch(extraBytes){\n                    case 1:\n                        temp = uint8[uint8.length - 1];\n                        output += encode(temp >> 2);\n                        output += encode(temp << 4 & 63);\n                        output += \"==\";\n                        break;\n                    case 2:\n                        temp = (uint8[uint8.length - 2] << 8) + uint8[uint8.length - 1];\n                        output += encode(temp >> 10);\n                        output += encode(temp >> 4 & 63);\n                        output += encode(temp << 2 & 63);\n                        output += \"=\";\n                        break;\n                }\n                return output;\n            }\n            exports3.toByteArray = b64ToByteArray;\n            exports3.fromByteArray = uint8ToBase64;\n        })(typeof exports2 === \"undefined\" ? exports2.base64js = {} : exports2);\n    }\n});\n// node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/parse.js\nvar require_parse = __commonJS({\n    \"node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/parse.js\" (exports2, module) {\n        var openParentheses = \"(\".charCodeAt(0);\n        var closeParentheses = \")\".charCodeAt(0);\n        var singleQuote = \"'\".charCodeAt(0);\n        var doubleQuote = '\"'.charCodeAt(0);\n        var backslash = \"\\\\\".charCodeAt(0);\n        var slash = \"/\".charCodeAt(0);\n        var comma = \",\".charCodeAt(0);\n        var colon = \":\".charCodeAt(0);\n        var star = \"*\".charCodeAt(0);\n        var uLower = \"u\".charCodeAt(0);\n        var uUpper = \"U\".charCodeAt(0);\n        var plus = \"+\".charCodeAt(0);\n        var isUnicodeRange = /^[a-f0-9?-]+$/i;\n        module.exports = function(input) {\n            var tokens = [];\n            var value = input;\n            var next, quote, prev, token, escape, escapePos, whitespacePos, parenthesesOpenPos;\n            var pos = 0;\n            var code = value.charCodeAt(pos);\n            var max2 = value.length;\n            var stack = [\n                {\n                    nodes: tokens\n                }\n            ];\n            var balanced = 0;\n            var parent;\n            var name = \"\";\n            var before = \"\";\n            var after = \"\";\n            while(pos < max2){\n                if (code <= 32) {\n                    next = pos;\n                    do {\n                        next += 1;\n                        code = value.charCodeAt(next);\n                    }while (code <= 32);\n                    token = value.slice(pos, next);\n                    prev = tokens[tokens.length - 1];\n                    if (code === closeParentheses && balanced) {\n                        after = token;\n                    } else if (prev && prev.type === \"div\") {\n                        prev.after = token;\n                        prev.sourceEndIndex += token.length;\n                    } else if (code === comma || code === colon || code === slash && value.charCodeAt(next + 1) !== star && (!parent || parent && parent.type === \"function\" && parent.value !== \"calc\")) {\n                        before = token;\n                    } else {\n                        tokens.push({\n                            type: \"space\",\n                            sourceIndex: pos,\n                            sourceEndIndex: next,\n                            value: token\n                        });\n                    }\n                    pos = next;\n                } else if (code === singleQuote || code === doubleQuote) {\n                    next = pos;\n                    quote = code === singleQuote ? \"'\" : '\"';\n                    token = {\n                        type: \"string\",\n                        sourceIndex: pos,\n                        quote\n                    };\n                    do {\n                        escape = false;\n                        next = value.indexOf(quote, next + 1);\n                        if (~next) {\n                            escapePos = next;\n                            while(value.charCodeAt(escapePos - 1) === backslash){\n                                escapePos -= 1;\n                                escape = !escape;\n                            }\n                        } else {\n                            value += quote;\n                            next = value.length - 1;\n                            token.unclosed = true;\n                        }\n                    }while (escape);\n                    token.value = value.slice(pos + 1, next);\n                    token.sourceEndIndex = token.unclosed ? next : next + 1;\n                    tokens.push(token);\n                    pos = next + 1;\n                    code = value.charCodeAt(pos);\n                } else if (code === slash && value.charCodeAt(pos + 1) === star) {\n                    next = value.indexOf(\"*/\", pos);\n                    token = {\n                        type: \"comment\",\n                        sourceIndex: pos,\n                        sourceEndIndex: next + 2\n                    };\n                    if (next === -1) {\n                        token.unclosed = true;\n                        next = value.length;\n                        token.sourceEndIndex = next;\n                    }\n                    token.value = value.slice(pos + 2, next);\n                    tokens.push(token);\n                    pos = next + 2;\n                    code = value.charCodeAt(pos);\n                } else if ((code === slash || code === star) && parent && parent.type === \"function\" && parent.value === \"calc\") {\n                    token = value[pos];\n                    tokens.push({\n                        type: \"word\",\n                        sourceIndex: pos - before.length,\n                        sourceEndIndex: pos + token.length,\n                        value: token\n                    });\n                    pos += 1;\n                    code = value.charCodeAt(pos);\n                } else if (code === slash || code === comma || code === colon) {\n                    token = value[pos];\n                    tokens.push({\n                        type: \"div\",\n                        sourceIndex: pos - before.length,\n                        sourceEndIndex: pos + token.length,\n                        value: token,\n                        before,\n                        after: \"\"\n                    });\n                    before = \"\";\n                    pos += 1;\n                    code = value.charCodeAt(pos);\n                } else if (openParentheses === code) {\n                    next = pos;\n                    do {\n                        next += 1;\n                        code = value.charCodeAt(next);\n                    }while (code <= 32);\n                    parenthesesOpenPos = pos;\n                    token = {\n                        type: \"function\",\n                        sourceIndex: pos - name.length,\n                        value: name,\n                        before: value.slice(parenthesesOpenPos + 1, next)\n                    };\n                    pos = next;\n                    if (name === \"url\" && code !== singleQuote && code !== doubleQuote) {\n                        next -= 1;\n                        do {\n                            escape = false;\n                            next = value.indexOf(\")\", next + 1);\n                            if (~next) {\n                                escapePos = next;\n                                while(value.charCodeAt(escapePos - 1) === backslash){\n                                    escapePos -= 1;\n                                    escape = !escape;\n                                }\n                            } else {\n                                value += \")\";\n                                next = value.length - 1;\n                                token.unclosed = true;\n                            }\n                        }while (escape);\n                        whitespacePos = next;\n                        do {\n                            whitespacePos -= 1;\n                            code = value.charCodeAt(whitespacePos);\n                        }while (code <= 32);\n                        if (parenthesesOpenPos < whitespacePos) {\n                            if (pos !== whitespacePos + 1) {\n                                token.nodes = [\n                                    {\n                                        type: \"word\",\n                                        sourceIndex: pos,\n                                        sourceEndIndex: whitespacePos + 1,\n                                        value: value.slice(pos, whitespacePos + 1)\n                                    }\n                                ];\n                            } else {\n                                token.nodes = [];\n                            }\n                            if (token.unclosed && whitespacePos + 1 !== next) {\n                                token.after = \"\";\n                                token.nodes.push({\n                                    type: \"space\",\n                                    sourceIndex: whitespacePos + 1,\n                                    sourceEndIndex: next,\n                                    value: value.slice(whitespacePos + 1, next)\n                                });\n                            } else {\n                                token.after = value.slice(whitespacePos + 1, next);\n                                token.sourceEndIndex = next;\n                            }\n                        } else {\n                            token.after = \"\";\n                            token.nodes = [];\n                        }\n                        pos = next + 1;\n                        token.sourceEndIndex = token.unclosed ? next : pos;\n                        code = value.charCodeAt(pos);\n                        tokens.push(token);\n                    } else {\n                        balanced += 1;\n                        token.after = \"\";\n                        token.sourceEndIndex = pos + 1;\n                        tokens.push(token);\n                        stack.push(token);\n                        tokens = token.nodes = [];\n                        parent = token;\n                    }\n                    name = \"\";\n                } else if (closeParentheses === code && balanced) {\n                    pos += 1;\n                    code = value.charCodeAt(pos);\n                    parent.after = after;\n                    parent.sourceEndIndex += after.length;\n                    after = \"\";\n                    balanced -= 1;\n                    stack[stack.length - 1].sourceEndIndex = pos;\n                    stack.pop();\n                    parent = stack[balanced];\n                    tokens = parent.nodes;\n                } else {\n                    next = pos;\n                    do {\n                        if (code === backslash) {\n                            next += 1;\n                        }\n                        next += 1;\n                        code = value.charCodeAt(next);\n                    }while (next < max2 && !(code <= 32 || code === singleQuote || code === doubleQuote || code === comma || code === colon || code === slash || code === openParentheses || code === star && parent && parent.type === \"function\" && parent.value === \"calc\" || code === slash && parent.type === \"function\" && parent.value === \"calc\" || code === closeParentheses && balanced));\n                    token = value.slice(pos, next);\n                    if (openParentheses === code) {\n                        name = token;\n                    } else if ((uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) && plus === token.charCodeAt(1) && isUnicodeRange.test(token.slice(2))) {\n                        tokens.push({\n                            type: \"unicode-range\",\n                            sourceIndex: pos,\n                            sourceEndIndex: next,\n                            value: token\n                        });\n                    } else {\n                        tokens.push({\n                            type: \"word\",\n                            sourceIndex: pos,\n                            sourceEndIndex: next,\n                            value: token\n                        });\n                    }\n                    pos = next;\n                }\n            }\n            for(pos = stack.length - 1; pos; pos -= 1){\n                stack[pos].unclosed = true;\n                stack[pos].sourceEndIndex = value.length;\n            }\n            return stack[0].nodes;\n        };\n    }\n});\n// node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/walk.js\nvar require_walk = __commonJS({\n    \"node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/walk.js\" (exports2, module) {\n        module.exports = function walk(nodes, cb, bubble) {\n            var i, max2, node, result;\n            for(i = 0, max2 = nodes.length; i < max2; i += 1){\n                node = nodes[i];\n                if (!bubble) {\n                    result = cb(node, i, nodes);\n                }\n                if (result !== false && node.type === \"function\" && Array.isArray(node.nodes)) {\n                    walk(node.nodes, cb, bubble);\n                }\n                if (bubble) {\n                    cb(node, i, nodes);\n                }\n            }\n        };\n    }\n});\n// node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/stringify.js\nvar require_stringify = __commonJS({\n    \"node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/stringify.js\" (exports2, module) {\n        function stringifyNode(node, custom) {\n            var type = node.type;\n            var value = node.value;\n            var buf;\n            var customResult;\n            if (custom && (customResult = custom(node)) !== void 0) {\n                return customResult;\n            } else if (type === \"word\" || type === \"space\") {\n                return value;\n            } else if (type === \"string\") {\n                buf = node.quote || \"\";\n                return buf + value + (node.unclosed ? \"\" : buf);\n            } else if (type === \"comment\") {\n                return \"/*\" + value + (node.unclosed ? \"\" : \"*/\");\n            } else if (type === \"div\") {\n                return (node.before || \"\") + value + (node.after || \"\");\n            } else if (Array.isArray(node.nodes)) {\n                buf = stringify(node.nodes, custom);\n                if (type !== \"function\") {\n                    return buf;\n                }\n                return value + \"(\" + (node.before || \"\") + buf + (node.after || \"\") + (node.unclosed ? \"\" : \")\");\n            }\n            return value;\n        }\n        function stringify(nodes, custom) {\n            var result, i;\n            if (Array.isArray(nodes)) {\n                result = \"\";\n                for(i = nodes.length - 1; ~i; i -= 1){\n                    result = stringifyNode(nodes[i], custom) + result;\n                }\n                return result;\n            }\n            return stringifyNode(nodes, custom);\n        }\n        module.exports = stringify;\n    }\n});\n// node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/unit.js\nvar require_unit = __commonJS({\n    \"node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/unit.js\" (exports2, module) {\n        var minus = \"-\".charCodeAt(0);\n        var plus = \"+\".charCodeAt(0);\n        var dot = \".\".charCodeAt(0);\n        var exp = \"e\".charCodeAt(0);\n        var EXP = \"E\".charCodeAt(0);\n        function likeNumber(value) {\n            var code = value.charCodeAt(0);\n            var nextCode;\n            if (code === plus || code === minus) {\n                nextCode = value.charCodeAt(1);\n                if (nextCode >= 48 && nextCode <= 57) {\n                    return true;\n                }\n                var nextNextCode = value.charCodeAt(2);\n                if (nextCode === dot && nextNextCode >= 48 && nextNextCode <= 57) {\n                    return true;\n                }\n                return false;\n            }\n            if (code === dot) {\n                nextCode = value.charCodeAt(1);\n                if (nextCode >= 48 && nextCode <= 57) {\n                    return true;\n                }\n                return false;\n            }\n            if (code >= 48 && code <= 57) {\n                return true;\n            }\n            return false;\n        }\n        module.exports = function(value) {\n            var pos = 0;\n            var length = value.length;\n            var code;\n            var nextCode;\n            var nextNextCode;\n            if (length === 0 || !likeNumber(value)) {\n                return false;\n            }\n            code = value.charCodeAt(pos);\n            if (code === plus || code === minus) {\n                pos++;\n            }\n            while(pos < length){\n                code = value.charCodeAt(pos);\n                if (code < 48 || code > 57) {\n                    break;\n                }\n                pos += 1;\n            }\n            code = value.charCodeAt(pos);\n            nextCode = value.charCodeAt(pos + 1);\n            if (code === dot && nextCode >= 48 && nextCode <= 57) {\n                pos += 2;\n                while(pos < length){\n                    code = value.charCodeAt(pos);\n                    if (code < 48 || code > 57) {\n                        break;\n                    }\n                    pos += 1;\n                }\n            }\n            code = value.charCodeAt(pos);\n            nextCode = value.charCodeAt(pos + 1);\n            nextNextCode = value.charCodeAt(pos + 2);\n            if ((code === exp || code === EXP) && (nextCode >= 48 && nextCode <= 57 || (nextCode === plus || nextCode === minus) && nextNextCode >= 48 && nextNextCode <= 57)) {\n                pos += nextCode === plus || nextCode === minus ? 3 : 2;\n                while(pos < length){\n                    code = value.charCodeAt(pos);\n                    if (code < 48 || code > 57) {\n                        break;\n                    }\n                    pos += 1;\n                }\n            }\n            return {\n                number: value.slice(0, pos),\n                unit: value.slice(pos)\n            };\n        };\n    }\n});\n// node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/index.js\nvar require_lib = __commonJS({\n    \"node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/index.js\" (exports2, module) {\n        var parse2 = require_parse();\n        var walk = require_walk();\n        var stringify = require_stringify();\n        function ValueParser(value) {\n            if (this instanceof ValueParser) {\n                this.nodes = parse2(value);\n                return this;\n            }\n            return new ValueParser(value);\n        }\n        ValueParser.prototype.toString = function() {\n            return Array.isArray(this.nodes) ? stringify(this.nodes) : \"\";\n        };\n        ValueParser.prototype.walk = function(cb, bubble) {\n            walk(this.nodes, cb, bubble);\n            return this;\n        };\n        ValueParser.unit = require_unit();\n        ValueParser.walk = walk;\n        ValueParser.stringify = stringify;\n        module.exports = ValueParser;\n    }\n});\n// node_modules/.pnpm/camelize@1.0.0/node_modules/camelize/index.js\nvar require_camelize = __commonJS({\n    \"node_modules/.pnpm/camelize@1.0.0/node_modules/camelize/index.js\" (exports2, module) {\n        module.exports = function(obj) {\n            if (typeof obj === \"string\") return camelCase(obj);\n            return walk(obj);\n        };\n        function walk(obj) {\n            if (!obj || typeof obj !== \"object\") return obj;\n            if (isDate(obj) || isRegex(obj)) return obj;\n            if (isArray(obj)) return map(obj, walk);\n            return reduce(objectKeys(obj), function(acc, key) {\n                var camel = camelCase(key);\n                acc[camel] = walk(obj[key]);\n                return acc;\n            }, {});\n        }\n        function camelCase(str) {\n            return str.replace(/[_.-](\\w|$)/g, function(_, x) {\n                return x.toUpperCase();\n            });\n        }\n        var isArray = Array.isArray || function(obj) {\n            return Object.prototype.toString.call(obj) === \"[object Array]\";\n        };\n        var isDate = function(obj) {\n            return Object.prototype.toString.call(obj) === \"[object Date]\";\n        };\n        var isRegex = function(obj) {\n            return Object.prototype.toString.call(obj) === \"[object RegExp]\";\n        };\n        var has = Object.prototype.hasOwnProperty;\n        var objectKeys = Object.keys || function(obj) {\n            var keys = [];\n            for(var key in obj){\n                if (has.call(obj, key)) keys.push(key);\n            }\n            return keys;\n        };\n        function map(xs, f) {\n            if (xs.map) return xs.map(f);\n            var res = [];\n            for(var i = 0; i < xs.length; i++){\n                res.push(f(xs[i], i));\n            }\n            return res;\n        }\n        function reduce(xs, f, acc) {\n            if (xs.reduce) return xs.reduce(f, acc);\n            for(var i = 0; i < xs.length; i++){\n                acc = f(acc, xs[i], i);\n            }\n            return acc;\n        }\n    }\n});\n// node_modules/.pnpm/css-color-keywords@1.0.0/node_modules/css-color-keywords/colors.json\nvar require_colors = __commonJS({\n    \"node_modules/.pnpm/css-color-keywords@1.0.0/node_modules/css-color-keywords/colors.json\" (exports2, module) {\n        module.exports = {\n            black: \"#000000\",\n            silver: \"#c0c0c0\",\n            gray: \"#808080\",\n            white: \"#ffffff\",\n            maroon: \"#800000\",\n            red: \"#ff0000\",\n            purple: \"#800080\",\n            fuchsia: \"#ff00ff\",\n            green: \"#008000\",\n            lime: \"#00ff00\",\n            olive: \"#808000\",\n            yellow: \"#ffff00\",\n            navy: \"#000080\",\n            blue: \"#0000ff\",\n            teal: \"#008080\",\n            aqua: \"#00ffff\",\n            orange: \"#ffa500\",\n            aliceblue: \"#f0f8ff\",\n            antiquewhite: \"#faebd7\",\n            aquamarine: \"#7fffd4\",\n            azure: \"#f0ffff\",\n            beige: \"#f5f5dc\",\n            bisque: \"#ffe4c4\",\n            blanchedalmond: \"#ffebcd\",\n            blueviolet: \"#8a2be2\",\n            brown: \"#a52a2a\",\n            burlywood: \"#deb887\",\n            cadetblue: \"#5f9ea0\",\n            chartreuse: \"#7fff00\",\n            chocolate: \"#d2691e\",\n            coral: \"#ff7f50\",\n            cornflowerblue: \"#6495ed\",\n            cornsilk: \"#fff8dc\",\n            crimson: \"#dc143c\",\n            darkblue: \"#00008b\",\n            darkcyan: \"#008b8b\",\n            darkgoldenrod: \"#b8860b\",\n            darkgray: \"#a9a9a9\",\n            darkgreen: \"#006400\",\n            darkgrey: \"#a9a9a9\",\n            darkkhaki: \"#bdb76b\",\n            darkmagenta: \"#8b008b\",\n            darkolivegreen: \"#556b2f\",\n            darkorange: \"#ff8c00\",\n            darkorchid: \"#9932cc\",\n            darkred: \"#8b0000\",\n            darksalmon: \"#e9967a\",\n            darkseagreen: \"#8fbc8f\",\n            darkslateblue: \"#483d8b\",\n            darkslategray: \"#2f4f4f\",\n            darkslategrey: \"#2f4f4f\",\n            darkturquoise: \"#00ced1\",\n            darkviolet: \"#9400d3\",\n            deeppink: \"#ff1493\",\n            deepskyblue: \"#00bfff\",\n            dimgray: \"#696969\",\n            dimgrey: \"#696969\",\n            dodgerblue: \"#1e90ff\",\n            firebrick: \"#b22222\",\n            floralwhite: \"#fffaf0\",\n            forestgreen: \"#228b22\",\n            gainsboro: \"#dcdcdc\",\n            ghostwhite: \"#f8f8ff\",\n            gold: \"#ffd700\",\n            goldenrod: \"#daa520\",\n            greenyellow: \"#adff2f\",\n            grey: \"#808080\",\n            honeydew: \"#f0fff0\",\n            hotpink: \"#ff69b4\",\n            indianred: \"#cd5c5c\",\n            indigo: \"#4b0082\",\n            ivory: \"#fffff0\",\n            khaki: \"#f0e68c\",\n            lavender: \"#e6e6fa\",\n            lavenderblush: \"#fff0f5\",\n            lawngreen: \"#7cfc00\",\n            lemonchiffon: \"#fffacd\",\n            lightblue: \"#add8e6\",\n            lightcoral: \"#f08080\",\n            lightcyan: \"#e0ffff\",\n            lightgoldenrodyellow: \"#fafad2\",\n            lightgray: \"#d3d3d3\",\n            lightgreen: \"#90ee90\",\n            lightgrey: \"#d3d3d3\",\n            lightpink: \"#ffb6c1\",\n            lightsalmon: \"#ffa07a\",\n            lightseagreen: \"#20b2aa\",\n            lightskyblue: \"#87cefa\",\n            lightslategray: \"#778899\",\n            lightslategrey: \"#778899\",\n            lightsteelblue: \"#b0c4de\",\n            lightyellow: \"#ffffe0\",\n            limegreen: \"#32cd32\",\n            linen: \"#faf0e6\",\n            mediumaquamarine: \"#66cdaa\",\n            mediumblue: \"#0000cd\",\n            mediumorchid: \"#ba55d3\",\n            mediumpurple: \"#9370db\",\n            mediumseagreen: \"#3cb371\",\n            mediumslateblue: \"#7b68ee\",\n            mediumspringgreen: \"#00fa9a\",\n            mediumturquoise: \"#48d1cc\",\n            mediumvioletred: \"#c71585\",\n            midnightblue: \"#191970\",\n            mintcream: \"#f5fffa\",\n            mistyrose: \"#ffe4e1\",\n            moccasin: \"#ffe4b5\",\n            navajowhite: \"#ffdead\",\n            oldlace: \"#fdf5e6\",\n            olivedrab: \"#6b8e23\",\n            orangered: \"#ff4500\",\n            orchid: \"#da70d6\",\n            palegoldenrod: \"#eee8aa\",\n            palegreen: \"#98fb98\",\n            paleturquoise: \"#afeeee\",\n            palevioletred: \"#db7093\",\n            papayawhip: \"#ffefd5\",\n            peachpuff: \"#ffdab9\",\n            peru: \"#cd853f\",\n            pink: \"#ffc0cb\",\n            plum: \"#dda0dd\",\n            powderblue: \"#b0e0e6\",\n            rosybrown: \"#bc8f8f\",\n            royalblue: \"#4169e1\",\n            saddlebrown: \"#8b4513\",\n            salmon: \"#fa8072\",\n            sandybrown: \"#f4a460\",\n            seagreen: \"#2e8b57\",\n            seashell: \"#fff5ee\",\n            sienna: \"#a0522d\",\n            skyblue: \"#87ceeb\",\n            slateblue: \"#6a5acd\",\n            slategray: \"#708090\",\n            slategrey: \"#708090\",\n            snow: \"#fffafa\",\n            springgreen: \"#00ff7f\",\n            steelblue: \"#4682b4\",\n            tan: \"#d2b48c\",\n            thistle: \"#d8bfd8\",\n            tomato: \"#ff6347\",\n            turquoise: \"#40e0d0\",\n            violet: \"#ee82ee\",\n            wheat: \"#f5deb3\",\n            whitesmoke: \"#f5f5f5\",\n            yellowgreen: \"#9acd32\",\n            rebeccapurple: \"#663399\"\n        };\n    }\n});\n// node_modules/.pnpm/css-color-keywords@1.0.0/node_modules/css-color-keywords/index.js\nvar require_css_color_keywords = __commonJS({\n    \"node_modules/.pnpm/css-color-keywords@1.0.0/node_modules/css-color-keywords/index.js\" (exports2, module) {\n        \"use strict\";\n        module.exports = require_colors();\n    }\n});\n// node_modules/.pnpm/css-to-react-native@3.0.0/node_modules/css-to-react-native/index.js\nvar require_css_to_react_native = __commonJS({\n    \"node_modules/.pnpm/css-to-react-native@3.0.0/node_modules/css-to-react-native/index.js\" (exports2) {\n        \"use strict\";\n        Object.defineProperty(exports2, \"__esModule\", {\n            value: true\n        });\n        function _interopDefault(ex) {\n            return ex && typeof ex === \"object\" && \"default\" in ex ? ex[\"default\"] : ex;\n        }\n        var parse2 = require_lib();\n        var parse__default = _interopDefault(parse2);\n        var camelizeStyleName = _interopDefault(require_camelize());\n        var cssColorKeywords = _interopDefault(require_css_color_keywords());\n        var matchString = function matchString2(node) {\n            if (node.type !== \"string\") return null;\n            return node.value.replace(/\\\\([0-9a-f]{1,6})(?:\\s|$)/gi, function(match, charCode) {\n                return String.fromCharCode(parseInt(charCode, 16));\n            }).replace(/\\\\/g, \"\");\n        };\n        var hexColorRe = /^(#(?:[0-9a-f]{3,4}){1,2})$/i;\n        var cssFunctionNameRe = /^(rgba?|hsla?|hwb|lab|lch|gray|color)$/;\n        var matchColor = function matchColor2(node) {\n            if (node.type === \"word\" && (hexColorRe.test(node.value) || node.value in cssColorKeywords || node.value === \"transparent\")) {\n                return node.value;\n            } else if (node.type === \"function\" && cssFunctionNameRe.test(node.value)) {\n                return parse2.stringify(node);\n            }\n            return null;\n        };\n        var noneRe = /^(none)$/i;\n        var autoRe = /^(auto)$/i;\n        var identRe = /(^-?[_a-z][_a-z0-9-]*$)/i;\n        var numberRe = /^([+-]?(?:\\d*\\.)?\\d+(?:e[+-]?\\d+)?)$/i;\n        var lengthRe = /^(0$|(?:[+-]?(?:\\d*\\.)?\\d+(?:e[+-]?\\d+)?)(?=px$))/i;\n        var unsupportedUnitRe = /^([+-]?(?:\\d*\\.)?\\d+(?:e[+-]?\\d+)?(ch|em|ex|rem|vh|vw|vmin|vmax|cm|mm|in|pc|pt))$/i;\n        var angleRe = /^([+-]?(?:\\d*\\.)?\\d+(?:e[+-]?\\d+)?(?:deg|rad))$/i;\n        var percentRe = /^([+-]?(?:\\d*\\.)?\\d+(?:e[+-]?\\d+)?%)$/i;\n        var noopToken = function noopToken2(predicate) {\n            return function(node) {\n                return predicate(node) ? \"<token>\" : null;\n            };\n        };\n        var valueForTypeToken = function valueForTypeToken2(type) {\n            return function(node) {\n                return node.type === type ? node.value : null;\n            };\n        };\n        var regExpToken = function regExpToken2(regExp, transform2) {\n            if (transform2 === void 0) {\n                transform2 = String;\n            }\n            return function(node) {\n                if (node.type !== \"word\") return null;\n                var match = node.value.match(regExp);\n                if (match === null) return null;\n                var value = transform2(match[1]);\n                return value;\n            };\n        };\n        var SPACE = noopToken(function(node) {\n            return node.type === \"space\";\n        });\n        var SLASH = noopToken(function(node) {\n            return node.type === \"div\" && node.value === \"/\";\n        });\n        var COMMA = noopToken(function(node) {\n            return node.type === \"div\" && node.value === \",\";\n        });\n        var WORD = valueForTypeToken(\"word\");\n        var NONE = regExpToken(noneRe);\n        var AUTO = regExpToken(autoRe);\n        var NUMBER = regExpToken(numberRe, Number);\n        var LENGTH = regExpToken(lengthRe, Number);\n        var UNSUPPORTED_LENGTH_UNIT = regExpToken(unsupportedUnitRe);\n        var ANGLE = regExpToken(angleRe, function(angle) {\n            return angle.toLowerCase();\n        });\n        var PERCENT = regExpToken(percentRe);\n        var IDENT = regExpToken(identRe);\n        var STRING = matchString;\n        var COLOR = matchColor;\n        var LINE = regExpToken(/^(none|underline|line-through)$/i);\n        var BORDER_STYLE = regExpToken(/^(solid|dashed|dotted)$/);\n        var defaultBorderWidth = 1;\n        var defaultBorderColor = \"black\";\n        var defaultBorderStyle = \"solid\";\n        var border = function border2(tokenStream) {\n            var borderWidth2;\n            var borderColor2;\n            var borderStyle;\n            if (tokenStream.matches(NONE)) {\n                tokenStream.expectEmpty();\n                return {\n                    borderWidth: 0,\n                    borderColor: \"black\",\n                    borderStyle: \"solid\"\n                };\n            }\n            var partsParsed = 0;\n            while(partsParsed < 3 && tokenStream.hasTokens()){\n                if (partsParsed !== 0) tokenStream.expect(SPACE);\n                if (borderWidth2 === void 0 && tokenStream.matches(LENGTH, UNSUPPORTED_LENGTH_UNIT)) {\n                    borderWidth2 = tokenStream.lastValue;\n                } else if (borderColor2 === void 0 && tokenStream.matches(COLOR)) {\n                    borderColor2 = tokenStream.lastValue;\n                } else if (borderStyle === void 0 && tokenStream.matches(BORDER_STYLE)) {\n                    borderStyle = tokenStream.lastValue;\n                } else {\n                    tokenStream[\"throw\"]();\n                }\n                partsParsed += 1;\n            }\n            tokenStream.expectEmpty();\n            if (borderWidth2 === void 0) borderWidth2 = defaultBorderWidth;\n            if (borderColor2 === void 0) borderColor2 = defaultBorderColor;\n            if (borderStyle === void 0) borderStyle = defaultBorderStyle;\n            return {\n                borderWidth: borderWidth2,\n                borderColor: borderColor2,\n                borderStyle\n            };\n        };\n        var directionFactory = function directionFactory2(_ref) {\n            var _ref$types = _ref.types, types = _ref$types === void 0 ? [\n                LENGTH,\n                UNSUPPORTED_LENGTH_UNIT,\n                PERCENT\n            ] : _ref$types, _ref$directions = _ref.directions, directions = _ref$directions === void 0 ? [\n                \"Top\",\n                \"Right\",\n                \"Bottom\",\n                \"Left\"\n            ] : _ref$directions, _ref$prefix = _ref.prefix, prefix = _ref$prefix === void 0 ? \"\" : _ref$prefix, _ref$suffix = _ref.suffix, suffix = _ref$suffix === void 0 ? \"\" : _ref$suffix;\n            return function(tokenStream) {\n                var _ref2;\n                var values = [];\n                values.push(tokenStream.expect.apply(tokenStream, types));\n                while(values.length < 4 && tokenStream.hasTokens()){\n                    tokenStream.expect(SPACE);\n                    values.push(tokenStream.expect.apply(tokenStream, types));\n                }\n                tokenStream.expectEmpty();\n                var top = values[0], _values$ = values[1], right = _values$ === void 0 ? top : _values$, _values$2 = values[2], bottom = _values$2 === void 0 ? top : _values$2, _values$3 = values[3], left = _values$3 === void 0 ? right : _values$3;\n                var keyFor = function keyFor2(n) {\n                    return \"\" + prefix + directions[n] + suffix;\n                };\n                return _ref2 = {}, _ref2[keyFor(0)] = top, _ref2[keyFor(1)] = right, _ref2[keyFor(2)] = bottom, _ref2[keyFor(3)] = left, _ref2;\n            };\n        };\n        var parseShadowOffset = function parseShadowOffset2(tokenStream) {\n            var width = tokenStream.expect(LENGTH);\n            var height = tokenStream.matches(SPACE) ? tokenStream.expect(LENGTH) : width;\n            tokenStream.expectEmpty();\n            return {\n                width,\n                height\n            };\n        };\n        var parseShadow = function parseShadow2(tokenStream) {\n            var offsetX;\n            var offsetY;\n            var radius;\n            var color;\n            if (tokenStream.matches(NONE)) {\n                tokenStream.expectEmpty();\n                return {\n                    offset: {\n                        width: 0,\n                        height: 0\n                    },\n                    radius: 0,\n                    color: \"black\"\n                };\n            }\n            var didParseFirst = false;\n            while(tokenStream.hasTokens()){\n                if (didParseFirst) tokenStream.expect(SPACE);\n                if (offsetX === void 0 && tokenStream.matches(LENGTH, UNSUPPORTED_LENGTH_UNIT)) {\n                    offsetX = tokenStream.lastValue;\n                    tokenStream.expect(SPACE);\n                    offsetY = tokenStream.expect(LENGTH, UNSUPPORTED_LENGTH_UNIT);\n                    tokenStream.saveRewindPoint();\n                    if (tokenStream.matches(SPACE) && tokenStream.matches(LENGTH, UNSUPPORTED_LENGTH_UNIT)) {\n                        radius = tokenStream.lastValue;\n                    } else {\n                        tokenStream.rewind();\n                    }\n                } else if (color === void 0 && tokenStream.matches(COLOR)) {\n                    color = tokenStream.lastValue;\n                } else {\n                    tokenStream[\"throw\"]();\n                }\n                didParseFirst = true;\n            }\n            if (offsetX === void 0) tokenStream[\"throw\"]();\n            return {\n                offset: {\n                    width: offsetX,\n                    height: offsetY\n                },\n                radius: radius !== void 0 ? radius : 0,\n                color: color !== void 0 ? color : \"black\"\n            };\n        };\n        var boxShadow = function boxShadow2(tokenStream) {\n            var _parseShadow = parseShadow(tokenStream), offset = _parseShadow.offset, radius = _parseShadow.radius, color = _parseShadow.color;\n            return {\n                shadowOffset: offset,\n                shadowRadius: radius,\n                shadowColor: color,\n                shadowOpacity: 1\n            };\n        };\n        var defaultFlexGrow = 1;\n        var defaultFlexShrink = 1;\n        var defaultFlexBasis = 0;\n        var flex = function flex2(tokenStream) {\n            var flexGrow;\n            var flexShrink;\n            var flexBasis;\n            if (tokenStream.matches(NONE)) {\n                tokenStream.expectEmpty();\n                return {\n                    flexGrow: 0,\n                    flexShrink: 0,\n                    flexBasis: \"auto\"\n                };\n            }\n            tokenStream.saveRewindPoint();\n            if (tokenStream.matches(AUTO) && !tokenStream.hasTokens()) {\n                return {\n                    flexGrow: 1,\n                    flexShrink: 1,\n                    flexBasis: \"auto\"\n                };\n            }\n            tokenStream.rewind();\n            var partsParsed = 0;\n            while(partsParsed < 2 && tokenStream.hasTokens()){\n                if (partsParsed !== 0) tokenStream.expect(SPACE);\n                if (flexGrow === void 0 && tokenStream.matches(NUMBER)) {\n                    flexGrow = tokenStream.lastValue;\n                    tokenStream.saveRewindPoint();\n                    if (tokenStream.matches(SPACE) && tokenStream.matches(NUMBER)) {\n                        flexShrink = tokenStream.lastValue;\n                    } else {\n                        tokenStream.rewind();\n                    }\n                } else if (flexBasis === void 0 && tokenStream.matches(LENGTH, UNSUPPORTED_LENGTH_UNIT, PERCENT)) {\n                    flexBasis = tokenStream.lastValue;\n                } else if (flexBasis === void 0 && tokenStream.matches(AUTO)) {\n                    flexBasis = \"auto\";\n                } else {\n                    tokenStream[\"throw\"]();\n                }\n                partsParsed += 1;\n            }\n            tokenStream.expectEmpty();\n            if (flexGrow === void 0) flexGrow = defaultFlexGrow;\n            if (flexShrink === void 0) flexShrink = defaultFlexShrink;\n            if (flexBasis === void 0) flexBasis = defaultFlexBasis;\n            return {\n                flexGrow,\n                flexShrink,\n                flexBasis\n            };\n        };\n        var FLEX_WRAP = regExpToken(/(nowrap|wrap|wrap-reverse)/);\n        var FLEX_DIRECTION = regExpToken(/(row|row-reverse|column|column-reverse)/);\n        var defaultFlexWrap = \"nowrap\";\n        var defaultFlexDirection = \"row\";\n        var flexFlow = function flexFlow2(tokenStream) {\n            var flexWrap;\n            var flexDirection;\n            var partsParsed = 0;\n            while(partsParsed < 2 && tokenStream.hasTokens()){\n                if (partsParsed !== 0) tokenStream.expect(SPACE);\n                if (flexWrap === void 0 && tokenStream.matches(FLEX_WRAP)) {\n                    flexWrap = tokenStream.lastValue;\n                } else if (flexDirection === void 0 && tokenStream.matches(FLEX_DIRECTION)) {\n                    flexDirection = tokenStream.lastValue;\n                } else {\n                    tokenStream[\"throw\"]();\n                }\n                partsParsed += 1;\n            }\n            tokenStream.expectEmpty();\n            if (flexWrap === void 0) flexWrap = defaultFlexWrap;\n            if (flexDirection === void 0) flexDirection = defaultFlexDirection;\n            return {\n                flexWrap,\n                flexDirection\n            };\n        };\n        var fontFamily = function fontFamily2(tokenStream) {\n            var fontFamily3;\n            if (tokenStream.matches(STRING)) {\n                fontFamily3 = tokenStream.lastValue;\n            } else {\n                fontFamily3 = tokenStream.expect(IDENT);\n                while(tokenStream.hasTokens()){\n                    tokenStream.expect(SPACE);\n                    var nextIdent = tokenStream.expect(IDENT);\n                    fontFamily3 += \" \" + nextIdent;\n                }\n            }\n            tokenStream.expectEmpty();\n            return {\n                fontFamily: fontFamily3\n            };\n        };\n        var NORMAL = regExpToken(/^(normal)$/);\n        var STYLE = regExpToken(/^(italic)$/);\n        var WEIGHT = regExpToken(/^([1-9]00|bold)$/);\n        var VARIANT = regExpToken(/^(small-caps)$/);\n        var defaultFontStyle = \"normal\";\n        var defaultFontWeight = \"normal\";\n        var defaultFontVariant = [];\n        var font = function font2(tokenStream) {\n            var fontStyle;\n            var fontWeight2;\n            var fontVariant2;\n            var lineHeight;\n            var numStyleWeightVariantMatched = 0;\n            while(numStyleWeightVariantMatched < 3 && tokenStream.hasTokens()){\n                if (tokenStream.matches(NORMAL)) ;\n                else if (fontStyle === void 0 && tokenStream.matches(STYLE)) {\n                    fontStyle = tokenStream.lastValue;\n                } else if (fontWeight2 === void 0 && tokenStream.matches(WEIGHT)) {\n                    fontWeight2 = tokenStream.lastValue;\n                } else if (fontVariant2 === void 0 && tokenStream.matches(VARIANT)) {\n                    fontVariant2 = [\n                        tokenStream.lastValue\n                    ];\n                } else {\n                    break;\n                }\n                tokenStream.expect(SPACE);\n                numStyleWeightVariantMatched += 1;\n            }\n            var fontSize = tokenStream.expect(LENGTH, UNSUPPORTED_LENGTH_UNIT);\n            if (tokenStream.matches(SLASH)) {\n                lineHeight = tokenStream.expect(LENGTH, UNSUPPORTED_LENGTH_UNIT);\n            }\n            tokenStream.expect(SPACE);\n            var _fontFamily = fontFamily(tokenStream), fontFamily$1 = _fontFamily.fontFamily;\n            if (fontStyle === void 0) fontStyle = defaultFontStyle;\n            if (fontWeight2 === void 0) fontWeight2 = defaultFontWeight;\n            if (fontVariant2 === void 0) fontVariant2 = defaultFontVariant;\n            var out = {\n                fontStyle,\n                fontWeight: fontWeight2,\n                fontVariant: fontVariant2,\n                fontSize,\n                fontFamily: fontFamily$1\n            };\n            if (lineHeight !== void 0) out.lineHeight = lineHeight;\n            return out;\n        };\n        var ALIGN_CONTENT = regExpToken(/(flex-(?:start|end)|center|stretch|space-(?:between|around))/);\n        var JUSTIFY_CONTENT = regExpToken(/(flex-(?:start|end)|center|space-(?:between|around|evenly))/);\n        var placeContent = function placeContent2(tokenStream) {\n            var alignContent = tokenStream.expect(ALIGN_CONTENT);\n            var justifyContent;\n            if (tokenStream.hasTokens()) {\n                tokenStream.expect(SPACE);\n                justifyContent = tokenStream.expect(JUSTIFY_CONTENT);\n            } else {\n                justifyContent = \"stretch\";\n            }\n            tokenStream.expectEmpty();\n            return {\n                alignContent,\n                justifyContent\n            };\n        };\n        var STYLE$1 = regExpToken(/^(solid|double|dotted|dashed)$/);\n        var defaultTextDecorationLine = \"none\";\n        var defaultTextDecorationStyle = \"solid\";\n        var defaultTextDecorationColor = \"black\";\n        var textDecoration = function textDecoration2(tokenStream) {\n            var line;\n            var style;\n            var color;\n            var didParseFirst = false;\n            while(tokenStream.hasTokens()){\n                if (didParseFirst) tokenStream.expect(SPACE);\n                if (line === void 0 && tokenStream.matches(LINE)) {\n                    var lines = [\n                        tokenStream.lastValue.toLowerCase()\n                    ];\n                    tokenStream.saveRewindPoint();\n                    if (lines[0] !== \"none\" && tokenStream.matches(SPACE) && tokenStream.matches(LINE)) {\n                        lines.push(tokenStream.lastValue.toLowerCase());\n                        lines.sort().reverse();\n                    } else {\n                        tokenStream.rewind();\n                    }\n                    line = lines.join(\" \");\n                } else if (style === void 0 && tokenStream.matches(STYLE$1)) {\n                    style = tokenStream.lastValue;\n                } else if (color === void 0 && tokenStream.matches(COLOR)) {\n                    color = tokenStream.lastValue;\n                } else {\n                    tokenStream[\"throw\"]();\n                }\n                didParseFirst = true;\n            }\n            return {\n                textDecorationLine: line !== void 0 ? line : defaultTextDecorationLine,\n                textDecorationColor: color !== void 0 ? color : defaultTextDecorationColor,\n                textDecorationStyle: style !== void 0 ? style : defaultTextDecorationStyle\n            };\n        };\n        var textDecorationLine = function textDecorationLine2(tokenStream) {\n            var lines = [];\n            var didParseFirst = false;\n            while(tokenStream.hasTokens()){\n                if (didParseFirst) tokenStream.expect(SPACE);\n                lines.push(tokenStream.expect(LINE).toLowerCase());\n                didParseFirst = true;\n            }\n            lines.sort().reverse();\n            return {\n                textDecorationLine: lines.join(\" \")\n            };\n        };\n        var textShadow = function textShadow2(tokenStream) {\n            var _parseShadow2 = parseShadow(tokenStream), offset = _parseShadow2.offset, radius = _parseShadow2.radius, color = _parseShadow2.color;\n            return {\n                textShadowOffset: offset,\n                textShadowRadius: radius,\n                textShadowColor: color\n            };\n        };\n        var oneOfType = function oneOfType2(tokenType) {\n            return function(functionStream) {\n                var value = functionStream.expect(tokenType);\n                functionStream.expectEmpty();\n                return value;\n            };\n        };\n        var singleNumber = oneOfType(NUMBER);\n        var singleLength = oneOfType(LENGTH);\n        var singleAngle = oneOfType(ANGLE);\n        var xyTransformFactory = function xyTransformFactory2(tokenType) {\n            return function(key, valueIfOmitted) {\n                return function(functionStream) {\n                    var _ref3, _ref4;\n                    var x = functionStream.expect(tokenType);\n                    var y;\n                    if (functionStream.hasTokens()) {\n                        functionStream.expect(COMMA);\n                        y = functionStream.expect(tokenType);\n                    } else if (valueIfOmitted !== void 0) {\n                        y = valueIfOmitted;\n                    } else {\n                        return x;\n                    }\n                    functionStream.expectEmpty();\n                    return [\n                        (_ref3 = {}, _ref3[key + \"Y\"] = y, _ref3),\n                        (_ref4 = {}, _ref4[key + \"X\"] = x, _ref4)\n                    ];\n                };\n            };\n        };\n        var xyNumber = xyTransformFactory(NUMBER);\n        var xyLength = xyTransformFactory(LENGTH);\n        var xyAngle = xyTransformFactory(ANGLE);\n        var partTransforms = {\n            perspective: singleNumber,\n            scale: xyNumber(\"scale\"),\n            scaleX: singleNumber,\n            scaleY: singleNumber,\n            translate: xyLength(\"translate\", 0),\n            translateX: singleLength,\n            translateY: singleLength,\n            rotate: singleAngle,\n            rotateX: singleAngle,\n            rotateY: singleAngle,\n            rotateZ: singleAngle,\n            skewX: singleAngle,\n            skewY: singleAngle,\n            skew: xyAngle(\"skew\", \"0deg\")\n        };\n        var transform = function transform2(tokenStream) {\n            var transforms2 = [];\n            var didParseFirst = false;\n            while(tokenStream.hasTokens()){\n                if (didParseFirst) tokenStream.expect(SPACE);\n                var functionStream = tokenStream.expectFunction();\n                var functionName = functionStream.functionName;\n                var transformedValues = partTransforms[functionName](functionStream);\n                if (!Array.isArray(transformedValues)) {\n                    var _ref5;\n                    transformedValues = [\n                        (_ref5 = {}, _ref5[functionName] = transformedValues, _ref5)\n                    ];\n                }\n                transforms2 = transformedValues.concat(transforms2);\n                didParseFirst = true;\n            }\n            return {\n                transform: transforms2\n            };\n        };\n        var background = function background2(tokenStream) {\n            return {\n                backgroundColor: tokenStream.expect(COLOR)\n            };\n        };\n        var borderColor = directionFactory({\n            types: [\n                COLOR\n            ],\n            prefix: \"border\",\n            suffix: \"Color\"\n        });\n        var borderRadius = directionFactory({\n            directions: [\n                \"TopLeft\",\n                \"TopRight\",\n                \"BottomRight\",\n                \"BottomLeft\"\n            ],\n            prefix: \"border\",\n            suffix: \"Radius\"\n        });\n        var borderWidth = directionFactory({\n            prefix: \"border\",\n            suffix: \"Width\"\n        });\n        var margin = directionFactory({\n            types: [\n                LENGTH,\n                UNSUPPORTED_LENGTH_UNIT,\n                PERCENT,\n                AUTO\n            ],\n            prefix: \"margin\"\n        });\n        var padding = directionFactory({\n            prefix: \"padding\"\n        });\n        var fontVariant = function fontVariant2(tokenStream) {\n            return {\n                fontVariant: [\n                    tokenStream.expect(IDENT)\n                ]\n            };\n        };\n        var fontWeight = function fontWeight2(tokenStream) {\n            return {\n                fontWeight: tokenStream.expect(WORD)\n            };\n        };\n        var shadowOffset = function shadowOffset2(tokenStream) {\n            return {\n                shadowOffset: parseShadowOffset(tokenStream)\n            };\n        };\n        var textShadowOffset = function textShadowOffset2(tokenStream) {\n            return {\n                textShadowOffset: parseShadowOffset(tokenStream)\n            };\n        };\n        var transforms = {\n            background,\n            border,\n            borderColor,\n            borderRadius,\n            borderWidth,\n            boxShadow,\n            flex,\n            flexFlow,\n            font,\n            fontFamily,\n            fontVariant,\n            fontWeight,\n            margin,\n            padding,\n            placeContent,\n            shadowOffset,\n            textShadow,\n            textShadowOffset,\n            textDecoration,\n            textDecorationLine,\n            transform\n        };\n        var propertiesWithoutUnits;\n        if (true) {\n            propertiesWithoutUnits = [\n                \"aspectRatio\",\n                \"elevation\",\n                \"flexGrow\",\n                \"flexShrink\",\n                \"opacity\",\n                \"shadowOpacity\",\n                \"zIndex\"\n            ];\n        }\n        var devPropertiesWithUnitsRegExp = propertiesWithoutUnits != null ? new RegExp(propertiesWithoutUnits.join(\"|\")) : null;\n        var SYMBOL_MATCH = \"SYMBOL_MATCH\";\n        var TokenStream = /* @__PURE__ */ function() {\n            function TokenStream2(nodes, parent) {\n                this.index = 0;\n                this.nodes = nodes;\n                this.functionName = parent != null ? parent.value : null;\n                this.lastValue = null;\n                this.rewindIndex = -1;\n            }\n            var _proto = TokenStream2.prototype;\n            _proto.hasTokens = function hasTokens() {\n                return this.index <= this.nodes.length - 1;\n            };\n            _proto[SYMBOL_MATCH] = function() {\n                if (!this.hasTokens()) return null;\n                var node = this.nodes[this.index];\n                for(var i = 0; i < arguments.length; i += 1){\n                    var tokenDescriptor = i < 0 || arguments.length <= i ? void 0 : arguments[i];\n                    var value = tokenDescriptor(node);\n                    if (value !== null) {\n                        this.index += 1;\n                        this.lastValue = value;\n                        return value;\n                    }\n                }\n                return null;\n            };\n            _proto.matches = function matches() {\n                return this[SYMBOL_MATCH].apply(this, arguments) !== null;\n            };\n            _proto.expect = function expect() {\n                var value = this[SYMBOL_MATCH].apply(this, arguments);\n                return value !== null ? value : this[\"throw\"]();\n            };\n            _proto.matchesFunction = function matchesFunction() {\n                var node = this.nodes[this.index];\n                if (node.type !== \"function\") return null;\n                var value = new TokenStream2(node.nodes, node);\n                this.index += 1;\n                this.lastValue = null;\n                return value;\n            };\n            _proto.expectFunction = function expectFunction() {\n                var value = this.matchesFunction();\n                return value !== null ? value : this[\"throw\"]();\n            };\n            _proto.expectEmpty = function expectEmpty() {\n                if (this.hasTokens()) this[\"throw\"]();\n            };\n            _proto[\"throw\"] = function _throw() {\n                throw new Error(\"Unexpected token type: \" + this.nodes[this.index].type);\n            };\n            _proto.saveRewindPoint = function saveRewindPoint() {\n                this.rewindIndex = this.index;\n            };\n            _proto.rewind = function rewind() {\n                if (this.rewindIndex === -1) throw new Error(\"Internal error\");\n                this.index = this.rewindIndex;\n                this.lastValue = null;\n            };\n            return TokenStream2;\n        }();\n        var numberOrLengthRe = /^([+-]?(?:\\d*\\.)?\\d+(?:e[+-]?\\d+)?)(?:px)?$/i;\n        var numberOnlyRe = /^[+-]?(?:\\d*\\.\\d*|[1-9]\\d*)(?:e[+-]?\\d+)?$/i;\n        var boolRe = /^true|false$/i;\n        var nullRe = /^null$/i;\n        var undefinedRe = /^undefined$/i;\n        var transformRawValue = function transformRawValue2(propName, value) {\n            if (true) {\n                var needsUnit = !devPropertiesWithUnitsRegExp.test(propName);\n                var isNumberWithoutUnit = numberOnlyRe.test(value);\n                if (needsUnit && isNumberWithoutUnit) {\n                    console.warn('Expected style \"' + propName + \": \" + value + '\" to contain units');\n                }\n                if (!needsUnit && value !== \"0\" && !isNumberWithoutUnit) {\n                    console.warn('Expected style \"' + propName + \": \" + value + '\" to be unitless');\n                }\n            }\n            var numberMatch = value.match(numberOrLengthRe);\n            if (numberMatch !== null) return Number(numberMatch[1]);\n            var boolMatch = value.match(boolRe);\n            if (boolMatch !== null) return boolMatch[0].toLowerCase() === \"true\";\n            var nullMatch = value.match(nullRe);\n            if (nullMatch !== null) return null;\n            var undefinedMatch = value.match(undefinedRe);\n            if (undefinedMatch !== null) return void 0;\n            return value;\n        };\n        var baseTransformShorthandValue = function baseTransformShorthandValue2(propName, value) {\n            var ast = parse__default(value);\n            var tokenStream = new TokenStream(ast.nodes);\n            return transforms[propName](tokenStream);\n        };\n        var transformShorthandValue =  false ? 0 : function(propName, value) {\n            try {\n                return baseTransformShorthandValue(propName, value);\n            } catch (e) {\n                throw new Error('Failed to parse declaration \"' + propName + \": \" + value + '\"');\n            }\n        };\n        var getStylesForProperty = function getStylesForProperty2(propName, inputValue, allowShorthand) {\n            var _ref6;\n            var isRawValue = allowShorthand === false || !(propName in transforms);\n            var value = inputValue.trim();\n            var propValues = isRawValue ? (_ref6 = {}, _ref6[propName] = transformRawValue(propName, value), _ref6) : transformShorthandValue(propName, value);\n            return propValues;\n        };\n        var getPropertyName = function getPropertyName2(propName) {\n            var isCustomProp = /^--\\w+/.test(propName);\n            if (isCustomProp) {\n                return propName;\n            }\n            return camelizeStyleName(propName);\n        };\n        var index = function index2(rules, shorthandBlacklist) {\n            if (shorthandBlacklist === void 0) {\n                shorthandBlacklist = [];\n            }\n            return rules.reduce(function(accum, rule) {\n                var propertyName = getPropertyName(rule[0]);\n                var value = rule[1];\n                var allowShorthand = shorthandBlacklist.indexOf(propertyName) === -1;\n                return Object.assign(accum, getStylesForProperty(propertyName, value, allowShorthand));\n            }, {});\n        };\n        exports2[\"default\"] = index;\n        exports2.getPropertyName = getPropertyName;\n        exports2.getStylesForProperty = getStylesForProperty;\n        exports2.transformRawValue = transformRawValue;\n    }\n});\n// node_modules/.pnpm/css-background-parser@0.1.0/node_modules/css-background-parser/index.js\nvar require_css_background_parser = __commonJS({\n    \"node_modules/.pnpm/css-background-parser@0.1.0/node_modules/css-background-parser/index.js\" (exports2, module) {\n        (function(exports3) {\n            function BackgroundList(backgrounds) {\n                if (!(this instanceof BackgroundList)) {\n                    return new BackgroundList();\n                }\n                this.backgrounds = backgrounds || [];\n            }\n            BackgroundList.prototype.toString = function() {\n                return this.backgrounds.join(\", \");\n            };\n            function Background(props) {\n                if (!(this instanceof Background)) {\n                    return new Background(props);\n                }\n                props = props || {};\n                var bg = this;\n                function defprop(name, defaultValue) {\n                    bg[name] = name in props ? props[name] : defaultValue;\n                }\n                defprop(\"color\", \"\");\n                defprop(\"image\", \"none\");\n                defprop(\"attachment\", \"scroll\");\n                defprop(\"clip\", \"border-box\");\n                defprop(\"origin\", \"padding-box\");\n                defprop(\"position\", \"0% 0%\");\n                defprop(\"repeat\", \"repeat\");\n                defprop(\"size\", \"auto\");\n            }\n            Background.prototype.toString = function() {\n                var list = [\n                    this.image,\n                    this.repeat,\n                    this.attachment,\n                    this.position + \" / \" + this.size,\n                    this.origin,\n                    this.clip\n                ];\n                if (this.color) {\n                    list.unshift(this.color);\n                }\n                return list.join(\" \");\n            };\n            exports3.BackgroundList = BackgroundList;\n            exports3.Background = Background;\n            function parseImages(cssText) {\n                var images = [];\n                var tokens = /[,\\(\\)]/;\n                var parens = 0;\n                var buffer = \"\";\n                if (cssText == null) {\n                    return images;\n                }\n                while(cssText.length){\n                    var match = tokens.exec(cssText);\n                    if (!match) {\n                        break;\n                    }\n                    var char = match[0];\n                    var ignoreChar = false;\n                    switch(char){\n                        case \",\":\n                            if (!parens) {\n                                images.push(buffer.trim());\n                                buffer = \"\";\n                                ignoreChar = true;\n                            }\n                            break;\n                        case \"(\":\n                            parens++;\n                            break;\n                        case \")\":\n                            parens--;\n                            break;\n                    }\n                    var index = match.index + 1;\n                    buffer += cssText.slice(0, ignoreChar ? index - 1 : index);\n                    cssText = cssText.slice(index);\n                }\n                if (buffer.length || cssText.length) {\n                    images.push((buffer + cssText).trim());\n                }\n                return images;\n            }\n            function trim(str) {\n                return str.trim();\n            }\n            function parseSimpleList(cssText) {\n                return (cssText || \"\").split(\",\").map(trim);\n            }\n            exports3.parseElementStyle = function(styleObject) {\n                var list = new BackgroundList();\n                if (styleObject == null) {\n                    return list;\n                }\n                var bgImage = parseImages(styleObject.backgroundImage);\n                var bgColor = styleObject.backgroundColor;\n                var bgAttachment = parseSimpleList(styleObject.backgroundAttachment);\n                var bgClip = parseSimpleList(styleObject.backgroundClip);\n                var bgOrigin = parseSimpleList(styleObject.backgroundOrigin);\n                var bgPosition = parseSimpleList(styleObject.backgroundPosition);\n                var bgRepeat = parseSimpleList(styleObject.backgroundRepeat);\n                var bgSize = parseSimpleList(styleObject.backgroundSize);\n                var background;\n                for(var i = 0, ii = bgImage.length; i < ii; i++){\n                    background = new Background({\n                        image: bgImage[i],\n                        attachment: bgAttachment[i % bgAttachment.length],\n                        clip: bgClip[i % bgClip.length],\n                        origin: bgOrigin[i % bgOrigin.length],\n                        position: bgPosition[i % bgPosition.length],\n                        repeat: bgRepeat[i % bgRepeat.length],\n                        size: bgSize[i % bgSize.length]\n                    });\n                    if (i === ii - 1) {\n                        background.color = bgColor;\n                    }\n                    list.backgrounds.push(background);\n                }\n                return list;\n            };\n        })(function(root) {\n            if (typeof module !== \"undefined\" && module.exports !== void 0) return module.exports;\n            return root.cssBgParser = {};\n        }(exports2));\n    }\n});\n// node_modules/.pnpm/css-box-shadow@1.0.0-3/node_modules/css-box-shadow/index.js\nvar require_css_box_shadow = __commonJS({\n    \"node_modules/.pnpm/css-box-shadow@1.0.0-3/node_modules/css-box-shadow/index.js\" (exports2, module) {\n        var VALUES_REG = /,(?![^\\(]*\\))/;\n        var PARTS_REG = /\\s(?![^(]*\\))/;\n        var LENGTH_REG = /^[0-9]+[a-zA-Z%]+?$/;\n        var parseValue = (str)=>{\n            const parts = str.split(PARTS_REG);\n            const inset = parts.includes(\"inset\");\n            const last = parts.slice(-1)[0];\n            const color = !isLength(last) ? last : void 0;\n            const nums = parts.filter((n)=>n !== \"inset\").filter((n)=>n !== color).map(toNum);\n            const [offsetX, offsetY, blurRadius, spreadRadius] = nums;\n            return {\n                inset,\n                offsetX,\n                offsetY,\n                blurRadius,\n                spreadRadius,\n                color\n            };\n        };\n        var stringifyValue = (obj)=>{\n            const { inset, offsetX = 0, offsetY = 0, blurRadius = 0, spreadRadius, color } = obj || {};\n            return [\n                inset ? \"inset\" : null,\n                offsetX,\n                offsetY,\n                blurRadius,\n                spreadRadius,\n                color\n            ].filter((v)=>v !== null && v !== void 0).map(toPx).map((s)=>(\"\" + s).trim()).join(\" \");\n        };\n        var isLength = (v)=>v === \"0\" || LENGTH_REG.test(v);\n        var toNum = (v)=>{\n            if (!/px$/.test(v) && v !== \"0\") return v;\n            const n = parseFloat(v);\n            return !isNaN(n) ? n : v;\n        };\n        var toPx = (n)=>typeof n === \"number\" && n !== 0 ? n + \"px\" : n;\n        var parse2 = (str)=>str.split(VALUES_REG).map((s)=>s.trim()).map(parseValue);\n        var stringify = (arr)=>arr.map(stringifyValue).join(\", \");\n        module.exports = {\n            parse: parse2,\n            stringify\n        };\n    }\n});\n// node_modules/.pnpm/color-name@1.1.4/node_modules/color-name/index.js\nvar require_color_name = __commonJS({\n    \"node_modules/.pnpm/color-name@1.1.4/node_modules/color-name/index.js\" (exports2, module) {\n        \"use strict\";\n        module.exports = {\n            \"aliceblue\": [\n                240,\n                248,\n                255\n            ],\n            \"antiquewhite\": [\n                250,\n                235,\n                215\n            ],\n            \"aqua\": [\n                0,\n                255,\n                255\n            ],\n            \"aquamarine\": [\n                127,\n                255,\n                212\n            ],\n            \"azure\": [\n                240,\n                255,\n                255\n            ],\n            \"beige\": [\n                245,\n                245,\n                220\n            ],\n            \"bisque\": [\n                255,\n                228,\n                196\n            ],\n            \"black\": [\n                0,\n                0,\n                0\n            ],\n            \"blanchedalmond\": [\n                255,\n                235,\n                205\n            ],\n            \"blue\": [\n                0,\n                0,\n                255\n            ],\n            \"blueviolet\": [\n                138,\n                43,\n                226\n            ],\n            \"brown\": [\n                165,\n                42,\n                42\n            ],\n            \"burlywood\": [\n                222,\n                184,\n                135\n            ],\n            \"cadetblue\": [\n                95,\n                158,\n                160\n            ],\n            \"chartreuse\": [\n                127,\n                255,\n                0\n            ],\n            \"chocolate\": [\n                210,\n                105,\n                30\n            ],\n            \"coral\": [\n                255,\n                127,\n                80\n            ],\n            \"cornflowerblue\": [\n                100,\n                149,\n                237\n            ],\n            \"cornsilk\": [\n                255,\n                248,\n                220\n            ],\n            \"crimson\": [\n                220,\n                20,\n                60\n            ],\n            \"cyan\": [\n                0,\n                255,\n                255\n            ],\n            \"darkblue\": [\n                0,\n                0,\n                139\n            ],\n            \"darkcyan\": [\n                0,\n                139,\n                139\n            ],\n            \"darkgoldenrod\": [\n                184,\n                134,\n                11\n            ],\n            \"darkgray\": [\n                169,\n                169,\n                169\n            ],\n            \"darkgreen\": [\n                0,\n                100,\n                0\n            ],\n            \"darkgrey\": [\n                169,\n                169,\n                169\n            ],\n            \"darkkhaki\": [\n                189,\n                183,\n                107\n            ],\n            \"darkmagenta\": [\n                139,\n                0,\n                139\n            ],\n            \"darkolivegreen\": [\n                85,\n                107,\n                47\n            ],\n            \"darkorange\": [\n                255,\n                140,\n                0\n            ],\n            \"darkorchid\": [\n                153,\n                50,\n                204\n            ],\n            \"darkred\": [\n                139,\n                0,\n                0\n            ],\n            \"darksalmon\": [\n                233,\n                150,\n                122\n            ],\n            \"darkseagreen\": [\n                143,\n                188,\n                143\n            ],\n            \"darkslateblue\": [\n                72,\n                61,\n                139\n            ],\n            \"darkslategray\": [\n                47,\n                79,\n                79\n            ],\n            \"darkslategrey\": [\n                47,\n                79,\n                79\n            ],\n            \"darkturquoise\": [\n                0,\n                206,\n                209\n            ],\n            \"darkviolet\": [\n                148,\n                0,\n                211\n            ],\n            \"deeppink\": [\n                255,\n                20,\n                147\n            ],\n            \"deepskyblue\": [\n                0,\n                191,\n                255\n            ],\n            \"dimgray\": [\n                105,\n                105,\n                105\n            ],\n            \"dimgrey\": [\n                105,\n                105,\n                105\n            ],\n            \"dodgerblue\": [\n                30,\n                144,\n                255\n            ],\n            \"firebrick\": [\n                178,\n                34,\n                34\n            ],\n            \"floralwhite\": [\n                255,\n                250,\n                240\n            ],\n            \"forestgreen\": [\n                34,\n                139,\n                34\n            ],\n            \"fuchsia\": [\n                255,\n                0,\n                255\n            ],\n            \"gainsboro\": [\n                220,\n                220,\n                220\n            ],\n            \"ghostwhite\": [\n                248,\n                248,\n                255\n            ],\n            \"gold\": [\n                255,\n                215,\n                0\n            ],\n            \"goldenrod\": [\n                218,\n                165,\n                32\n            ],\n            \"gray\": [\n                128,\n                128,\n                128\n            ],\n            \"green\": [\n                0,\n                128,\n                0\n            ],\n            \"greenyellow\": [\n                173,\n                255,\n                47\n            ],\n            \"grey\": [\n                128,\n                128,\n                128\n            ],\n            \"honeydew\": [\n                240,\n                255,\n                240\n            ],\n            \"hotpink\": [\n                255,\n                105,\n                180\n            ],\n            \"indianred\": [\n                205,\n                92,\n                92\n            ],\n            \"indigo\": [\n                75,\n                0,\n                130\n            ],\n            \"ivory\": [\n                255,\n                255,\n                240\n            ],\n            \"khaki\": [\n                240,\n                230,\n                140\n            ],\n            \"lavender\": [\n                230,\n                230,\n                250\n            ],\n            \"lavenderblush\": [\n                255,\n                240,\n                245\n            ],\n            \"lawngreen\": [\n                124,\n                252,\n                0\n            ],\n            \"lemonchiffon\": [\n                255,\n                250,\n                205\n            ],\n            \"lightblue\": [\n                173,\n                216,\n                230\n            ],\n            \"lightcoral\": [\n                240,\n                128,\n                128\n            ],\n            \"lightcyan\": [\n                224,\n                255,\n                255\n            ],\n            \"lightgoldenrodyellow\": [\n                250,\n                250,\n                210\n            ],\n            \"lightgray\": [\n                211,\n                211,\n                211\n            ],\n            \"lightgreen\": [\n                144,\n                238,\n                144\n            ],\n            \"lightgrey\": [\n                211,\n                211,\n                211\n            ],\n            \"lightpink\": [\n                255,\n                182,\n                193\n            ],\n            \"lightsalmon\": [\n                255,\n                160,\n                122\n            ],\n            \"lightseagreen\": [\n                32,\n                178,\n                170\n            ],\n            \"lightskyblue\": [\n                135,\n                206,\n                250\n            ],\n            \"lightslategray\": [\n                119,\n                136,\n                153\n            ],\n            \"lightslategrey\": [\n                119,\n                136,\n                153\n            ],\n            \"lightsteelblue\": [\n                176,\n                196,\n                222\n            ],\n            \"lightyellow\": [\n                255,\n                255,\n                224\n            ],\n            \"lime\": [\n                0,\n                255,\n                0\n            ],\n            \"limegreen\": [\n                50,\n                205,\n                50\n            ],\n            \"linen\": [\n                250,\n                240,\n                230\n            ],\n            \"magenta\": [\n                255,\n                0,\n                255\n            ],\n            \"maroon\": [\n                128,\n                0,\n                0\n            ],\n            \"mediumaquamarine\": [\n                102,\n                205,\n                170\n            ],\n            \"mediumblue\": [\n                0,\n                0,\n                205\n            ],\n            \"mediumorchid\": [\n                186,\n                85,\n                211\n            ],\n            \"mediumpurple\": [\n                147,\n                112,\n                219\n            ],\n            \"mediumseagreen\": [\n                60,\n                179,\n                113\n            ],\n            \"mediumslateblue\": [\n                123,\n                104,\n                238\n            ],\n            \"mediumspringgreen\": [\n                0,\n                250,\n                154\n            ],\n            \"mediumturquoise\": [\n                72,\n                209,\n                204\n            ],\n            \"mediumvioletred\": [\n                199,\n                21,\n                133\n            ],\n            \"midnightblue\": [\n                25,\n                25,\n                112\n            ],\n            \"mintcream\": [\n                245,\n                255,\n                250\n            ],\n            \"mistyrose\": [\n                255,\n                228,\n                225\n            ],\n            \"moccasin\": [\n                255,\n                228,\n                181\n            ],\n            \"navajowhite\": [\n                255,\n                222,\n                173\n            ],\n            \"navy\": [\n                0,\n                0,\n                128\n            ],\n            \"oldlace\": [\n                253,\n                245,\n                230\n            ],\n            \"olive\": [\n                128,\n                128,\n                0\n            ],\n            \"olivedrab\": [\n                107,\n                142,\n                35\n            ],\n            \"orange\": [\n                255,\n                165,\n                0\n            ],\n            \"orangered\": [\n                255,\n                69,\n                0\n            ],\n            \"orchid\": [\n                218,\n                112,\n                214\n            ],\n            \"palegoldenrod\": [\n                238,\n                232,\n                170\n            ],\n            \"palegreen\": [\n                152,\n                251,\n                152\n            ],\n            \"paleturquoise\": [\n                175,\n                238,\n                238\n            ],\n            \"palevioletred\": [\n                219,\n                112,\n                147\n            ],\n            \"papayawhip\": [\n                255,\n                239,\n                213\n            ],\n            \"peachpuff\": [\n                255,\n                218,\n                185\n            ],\n            \"peru\": [\n                205,\n                133,\n                63\n            ],\n            \"pink\": [\n                255,\n                192,\n                203\n            ],\n            \"plum\": [\n                221,\n                160,\n                221\n            ],\n            \"powderblue\": [\n                176,\n                224,\n                230\n            ],\n            \"purple\": [\n                128,\n                0,\n                128\n            ],\n            \"rebeccapurple\": [\n                102,\n                51,\n                153\n            ],\n            \"red\": [\n                255,\n                0,\n                0\n            ],\n            \"rosybrown\": [\n                188,\n                143,\n                143\n            ],\n            \"royalblue\": [\n                65,\n                105,\n                225\n            ],\n            \"saddlebrown\": [\n                139,\n                69,\n                19\n            ],\n            \"salmon\": [\n                250,\n                128,\n                114\n            ],\n            \"sandybrown\": [\n                244,\n                164,\n                96\n            ],\n            \"seagreen\": [\n                46,\n                139,\n                87\n            ],\n            \"seashell\": [\n                255,\n                245,\n                238\n            ],\n            \"sienna\": [\n                160,\n                82,\n                45\n            ],\n            \"silver\": [\n                192,\n                192,\n                192\n            ],\n            \"skyblue\": [\n                135,\n                206,\n                235\n            ],\n            \"slateblue\": [\n                106,\n                90,\n                205\n            ],\n            \"slategray\": [\n                112,\n                128,\n                144\n            ],\n            \"slategrey\": [\n                112,\n                128,\n                144\n            ],\n            \"snow\": [\n                255,\n                250,\n                250\n            ],\n            \"springgreen\": [\n                0,\n                255,\n                127\n            ],\n            \"steelblue\": [\n                70,\n                130,\n                180\n            ],\n            \"tan\": [\n                210,\n                180,\n                140\n            ],\n            \"teal\": [\n                0,\n                128,\n                128\n            ],\n            \"thistle\": [\n                216,\n                191,\n                216\n            ],\n            \"tomato\": [\n                255,\n                99,\n                71\n            ],\n            \"turquoise\": [\n                64,\n                224,\n                208\n            ],\n            \"violet\": [\n                238,\n                130,\n                238\n            ],\n            \"wheat\": [\n                245,\n                222,\n                179\n            ],\n            \"white\": [\n                255,\n                255,\n                255\n            ],\n            \"whitesmoke\": [\n                245,\n                245,\n                245\n            ],\n            \"yellow\": [\n                255,\n                255,\n                0\n            ],\n            \"yellowgreen\": [\n                154,\n                205,\n                50\n            ]\n        };\n    }\n});\n// node_modules/.pnpm/hex-rgb@4.3.0/node_modules/hex-rgb/index.js\nvar require_hex_rgb = __commonJS({\n    \"node_modules/.pnpm/hex-rgb@4.3.0/node_modules/hex-rgb/index.js\" (exports2, module) {\n        \"use strict\";\n        var hexCharacters = \"a-f\\\\d\";\n        var match3or4Hex = `#?[${hexCharacters}]{3}[${hexCharacters}]?`;\n        var match6or8Hex = `#?[${hexCharacters}]{6}([${hexCharacters}]{2})?`;\n        var nonHexChars = new RegExp(`[^#${hexCharacters}]`, \"gi\");\n        var validHexSize = new RegExp(`^${match3or4Hex}$|^${match6or8Hex}$`, \"i\");\n        module.exports = (hex, options = {})=>{\n            if (typeof hex !== \"string\" || nonHexChars.test(hex) || !validHexSize.test(hex)) {\n                throw new TypeError(\"Expected a valid hex string\");\n            }\n            hex = hex.replace(/^#/, \"\");\n            let alphaFromHex = 1;\n            if (hex.length === 8) {\n                alphaFromHex = Number.parseInt(hex.slice(6, 8), 16) / 255;\n                hex = hex.slice(0, 6);\n            }\n            if (hex.length === 4) {\n                alphaFromHex = Number.parseInt(hex.slice(3, 4).repeat(2), 16) / 255;\n                hex = hex.slice(0, 3);\n            }\n            if (hex.length === 3) {\n                hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n            }\n            const number2 = Number.parseInt(hex, 16);\n            const red = number2 >> 16;\n            const green = number2 >> 8 & 255;\n            const blue = number2 & 255;\n            const alpha = typeof options.alpha === \"number\" ? options.alpha : alphaFromHex;\n            if (options.format === \"array\") {\n                return [\n                    red,\n                    green,\n                    blue,\n                    alpha\n                ];\n            }\n            if (options.format === \"css\") {\n                const alphaString = alpha === 1 ? \"\" : ` / ${Number((alpha * 100).toFixed(2))}%`;\n                return `rgb(${red} ${green} ${blue}${alphaString})`;\n            }\n            return {\n                red,\n                green,\n                blue,\n                alpha\n            };\n        };\n    }\n});\n// node_modules/.pnpm/escape-html@1.0.3/node_modules/escape-html/index.js\nvar require_escape_html = __commonJS({\n    \"node_modules/.pnpm/escape-html@1.0.3/node_modules/escape-html/index.js\" (exports2, module) {\n        \"use strict\";\n        var matchHtmlRegExp = /[\"'&<>]/;\n        module.exports = escapeHtml;\n        function escapeHtml(string) {\n            var str = \"\" + string;\n            var match = matchHtmlRegExp.exec(str);\n            if (!match) {\n                return str;\n            }\n            var escape;\n            var html = \"\";\n            var index = 0;\n            var lastIndex = 0;\n            for(index = match.index; index < str.length; index++){\n                switch(str.charCodeAt(index)){\n                    case 34:\n                        escape = \"&quot;\";\n                        break;\n                    case 38:\n                        escape = \"&amp;\";\n                        break;\n                    case 39:\n                        escape = \"&#39;\";\n                        break;\n                    case 60:\n                        escape = \"&lt;\";\n                        break;\n                    case 62:\n                        escape = \"&gt;\";\n                        break;\n                    default:\n                        continue;\n                }\n                if (lastIndex !== index) {\n                    html += str.substring(lastIndex, index);\n                }\n                lastIndex = index + 1;\n                html += escape;\n            }\n            return lastIndex !== index ? html + str.substring(lastIndex, index) : html;\n        }\n    }\n});\n// node_modules/.pnpm/linebreak@1.1.0/node_modules/linebreak/dist/module.mjs\nvar import_unicode_trie = __toESM(require_unicode_trie(), 1);\nvar import_base64_js = __toESM(require_b64(), 1);\nvar $557adaaeb0c7885f$exports = {};\nvar $1627905f8be2ef3f$export$fb4028874a74450 = 5;\nvar $1627905f8be2ef3f$export$1bb1140fe1358b00 = 12;\nvar $1627905f8be2ef3f$export$f3e416a182673355 = 13;\nvar $1627905f8be2ef3f$export$24aa617c849a894a = 16;\nvar $1627905f8be2ef3f$export$a73c4d14459b698d = 17;\nvar $1627905f8be2ef3f$export$9e5d732f3676a9ba = 22;\nvar $1627905f8be2ef3f$export$1dff41d5c0caca01 = 28;\nvar $1627905f8be2ef3f$export$30a74a373318dec6 = 31;\nvar $1627905f8be2ef3f$export$d710c5f50fc7496a = 33;\nvar $1627905f8be2ef3f$export$66498d28055820a9 = 34;\nvar $1627905f8be2ef3f$export$eb6c6d0b7c8826f2 = 35;\nvar $1627905f8be2ef3f$export$de92be486109a1df = 36;\nvar $1627905f8be2ef3f$export$606cfc2a8896c91f = 37;\nvar $1627905f8be2ef3f$export$e51d3c675bb0140d = 38;\nvar $1627905f8be2ef3f$export$da51c6332ad11d7b = 39;\nvar $1627905f8be2ef3f$export$bea437c40441867d = 40;\nvar $1627905f8be2ef3f$export$c4c7eecbfed13dc9 = 41;\nvar $1627905f8be2ef3f$export$98e1f8a379849661 = 42;\nvar $32627af916ac1b00$export$98f50d781a474745 = 0;\nvar $32627af916ac1b00$export$12ee1f8f5315ca7e = 1;\nvar $32627af916ac1b00$export$e4965ce242860454 = 2;\nvar $32627af916ac1b00$export$8f14048969dcd45e = 3;\nvar $32627af916ac1b00$export$133eb141bf58aff4 = 4;\nvar $32627af916ac1b00$export$5bdb8ccbf5c57afc = [\n    [\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$8f14048969dcd45e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ]\n];\nvar $557adaaeb0c7885f$var$data = import_base64_js.default.toByteArray(\"AAgOAAAAAAAQ4QAAAQ0P8vDtnQuMXUUZx+eyu7d7797d9m5bHoWltKVUlsjLWE0VJNigQoMVqkStEoNQQUl5GIo1KKmogEgqkKbBRki72lYabZMGKoGAjQRtJJDaCCIRiiigREBQS3z+xzOTnZ3O+3HOhd5NfpkzZx7fN9988zivu2M9hGwB28F94DnwEngd/Asc1EtIs9c/bIPDwCxwLDgezHcodyo4w5C+CCwBS8FnwSXgCnA1uFbI93XwbXAbWAfWgx+CzWAb+An4KfgFeAzsYWWfYuFz4CXwGvgb+Dfo6yNkEEwGh4CZYB44FpwI3g1OY+kfBItZOo2fB84Hy8DF4HJwNbiWpV8PVoO1LH4n2NRXyN+KcAd4kNVP9XsY4aPgcfAbsBfs6SniL4K/sPjfEf6HlanXCRkCw2BGvUh/keWfXS/CY+pFXs7x9XHmM94LTmWIeU2cgbxnS/k/B3kf86jDhU8L9V2E40vAFWAlWFUfb++NOL4F3C7JX4/4GiE+hvgWsF0oS7mXldspnN+F493gyXrh9xTav0cg3EvzgVfBG6wsmVSEkxBOBgdPGpd7JI6PnqRvJ68/xlbHof53gPeA94OzwLngk+ACsAwsByvASrAK3MB0Ws3CtQjvBJvAVrADPMDSHkb4CNijaccTwvnf4fiPEs8Lxy+D18A/QU8/xjgYBjPAbDAKTgYLwOngTHAO+EQ/8wuEF4EvsPiVCFf2+9tsFStzA8LVHuXXBsi6QyqzUYiPMR/7Mc7dAx7oL8bzw/3u/Bw8Bp4Az4AXwCtgHzsmDXP5fiF9iiVvly5d0sHngar16NKlS5cuXbp06fLmYlqHXrcd3ph4P0THUY3iXh49novju4S0tzfs5d+JPKewfAsRntZb3K9ZhOMlrO6lCC8An28U9+OuovcPcPxlVu5rCL/VmHh/iHIrzn3fIPu7SN8Axmg+8AOwEWwCm7tp3bRuWjetm5Y8bSu4B9zbKO6ZVsnORrVU3f4uXTqZ2H3sLoyx3eDXjfDndE9qyj6L838CfwVvgFpzYnof4oNgOhgBc8Fos9DrZIQLmtXPP1MmF6wGj4H+KXoWguvADkXaPil+YpuQy8Am8Ey7ODdtmJDF4HowBp4De6HDTNjhfHAHeBr0DBBy0kDxfPbcgSIusgrcWhtnJ8vL+TPix7UIOQtcBq4C28Cr4KRBnANbwSuDE+s50JgyNNFuXbp06XIgsXjIvPafjvXozKY+fVFz/z0LT1uCtKVSWbrOLWPnztG8e0Xfy7ol8XtZJi7WtG+5od2UFXQ/A12vUeS7jp27yVKHjdsU9lXB869TyNvAzt0lpP2oWbwLdjiO78bx/Sz+EMJHwK9Y/LcIfw+eZ3F67/Hl5vh9xX80J+rwX8SvRDhpgL17iPAQMHNArfPrqHPewLheI+AERV6efwV418B4nOZ/H+IfYHV8GOF5LJ3eAz0fx8sM9S0fUNud39O9CulfGZhY5huI3wzWgNvBelbHZoTbNPVpfYjKQpkHwUNgl0LWblbnk0LbbDxr0OMFpL3iqWdu9nWYPlVAWkXY39LnGdCkDbeqv1YNbfcMQ3t9oe8lzm6NH9N1ZB6Ln4BwfkJZJk7RyFnYKt6b/JDQXx9p5X+eFdqOjzM9P9MB/lUlFzr20aXIdzlY4dmn9F3YqtvoO76/2hp/D/xA5Zue88nNyL8GbFbs075X0tyUig3Qd2MCnf//HjnzpbsR3g9+1kHzzVjdnE71/qVBX9rGPUh/ysNWe1neFzvIDi5zAufV1sT0N0poR22wkFUfTOPfA4N2mbZ5fSrqOHSw+IbkSBbOGSzSRgf91/GTUWYBOB2cIZQ/G8cfBZ8CFwrnL8XxF8FKcA24jqXdiPA7Qr61OF7H4mMItwzuv2/YLth1ISt3Hzu3k4W7EH5JqPdRHD/O4k+z8A8IX5Lq3y7Z4nXE9xn6kX6vQ4bKfy+ok+hH+xf3hq9dnTTHhjKd2GmDuWA242iHMq4cC7A8kJ7i8o1+skSa7Jieo38HCWnoNjKFhdSFBxzpZ7QE6lI8N4S14aASZcryaV/WWHw66f6NHuCoxuQxmvM56GX9QMd8Q4D65ywGP+ZzRJuM+zQvx/MOS2VFeqQ4IXnH26zM9Xe6/E6D+4foAzzuajPZp8Qyw5ayZVDWuH0z0BtYRkeIDqH9KO9VbH1btd/lhNqCzvl8zeLnG0S/hnU6baHfpiuO6yy0rd+DHURo/zYF5H26j03rQsip2ndzz82u1z9N4VjWKWeb68Tedpt95HRVXp7H1R6p+/Wt4FPy/PpWwscOLRJ+PVWF/+W0iVyGzs18TIvXkOJ1Wxm66vSXz+vylenrZcj1ub439W+K8RNCGTJi2p/TJ1K23VaXr35tRpnzmjxequgfcfyk6B/TGBVlyedsNgpdd/h+W1U3P99QyFPNo1X3TwpM/WLTIWYfoBqXrv6iskHZ/RFr79R6hIyHBrH3f1nrUVnjP8SnZZ+rYtzr9Exld5MNbPNErusAPg+77u/eDOPftU9yj39TH7rezxd1LvsZQJlzkWlOirG/79zjMj/mtHUKu7vKy+3/LnXr9okyKedjX5/0He9iP/j63LwOQdarEVlfy8OO/Lqw023j6xcqmwxLiOd6heM2i9cV9LJy8jMJ23yQ+rpbfu7EQ/pXE8KYvUSqvVnb4XzZa6LrHMXHR+zcLvqWbm/Bn0/HzIs6fWPHoat8XfnDKmZGxRxeMbn2UqZ5Q94nmcZRbqqUXbZ8+lcjE+cPX11t814orvvAXNcG8vqj2vvk1MGn3anlj0bIT72v47bvE+Lc98T9b6r7AKn6j+8Duf7D0nnZx/j7Zjn0j9nbpSTndaLr9WNLivP+iN23xF7L+fqv6ZouFyb78jxVXvv5jJ9YUs9/sddO8h7KNg5jrhfaJGztT6G7KF+1d6yCmD5Kdb2fan60rSc552fZr3zeQ9DpnPp+Si5cx5Ktv2QfSzF/mMbWdOm46rFI4XstnU9xeqX4NKb7TKEdcr6pZOK3ID1k/LvFHkVczEuZLEDr499YqvqBym1aEHWgcvoYOtv0M91qQl5TfpO/in6rWx8OVpT1Wedkv3f5xom3T/xeR/6Gx6V86PWAOB4bBpqWdN+yTcVxjIyGRz/FrDGu6w/3d7kPm8StX8RyPu+uuvpNju/vTLJV37GpvoM0oZPnW87VLnL/5pDno1NoW1R6yedU6TyUv3u19a3KFnIbTLYz+ZCLP4T0tU1uivFgso0pnsJ/UtXvarNY28Xq5cvkBDrQP/E5ZaiuQwwfmTlsOiQRU1fMuqrDd/3ISSuwjOwXOfTyGUMpZIXq4GpLn3pUcdfzch2x7XO1u2uZHOPb1G6b3Xg9PH1IIWeEpJlPQtqos2EKW8b0u8rnuP1UeVLoXJb9be0uG9nnbchjU+XTszT5VeNBThPHnc5OKj1U9aj0GTHIVaGy1YhEWT4ixns00DT+XEzWn/7VAsIc63Cov3OdyhwjrnaqQqZvWKXdypRdlq+k8msZ031U+Rm4fA+3TtyeR9hwfW9G9yxDN0fZMN33F+9TE6md4hwoxumfaUzI9fN3PFT3xVV2msrQ3UsnChm6Nulk8TndpS28D3zX9tTIPsF/z7Am5OkTjm1tI1JZW74+4VgsZ0N3L1yXV3WeP5uR7TGHHdvC3JQlxybfpd22tDlk/2eofRK8TzrN/qnar/K/OUTth6I/+jAnEptNbPvFHP2gs40N3+dfMWtwqvVct7/wfd8gtQ7imifial9ZJ9/3IHLYU6eDj3+4PhsNhX+vwvcWLnu6kGfEMe8DuciPfUfGZB8X/7HJy/Gefe5n+VRGFd/wyP2ta7/LO4yh/sbLV/k9lev6kfO9Dt/5U67b1/6u/epqB1U9Me23jfHY9sscAg4tkbLl+e4/U36rJ9ddxfd6sg5vq5ice42Wpk/pb9FOJ36/W9tpv4kbC79nUbZceX8Zu6/qJ+P3WvhvA8v3reh7Jbn2d6rrNC7XNZTLma4Ba0JI9efX2uLzF5scG/w9UNU1ZxW+ymUfzELeTllXlQ1rUuhzjS5fp9c964iFBOqeSz63bU065nZKdU+mDEz3qHIjjifquw0pnb/raRtvrnsYcb46ihT3taoYz6brdNW9l6rWRnE/navdPn1XlR1km7hcz1WlH/elKuSOSvLLuE8U6m8uzwRdfcGl73VyTHuyMvzJ1Sa2cWDTP/Z63Kc94n2B1PYr24dz1JlyHLlcP+S4B6vD1c9EW4q2LWstCvUjeVy63k/LMYdUNd5D1xQfvVTzX1VjkMsUv88N8VH5fReVn/Fjn++/h6X6Q8a6b1/q3g/i/ewi0/Scs8zxXeV6mWIOUPlPzBgdFerW+bZrm2P18dnjuK6HunEp+rHvPMXbr+sHVb/lnL+pTP57jPw9Cvk3PW178JD9qChfzuvTf7Htl38L1QUf/VKu9SFjwWbTWPvFEvu7Uq76y7+31g6QlYPc669pbsm9Xur2LWI9Pu8ypfDXqm3A2z8s1FWGn4ntL9NfQu2oSlftX9uetvTtv7J8Ql4zxfXGZ3zk8PeQ9w59x2uMfqI8/q5eKh/l9cb2rwsu9rSNl06ZP2Pmxtz+rNMx93yno0n2/82rVH7rQ+y9P15H6FyRun9ViH81ATmffI7nJ5r8uXXW6enbP6b/B8/l5OifVHYLnb9S39s2zcc+Ph+rh8+eQgVPS72elzGWY/tUtbbabBpDiI7yN1q6/4th2y+ErAc5+9BVvu/7KamJbWNZeuqI/R4tRf+YyD1HmOZM1bMV3/14Sn10c0Xu+Sj1nOXb5jL73ncdy02uvlXZNde65dOHYl7Vs4KYuS6FzWLn2zJlpZqPXPVPOa5yzKOyn1VhT9lmMfdbfH7D11Wf2PXN5h9y+dD287+qxgSnaYmnIrRtIb8pJe6/Uv9OVer6Whn0zfGO/BEloZI9ojmfAlUflClDd178bTmVHVTpZXOkAlk/lb42UujmI89HH5V+cl7XtowY6vTxLVWok6UrGzoGTHN+bB+6ri05687VNpvfuvRfaP2uMlNQth1D5JjGelm/8yn+9p3p/7qk9gnfeddXZmq/Sm333PJT659Kv1zjNbZ9uv2Oi//67CV8/N1nj1DmviyXDNVeJkaeaX8UsyesYg8cu2+NvdaPfb+lLDu5tvt/\");\nvar $557adaaeb0c7885f$var$classTrie = new import_unicode_trie.default($557adaaeb0c7885f$var$data);\nvar $557adaaeb0c7885f$var$mapClass = function(c) {\n    switch(c){\n        case $1627905f8be2ef3f$export$d710c5f50fc7496a:\n            return $1627905f8be2ef3f$export$1bb1140fe1358b00;\n        case $1627905f8be2ef3f$export$da51c6332ad11d7b:\n        case $1627905f8be2ef3f$export$bea437c40441867d:\n        case $1627905f8be2ef3f$export$98e1f8a379849661:\n            return $1627905f8be2ef3f$export$1bb1140fe1358b00;\n        case $1627905f8be2ef3f$export$eb6c6d0b7c8826f2:\n            return $1627905f8be2ef3f$export$fb4028874a74450;\n        default:\n            return c;\n    }\n};\nvar $557adaaeb0c7885f$var$mapFirst = function(c) {\n    switch(c){\n        case $1627905f8be2ef3f$export$606cfc2a8896c91f:\n        case $1627905f8be2ef3f$export$e51d3c675bb0140d:\n            return $1627905f8be2ef3f$export$66498d28055820a9;\n        case $1627905f8be2ef3f$export$c4c7eecbfed13dc9:\n            return $1627905f8be2ef3f$export$9e5d732f3676a9ba;\n        default:\n            return c;\n    }\n};\nvar $557adaaeb0c7885f$var$Break = class {\n    constructor(position, required = false){\n        this.position = position;\n        this.required = required;\n    }\n};\nvar $557adaaeb0c7885f$var$LineBreaker = class {\n    nextCodePoint() {\n        const code = this.string.charCodeAt(this.pos++);\n        const next = this.string.charCodeAt(this.pos);\n        if (55296 <= code && code <= 56319 && 56320 <= next && next <= 57343) {\n            this.pos++;\n            return (code - 55296) * 1024 + (next - 56320) + 65536;\n        }\n        return code;\n    }\n    nextCharClass() {\n        return $557adaaeb0c7885f$var$mapClass($557adaaeb0c7885f$var$classTrie.get(this.nextCodePoint()));\n    }\n    getSimpleBreak() {\n        switch(this.nextClass){\n            case $1627905f8be2ef3f$export$c4c7eecbfed13dc9:\n                return false;\n            case $1627905f8be2ef3f$export$66498d28055820a9:\n            case $1627905f8be2ef3f$export$606cfc2a8896c91f:\n            case $1627905f8be2ef3f$export$e51d3c675bb0140d:\n                this.curClass = $1627905f8be2ef3f$export$66498d28055820a9;\n                return false;\n            case $1627905f8be2ef3f$export$de92be486109a1df:\n                this.curClass = $1627905f8be2ef3f$export$de92be486109a1df;\n                return false;\n        }\n        return null;\n    }\n    getPairTableBreak(lastClass) {\n        let shouldBreak = false;\n        switch($32627af916ac1b00$export$5bdb8ccbf5c57afc[this.curClass][this.nextClass]){\n            case $32627af916ac1b00$export$98f50d781a474745:\n                shouldBreak = true;\n                break;\n            case $32627af916ac1b00$export$12ee1f8f5315ca7e:\n                shouldBreak = lastClass === $1627905f8be2ef3f$export$c4c7eecbfed13dc9;\n                break;\n            case $32627af916ac1b00$export$e4965ce242860454:\n                shouldBreak = lastClass === $1627905f8be2ef3f$export$c4c7eecbfed13dc9;\n                if (!shouldBreak) {\n                    shouldBreak = false;\n                    return shouldBreak;\n                }\n                break;\n            case $32627af916ac1b00$export$8f14048969dcd45e:\n                if (lastClass !== $1627905f8be2ef3f$export$c4c7eecbfed13dc9) return shouldBreak;\n                break;\n            case $32627af916ac1b00$export$133eb141bf58aff4:\n                break;\n        }\n        if (this.LB8a) shouldBreak = false;\n        if (this.LB21a && (this.curClass === $1627905f8be2ef3f$export$24aa617c849a894a || this.curClass === $1627905f8be2ef3f$export$a73c4d14459b698d)) {\n            shouldBreak = false;\n            this.LB21a = false;\n        } else this.LB21a = this.curClass === $1627905f8be2ef3f$export$f3e416a182673355;\n        if (this.curClass === $1627905f8be2ef3f$export$1dff41d5c0caca01) {\n            this.LB30a++;\n            if (this.LB30a == 2 && this.nextClass === $1627905f8be2ef3f$export$1dff41d5c0caca01) {\n                shouldBreak = true;\n                this.LB30a = 0;\n            }\n        } else this.LB30a = 0;\n        this.curClass = this.nextClass;\n        return shouldBreak;\n    }\n    nextBreak() {\n        if (this.curClass == null) {\n            let firstClass = this.nextCharClass();\n            this.curClass = $557adaaeb0c7885f$var$mapFirst(firstClass);\n            this.nextClass = firstClass;\n            this.LB8a = firstClass === $1627905f8be2ef3f$export$30a74a373318dec6;\n            this.LB30a = 0;\n        }\n        while(this.pos < this.string.length){\n            this.lastPos = this.pos;\n            const lastClass = this.nextClass;\n            this.nextClass = this.nextCharClass();\n            if (this.curClass === $1627905f8be2ef3f$export$66498d28055820a9 || this.curClass === $1627905f8be2ef3f$export$de92be486109a1df && this.nextClass !== $1627905f8be2ef3f$export$606cfc2a8896c91f) {\n                this.curClass = $557adaaeb0c7885f$var$mapFirst($557adaaeb0c7885f$var$mapClass(this.nextClass));\n                return new $557adaaeb0c7885f$var$Break(this.lastPos, true);\n            }\n            let shouldBreak = this.getSimpleBreak();\n            if (shouldBreak === null) shouldBreak = this.getPairTableBreak(lastClass);\n            this.LB8a = this.nextClass === $1627905f8be2ef3f$export$30a74a373318dec6;\n            if (shouldBreak) return new $557adaaeb0c7885f$var$Break(this.lastPos);\n        }\n        if (this.lastPos < this.string.length) {\n            this.lastPos = this.string.length;\n            return new $557adaaeb0c7885f$var$Break(this.string.length);\n        }\n        return null;\n    }\n    constructor(string){\n        this.string = string;\n        this.pos = 0;\n        this.lastPos = 0;\n        this.curClass = null;\n        this.nextClass = null;\n        this.LB8a = false;\n        this.LB21a = false;\n        this.LB30a = 0;\n    }\n};\n$557adaaeb0c7885f$exports = $557adaaeb0c7885f$var$LineBreaker;\n// node_modules/.pnpm/satori@0.10.9/node_modules/satori/dist/index.wasm.js\nvar import_css_to_react_native = __toESM(require_css_to_react_native(), 1);\nvar import_css_background_parser = __toESM(require_css_background_parser(), 1);\nvar import_css_box_shadow = __toESM(require_css_box_shadow(), 1);\n// node_modules/.pnpm/parse-css-color@0.2.1/node_modules/parse-css-color/dist/index.esm.js\nvar import_color_name = __toESM(require_color_name());\nvar import_hex_rgb = __toESM(require_hex_rgb());\nvar pattern = /^#([a-f0-9]{3,4}|[a-f0-9]{4}(?:[a-f0-9]{2}){1,2})\\b$/;\nvar hexRe = new RegExp(pattern, \"i\");\nvar float = \"-?\\\\d*(?:\\\\.\\\\d+)\";\nvar number = `(${float}?)`;\nvar percentage = `(${float}?%)`;\nvar numberOrPercentage = `(${float}?%?)`;\nvar pattern$1 = `^\n  hsla?\\\\(\n    \\\\s*(-?\\\\d*(?:\\\\.\\\\d+)?(?:deg|rad|turn)?)\\\\s*,\n    \\\\s*${percentage}\\\\s*,\n    \\\\s*${percentage}\\\\s*\n    (?:,\\\\s*${numberOrPercentage}\\\\s*)?\n  \\\\)\n  $\n`.replace(/\\n|\\s/g, \"\");\nvar hsl3Re = new RegExp(pattern$1);\nvar pattern$2 = `^\n  hsla?\\\\(\n    \\\\s*(-?\\\\d*(?:\\\\.\\\\d+)?(?:deg|rad|turn)?)\\\\s*\n    \\\\s+${percentage}\n    \\\\s+${percentage}\n    \\\\s*(?:\\\\s*\\\\/\\\\s*${numberOrPercentage}\\\\s*)?\n  \\\\)\n  $\n`.replace(/\\n|\\s/g, \"\");\nvar hsl4Re = new RegExp(pattern$2);\nvar pattern$3 = `^\n  rgba?\\\\(\n    \\\\s*${number}\\\\s*,\n    \\\\s*${number}\\\\s*,\n    \\\\s*${number}\\\\s*\n    (?:,\\\\s*${numberOrPercentage}\\\\s*)?\n  \\\\)\n  $\n`.replace(/\\n|\\s/g, \"\");\nvar rgb3NumberRe = new RegExp(pattern$3);\nvar pattern$4 = `^\n  rgba?\\\\(\n    \\\\s*${percentage}\\\\s*,\n    \\\\s*${percentage}\\\\s*,\n    \\\\s*${percentage}\\\\s*\n    (?:,\\\\s*${numberOrPercentage}\\\\s*)?\n  \\\\)\n  $\n`.replace(/\\n|\\s/g, \"\");\nvar rgb3PercentageRe = new RegExp(pattern$4);\nvar pattern$5 = `^\n  rgba?\\\\(\n    \\\\s*${number}\n    \\\\s+${number}\n    \\\\s+${number}\n    \\\\s*(?:\\\\s*\\\\/\\\\s*${numberOrPercentage}\\\\s*)?\n  \\\\)\n$\n`.replace(/\\n|\\s/g, \"\");\nvar rgb4NumberRe = new RegExp(pattern$5);\nvar pattern$6 = `^\n  rgba?\\\\(\n    \\\\s*${percentage}\n    \\\\s+${percentage}\n    \\\\s+${percentage}\n    \\\\s*(?:\\\\s*\\\\/\\\\s*${numberOrPercentage}\\\\s*)?\n  \\\\)\n$\n`.replace(/\\n|\\s/g, \"\");\nvar rgb4PercentageRe = new RegExp(pattern$6);\nvar pattern$7 = /^transparent$/;\nvar transparentRe = new RegExp(pattern$7, \"i\");\nvar clamp = (num, min, max2)=>Math.min(Math.max(min, num), max2);\nvar parseRGB = (num)=>{\n    let n = num;\n    if (typeof n !== \"number\") n = n.endsWith(\"%\") ? parseFloat(n) * 255 / 100 : parseFloat(n);\n    return clamp(Math.round(n), 0, 255);\n};\nvar parsePercentage = (percentage2)=>clamp(parseFloat(percentage2), 0, 100);\nfunction parseAlpha(alpha) {\n    let a = alpha;\n    if (typeof a !== \"number\") a = a.endsWith(\"%\") ? parseFloat(a) / 100 : parseFloat(a);\n    return clamp(a, 0, 1);\n}\nfunction getHEX(hex) {\n    const [r, g2, b, a] = (0, import_hex_rgb.default)(hex, {\n        format: \"array\"\n    });\n    return getRGB([\n        null,\n        ...[\n            r,\n            g2,\n            b,\n            a\n        ]\n    ]);\n}\nfunction getHSL([, h, s, l, a = 1]) {\n    let hh = h;\n    if (hh.endsWith(\"turn\")) {\n        hh = parseFloat(hh) * 360 / 1;\n    } else if (hh.endsWith(\"rad\")) {\n        hh = Math.round(parseFloat(hh) * 180 / Math.PI);\n    } else {\n        hh = parseFloat(hh);\n    }\n    return {\n        type: \"hsl\",\n        values: [\n            hh,\n            parsePercentage(s),\n            parsePercentage(l)\n        ],\n        alpha: parseAlpha(a === null ? 1 : a)\n    };\n}\nfunction getRGB([, r, g2, b, a = 1]) {\n    return {\n        type: \"rgb\",\n        values: [\n            r,\n            g2,\n            b\n        ].map(parseRGB),\n        alpha: parseAlpha(a === null ? 1 : a)\n    };\n}\nvar parseCSSColor = (str)=>{\n    if (typeof str !== \"string\") return null;\n    const hex = hexRe.exec(str);\n    if (hex) return getHEX(hex[0]);\n    const hsl = hsl4Re.exec(str) || hsl3Re.exec(str);\n    if (hsl) return getHSL(hsl);\n    const rgb = rgb4NumberRe.exec(str) || rgb4PercentageRe.exec(str) || rgb3NumberRe.exec(str) || rgb3PercentageRe.exec(str);\n    if (rgb) return getRGB(rgb);\n    if (transparentRe.exec(str)) return getRGB([\n        null,\n        0,\n        0,\n        0,\n        0\n    ]);\n    const cn = import_color_name.default[str.toLowerCase()];\n    if (cn) return getRGB([\n        null,\n        cn[0],\n        cn[1],\n        cn[2],\n        1\n    ]);\n    return null;\n};\nvar index_esm_default = parseCSSColor;\n// node_modules/.pnpm/satori@0.10.9/node_modules/satori/dist/index.wasm.js\nvar import_postcss_value_parser = __toESM(require_lib(), 1);\nvar import_css_to_react_native2 = __toESM(require_css_to_react_native(), 1);\nvar import_escape_html = __toESM(require_escape_html(), 1);\nvar import_css_to_react_native3 = __toESM(require_css_to_react_native(), 1);\n// node_modules/.pnpm/@shuding+opentype.js@1.4.0-beta.0/node_modules/@shuding/opentype.js/dist/opentype.module.js\nvar u8 = Uint8Array;\nvar u16 = Uint16Array;\nvar u32 = Uint32Array;\nvar fleb = new u8([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    2,\n    2,\n    2,\n    2,\n    3,\n    3,\n    3,\n    3,\n    4,\n    4,\n    4,\n    4,\n    5,\n    5,\n    5,\n    5,\n    0,\n    0,\n    0,\n    0\n]);\nvar fdeb = new u8([\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    2,\n    2,\n    3,\n    3,\n    4,\n    4,\n    5,\n    5,\n    6,\n    6,\n    7,\n    7,\n    8,\n    8,\n    9,\n    9,\n    10,\n    10,\n    11,\n    11,\n    12,\n    12,\n    13,\n    13,\n    0,\n    0\n]);\nvar clim = new u8([\n    16,\n    17,\n    18,\n    0,\n    8,\n    7,\n    9,\n    6,\n    10,\n    5,\n    11,\n    4,\n    12,\n    3,\n    13,\n    2,\n    14,\n    1,\n    15\n]);\nvar freb = function(eb, start) {\n    var b = new u16(31);\n    for(var i = 0; i < 31; ++i){\n        b[i] = start += 1 << eb[i - 1];\n    }\n    var r = new u32(b[30]);\n    for(var i = 1; i < 30; ++i){\n        for(var j = b[i]; j < b[i + 1]; ++j){\n            r[j] = j - b[i] << 5 | i;\n        }\n    }\n    return [\n        b,\n        r\n    ];\n};\nvar _a = freb(fleb, 2);\nvar fl = _a[0];\nvar revfl = _a[1];\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0);\nvar fd = _b[0];\nvar rev = new u16(32768);\nfor(i = 0; i < 32768; ++i){\n    x = (i & 43690) >>> 1 | (i & 21845) << 1;\n    x = (x & 52428) >>> 2 | (x & 13107) << 2;\n    x = (x & 61680) >>> 4 | (x & 3855) << 4;\n    rev[i] = ((x & 65280) >>> 8 | (x & 255) << 8) >>> 1;\n}\nvar x;\nvar i;\nvar hMap = function(cd, mb, r) {\n    var s = cd.length;\n    var i = 0;\n    var l = new u16(mb);\n    for(; i < s; ++i){\n        if (cd[i]) {\n            ++l[cd[i] - 1];\n        }\n    }\n    var le = new u16(mb);\n    for(i = 0; i < mb; ++i){\n        le[i] = le[i - 1] + l[i - 1] << 1;\n    }\n    var co;\n    if (r) {\n        co = new u16(1 << mb);\n        var rvb = 15 - mb;\n        for(i = 0; i < s; ++i){\n            if (cd[i]) {\n                var sv = i << 4 | cd[i];\n                var r_1 = mb - cd[i];\n                var v = le[cd[i] - 1]++ << r_1;\n                for(var m = v | (1 << r_1) - 1; v <= m; ++v){\n                    co[rev[v] >>> rvb] = sv;\n                }\n            }\n        }\n    } else {\n        co = new u16(s);\n        for(i = 0; i < s; ++i){\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >>> 15 - cd[i];\n            }\n        }\n    }\n    return co;\n};\nvar flt = new u8(288);\nfor(i = 0; i < 144; ++i){\n    flt[i] = 8;\n}\nvar i;\nfor(i = 144; i < 256; ++i){\n    flt[i] = 9;\n}\nvar i;\nfor(i = 256; i < 280; ++i){\n    flt[i] = 7;\n}\nvar i;\nfor(i = 280; i < 288; ++i){\n    flt[i] = 8;\n}\nvar i;\nvar fdt = new u8(32);\nfor(i = 0; i < 32; ++i){\n    fdt[i] = 5;\n}\nvar i;\nvar flrm = /* @__PURE__ */ hMap(flt, 9, 1);\nvar fdrm = /* @__PURE__ */ hMap(fdt, 5, 1);\nvar max = function(a) {\n    var m = a[0];\n    for(var i = 1; i < a.length; ++i){\n        if (a[i] > m) {\n            m = a[i];\n        }\n    }\n    return m;\n};\nvar bits = function(d, p, m) {\n    var o = p / 8 | 0;\n    return (d[o] | d[o + 1] << 8) >> (p & 7) & m;\n};\nvar bits16 = function(d, p) {\n    var o = p / 8 | 0;\n    return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >> (p & 7);\n};\nvar shft = function(p) {\n    return (p + 7) / 8 | 0;\n};\nvar slc = function(v, s, e) {\n    if (s == null || s < 0) {\n        s = 0;\n    }\n    if (e == null || e > v.length) {\n        e = v.length;\n    }\n    var n = new (v.BYTES_PER_ELEMENT == 2 ? u16 : v.BYTES_PER_ELEMENT == 4 ? u32 : u8)(e - s);\n    n.set(v.subarray(s, e));\n    return n;\n};\nvar ec = [\n    \"unexpected EOF\",\n    \"invalid block type\",\n    \"invalid length/literal\",\n    \"invalid distance\",\n    \"stream finished\",\n    \"no stream handler\",\n    ,\n    \"no callback\",\n    \"invalid UTF-8 data\",\n    \"extra field too long\",\n    \"date not in range 1980-2099\",\n    \"filename too long\",\n    \"stream finishing\",\n    \"invalid zip data\"\n];\nvar err = function(ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace) {\n        Error.captureStackTrace(e, err);\n    }\n    if (!nt) {\n        throw e;\n    }\n    return e;\n};\nvar inflt = function(dat, buf, st) {\n    var sl2 = dat.length;\n    if (!sl2 || st && st.f && !st.l) {\n        return buf || new u8(0);\n    }\n    var noBuf = !buf || st;\n    var noSt = !st || st.i;\n    if (!st) {\n        st = {};\n    }\n    if (!buf) {\n        buf = new u8(sl2 * 3);\n    }\n    var cbuf = function(l2) {\n        var bl2 = buf.length;\n        if (l2 > bl2) {\n            var nbuf = new u8(Math.max(bl2 * 2, l2));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    var final = st.f || 0, pos = st.p || 0, bt2 = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    var tbts = sl2 * 8;\n    do {\n        if (!lm) {\n            final = bits(dat, pos, 1);\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                var s = shft(pos) + 4, l = dat[s - 4] | dat[s - 3] << 8, t = s + l;\n                if (t > sl2) {\n                    if (noSt) {\n                        err(0);\n                    }\n                    break;\n                }\n                if (noBuf) {\n                    cbuf(bt2 + l);\n                }\n                buf.set(dat.subarray(s, t), bt2);\n                st.b = bt2 += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            } else if (type == 1) {\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            } else if (type == 2) {\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl2 = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                var ldt = new u8(tl2);\n                var clt = new u8(19);\n                for(var i = 0; i < hcLen; ++i){\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                var clm = hMap(clt, clb, 1);\n                for(var i = 0; i < tl2;){\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    pos += r & 15;\n                    var s = r >>> 4;\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    } else {\n                        var c = 0, n = 0;\n                        if (s == 16) {\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        } else if (s == 17) {\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        } else if (s == 18) {\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        }\n                        while(n--){\n                            ldt[i++] = c;\n                        }\n                    }\n                }\n                var lt = ldt.subarray(0, hLit), dt2 = ldt.subarray(hLit);\n                lbt = max(lt);\n                dbt = max(dt2);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt2, dbt, 1);\n            } else {\n                err(1);\n            }\n            if (pos > tbts) {\n                if (noSt) {\n                    err(0);\n                }\n                break;\n            }\n        }\n        if (noBuf) {\n            cbuf(bt2 + 131072);\n        }\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for(;; lpos = pos){\n            var c = lm[bits16(dat, pos) & lms], sym = c >>> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt) {\n                    err(0);\n                }\n                break;\n            }\n            if (!c) {\n                err(2);\n            }\n            if (sym < 256) {\n                buf[bt2++] = sym;\n            } else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            } else {\n                var add = sym - 254;\n                if (sym > 264) {\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;\n                if (!d) {\n                    err(3);\n                }\n                pos += d & 15;\n                var dt2 = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt2 += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt) {\n                        err(0);\n                    }\n                    break;\n                }\n                if (noBuf) {\n                    cbuf(bt2 + 131072);\n                }\n                var end = bt2 + add;\n                for(; bt2 < end; bt2 += 4){\n                    buf[bt2] = buf[bt2 - dt2];\n                    buf[bt2 + 1] = buf[bt2 + 1 - dt2];\n                    buf[bt2 + 2] = buf[bt2 + 2 - dt2];\n                    buf[bt2 + 3] = buf[bt2 + 3 - dt2];\n                }\n                bt2 = end;\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt2, st.f = final;\n        if (lm) {\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n        }\n    }while (!final);\n    return bt2 == buf.length ? buf : slc(buf, 0, bt2);\n};\nvar et = /* @__PURE__ */ new u8(0);\nfunction inflateSync(data, out) {\n    return inflt(data, out);\n}\nvar td = typeof TextDecoder != \"undefined\" && /* @__PURE__ */ new TextDecoder();\nvar tds = 0;\ntry {\n    td.decode(et, {\n        stream: true\n    });\n    tds = 1;\n} catch (e) {}\nfunction Path() {\n    this.commands = [];\n    this.fill = \"black\";\n    this.stroke = null;\n    this.strokeWidth = 1;\n}\nPath.prototype.moveTo = function(x, y) {\n    this.commands.push({\n        type: \"M\",\n        x,\n        y\n    });\n};\nPath.prototype.lineTo = function(x, y) {\n    this.commands.push({\n        type: \"L\",\n        x,\n        y\n    });\n};\nPath.prototype.curveTo = Path.prototype.bezierCurveTo = function(x1, y1, x2, y2, x, y) {\n    this.commands.push({\n        type: \"C\",\n        x1,\n        y1,\n        x2,\n        y2,\n        x,\n        y\n    });\n};\nPath.prototype.quadTo = Path.prototype.quadraticCurveTo = function(x1, y1, x, y) {\n    this.commands.push({\n        type: \"Q\",\n        x1,\n        y1,\n        x,\n        y\n    });\n};\nPath.prototype.close = Path.prototype.closePath = function() {\n    this.commands.push({\n        type: \"Z\"\n    });\n};\nPath.prototype.extend = function(pathOrCommands) {\n    if (pathOrCommands.commands) {\n        pathOrCommands = pathOrCommands.commands;\n    }\n    Array.prototype.push.apply(this.commands, pathOrCommands);\n};\nPath.prototype.toPathData = function(decimalPlaces) {\n    decimalPlaces = decimalPlaces !== void 0 ? decimalPlaces : 2;\n    function floatToString(v) {\n        if (Math.round(v) === v) {\n            return \"\" + Math.round(v);\n        } else {\n            return v.toFixed(decimalPlaces);\n        }\n    }\n    function packValues() {\n        var arguments$1 = arguments;\n        var s = \"\";\n        for(var i2 = 0; i2 < arguments.length; i2 += 1){\n            var v = arguments$1[i2];\n            if (v >= 0 && i2 > 0) {\n                s += \" \";\n            }\n            s += floatToString(v);\n        }\n        return s;\n    }\n    var d = \"\";\n    for(var i = 0; i < this.commands.length; i += 1){\n        var cmd = this.commands[i];\n        if (cmd.type === \"M\") {\n            d += \"M\" + packValues(cmd.x, cmd.y);\n        } else if (cmd.type === \"L\") {\n            d += \"L\" + packValues(cmd.x, cmd.y);\n        } else if (cmd.type === \"C\") {\n            d += \"C\" + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n        } else if (cmd.type === \"Q\") {\n            d += \"Q\" + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);\n        } else if (cmd.type === \"Z\") {\n            d += \"Z\";\n        }\n    }\n    return d;\n};\nvar cffStandardStrings = [\n    \".notdef\",\n    \"space\",\n    \"exclam\",\n    \"quotedbl\",\n    \"numbersign\",\n    \"dollar\",\n    \"percent\",\n    \"ampersand\",\n    \"quoteright\",\n    \"parenleft\",\n    \"parenright\",\n    \"asterisk\",\n    \"plus\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"slash\",\n    \"zero\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n    \"colon\",\n    \"semicolon\",\n    \"less\",\n    \"equal\",\n    \"greater\",\n    \"question\",\n    \"at\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \"bracketleft\",\n    \"backslash\",\n    \"bracketright\",\n    \"asciicircum\",\n    \"underscore\",\n    \"quoteleft\",\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"braceleft\",\n    \"bar\",\n    \"braceright\",\n    \"asciitilde\",\n    \"exclamdown\",\n    \"cent\",\n    \"sterling\",\n    \"fraction\",\n    \"yen\",\n    \"florin\",\n    \"section\",\n    \"currency\",\n    \"quotesingle\",\n    \"quotedblleft\",\n    \"guillemotleft\",\n    \"guilsinglleft\",\n    \"guilsinglright\",\n    \"fi\",\n    \"fl\",\n    \"endash\",\n    \"dagger\",\n    \"daggerdbl\",\n    \"periodcentered\",\n    \"paragraph\",\n    \"bullet\",\n    \"quotesinglbase\",\n    \"quotedblbase\",\n    \"quotedblright\",\n    \"guillemotright\",\n    \"ellipsis\",\n    \"perthousand\",\n    \"questiondown\",\n    \"grave\",\n    \"acute\",\n    \"circumflex\",\n    \"tilde\",\n    \"macron\",\n    \"breve\",\n    \"dotaccent\",\n    \"dieresis\",\n    \"ring\",\n    \"cedilla\",\n    \"hungarumlaut\",\n    \"ogonek\",\n    \"caron\",\n    \"emdash\",\n    \"AE\",\n    \"ordfeminine\",\n    \"Lslash\",\n    \"Oslash\",\n    \"OE\",\n    \"ordmasculine\",\n    \"ae\",\n    \"dotlessi\",\n    \"lslash\",\n    \"oslash\",\n    \"oe\",\n    \"germandbls\",\n    \"onesuperior\",\n    \"logicalnot\",\n    \"mu\",\n    \"trademark\",\n    \"Eth\",\n    \"onehalf\",\n    \"plusminus\",\n    \"Thorn\",\n    \"onequarter\",\n    \"divide\",\n    \"brokenbar\",\n    \"degree\",\n    \"thorn\",\n    \"threequarters\",\n    \"twosuperior\",\n    \"registered\",\n    \"minus\",\n    \"eth\",\n    \"multiply\",\n    \"threesuperior\",\n    \"copyright\",\n    \"Aacute\",\n    \"Acircumflex\",\n    \"Adieresis\",\n    \"Agrave\",\n    \"Aring\",\n    \"Atilde\",\n    \"Ccedilla\",\n    \"Eacute\",\n    \"Ecircumflex\",\n    \"Edieresis\",\n    \"Egrave\",\n    \"Iacute\",\n    \"Icircumflex\",\n    \"Idieresis\",\n    \"Igrave\",\n    \"Ntilde\",\n    \"Oacute\",\n    \"Ocircumflex\",\n    \"Odieresis\",\n    \"Ograve\",\n    \"Otilde\",\n    \"Scaron\",\n    \"Uacute\",\n    \"Ucircumflex\",\n    \"Udieresis\",\n    \"Ugrave\",\n    \"Yacute\",\n    \"Ydieresis\",\n    \"Zcaron\",\n    \"aacute\",\n    \"acircumflex\",\n    \"adieresis\",\n    \"agrave\",\n    \"aring\",\n    \"atilde\",\n    \"ccedilla\",\n    \"eacute\",\n    \"ecircumflex\",\n    \"edieresis\",\n    \"egrave\",\n    \"iacute\",\n    \"icircumflex\",\n    \"idieresis\",\n    \"igrave\",\n    \"ntilde\",\n    \"oacute\",\n    \"ocircumflex\",\n    \"odieresis\",\n    \"ograve\",\n    \"otilde\",\n    \"scaron\",\n    \"uacute\",\n    \"ucircumflex\",\n    \"udieresis\",\n    \"ugrave\",\n    \"yacute\",\n    \"ydieresis\",\n    \"zcaron\",\n    \"exclamsmall\",\n    \"Hungarumlautsmall\",\n    \"dollaroldstyle\",\n    \"dollarsuperior\",\n    \"ampersandsmall\",\n    \"Acutesmall\",\n    \"parenleftsuperior\",\n    \"parenrightsuperior\",\n    \"266 ff\",\n    \"onedotenleader\",\n    \"zerooldstyle\",\n    \"oneoldstyle\",\n    \"twooldstyle\",\n    \"threeoldstyle\",\n    \"fouroldstyle\",\n    \"fiveoldstyle\",\n    \"sixoldstyle\",\n    \"sevenoldstyle\",\n    \"eightoldstyle\",\n    \"nineoldstyle\",\n    \"commasuperior\",\n    \"threequartersemdash\",\n    \"periodsuperior\",\n    \"questionsmall\",\n    \"asuperior\",\n    \"bsuperior\",\n    \"centsuperior\",\n    \"dsuperior\",\n    \"esuperior\",\n    \"isuperior\",\n    \"lsuperior\",\n    \"msuperior\",\n    \"nsuperior\",\n    \"osuperior\",\n    \"rsuperior\",\n    \"ssuperior\",\n    \"tsuperior\",\n    \"ff\",\n    \"ffi\",\n    \"ffl\",\n    \"parenleftinferior\",\n    \"parenrightinferior\",\n    \"Circumflexsmall\",\n    \"hyphensuperior\",\n    \"Gravesmall\",\n    \"Asmall\",\n    \"Bsmall\",\n    \"Csmall\",\n    \"Dsmall\",\n    \"Esmall\",\n    \"Fsmall\",\n    \"Gsmall\",\n    \"Hsmall\",\n    \"Ismall\",\n    \"Jsmall\",\n    \"Ksmall\",\n    \"Lsmall\",\n    \"Msmall\",\n    \"Nsmall\",\n    \"Osmall\",\n    \"Psmall\",\n    \"Qsmall\",\n    \"Rsmall\",\n    \"Ssmall\",\n    \"Tsmall\",\n    \"Usmall\",\n    \"Vsmall\",\n    \"Wsmall\",\n    \"Xsmall\",\n    \"Ysmall\",\n    \"Zsmall\",\n    \"colonmonetary\",\n    \"onefitted\",\n    \"rupiah\",\n    \"Tildesmall\",\n    \"exclamdownsmall\",\n    \"centoldstyle\",\n    \"Lslashsmall\",\n    \"Scaronsmall\",\n    \"Zcaronsmall\",\n    \"Dieresissmall\",\n    \"Brevesmall\",\n    \"Caronsmall\",\n    \"Dotaccentsmall\",\n    \"Macronsmall\",\n    \"figuredash\",\n    \"hypheninferior\",\n    \"Ogoneksmall\",\n    \"Ringsmall\",\n    \"Cedillasmall\",\n    \"questiondownsmall\",\n    \"oneeighth\",\n    \"threeeighths\",\n    \"fiveeighths\",\n    \"seveneighths\",\n    \"onethird\",\n    \"twothirds\",\n    \"zerosuperior\",\n    \"foursuperior\",\n    \"fivesuperior\",\n    \"sixsuperior\",\n    \"sevensuperior\",\n    \"eightsuperior\",\n    \"ninesuperior\",\n    \"zeroinferior\",\n    \"oneinferior\",\n    \"twoinferior\",\n    \"threeinferior\",\n    \"fourinferior\",\n    \"fiveinferior\",\n    \"sixinferior\",\n    \"seveninferior\",\n    \"eightinferior\",\n    \"nineinferior\",\n    \"centinferior\",\n    \"dollarinferior\",\n    \"periodinferior\",\n    \"commainferior\",\n    \"Agravesmall\",\n    \"Aacutesmall\",\n    \"Acircumflexsmall\",\n    \"Atildesmall\",\n    \"Adieresissmall\",\n    \"Aringsmall\",\n    \"AEsmall\",\n    \"Ccedillasmall\",\n    \"Egravesmall\",\n    \"Eacutesmall\",\n    \"Ecircumflexsmall\",\n    \"Edieresissmall\",\n    \"Igravesmall\",\n    \"Iacutesmall\",\n    \"Icircumflexsmall\",\n    \"Idieresissmall\",\n    \"Ethsmall\",\n    \"Ntildesmall\",\n    \"Ogravesmall\",\n    \"Oacutesmall\",\n    \"Ocircumflexsmall\",\n    \"Otildesmall\",\n    \"Odieresissmall\",\n    \"OEsmall\",\n    \"Oslashsmall\",\n    \"Ugravesmall\",\n    \"Uacutesmall\",\n    \"Ucircumflexsmall\",\n    \"Udieresissmall\",\n    \"Yacutesmall\",\n    \"Thornsmall\",\n    \"Ydieresissmall\",\n    \"001.000\",\n    \"001.001\",\n    \"001.002\",\n    \"001.003\",\n    \"Black\",\n    \"Bold\",\n    \"Book\",\n    \"Light\",\n    \"Medium\",\n    \"Regular\",\n    \"Roman\",\n    \"Semibold\"\n];\nvar cffStandardEncoding = [\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"space\",\n    \"exclam\",\n    \"quotedbl\",\n    \"numbersign\",\n    \"dollar\",\n    \"percent\",\n    \"ampersand\",\n    \"quoteright\",\n    \"parenleft\",\n    \"parenright\",\n    \"asterisk\",\n    \"plus\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"slash\",\n    \"zero\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n    \"colon\",\n    \"semicolon\",\n    \"less\",\n    \"equal\",\n    \"greater\",\n    \"question\",\n    \"at\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \"bracketleft\",\n    \"backslash\",\n    \"bracketright\",\n    \"asciicircum\",\n    \"underscore\",\n    \"quoteleft\",\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"braceleft\",\n    \"bar\",\n    \"braceright\",\n    \"asciitilde\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"exclamdown\",\n    \"cent\",\n    \"sterling\",\n    \"fraction\",\n    \"yen\",\n    \"florin\",\n    \"section\",\n    \"currency\",\n    \"quotesingle\",\n    \"quotedblleft\",\n    \"guillemotleft\",\n    \"guilsinglleft\",\n    \"guilsinglright\",\n    \"fi\",\n    \"fl\",\n    \"\",\n    \"endash\",\n    \"dagger\",\n    \"daggerdbl\",\n    \"periodcentered\",\n    \"\",\n    \"paragraph\",\n    \"bullet\",\n    \"quotesinglbase\",\n    \"quotedblbase\",\n    \"quotedblright\",\n    \"guillemotright\",\n    \"ellipsis\",\n    \"perthousand\",\n    \"\",\n    \"questiondown\",\n    \"\",\n    \"grave\",\n    \"acute\",\n    \"circumflex\",\n    \"tilde\",\n    \"macron\",\n    \"breve\",\n    \"dotaccent\",\n    \"dieresis\",\n    \"\",\n    \"ring\",\n    \"cedilla\",\n    \"\",\n    \"hungarumlaut\",\n    \"ogonek\",\n    \"caron\",\n    \"emdash\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"AE\",\n    \"\",\n    \"ordfeminine\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"Lslash\",\n    \"Oslash\",\n    \"OE\",\n    \"ordmasculine\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"ae\",\n    \"\",\n    \"\",\n    \"\",\n    \"dotlessi\",\n    \"\",\n    \"\",\n    \"lslash\",\n    \"oslash\",\n    \"oe\",\n    \"germandbls\"\n];\nvar cffExpertEncoding = [\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"space\",\n    \"exclamsmall\",\n    \"Hungarumlautsmall\",\n    \"\",\n    \"dollaroldstyle\",\n    \"dollarsuperior\",\n    \"ampersandsmall\",\n    \"Acutesmall\",\n    \"parenleftsuperior\",\n    \"parenrightsuperior\",\n    \"twodotenleader\",\n    \"onedotenleader\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"fraction\",\n    \"zerooldstyle\",\n    \"oneoldstyle\",\n    \"twooldstyle\",\n    \"threeoldstyle\",\n    \"fouroldstyle\",\n    \"fiveoldstyle\",\n    \"sixoldstyle\",\n    \"sevenoldstyle\",\n    \"eightoldstyle\",\n    \"nineoldstyle\",\n    \"colon\",\n    \"semicolon\",\n    \"commasuperior\",\n    \"threequartersemdash\",\n    \"periodsuperior\",\n    \"questionsmall\",\n    \"\",\n    \"asuperior\",\n    \"bsuperior\",\n    \"centsuperior\",\n    \"dsuperior\",\n    \"esuperior\",\n    \"\",\n    \"\",\n    \"isuperior\",\n    \"\",\n    \"\",\n    \"lsuperior\",\n    \"msuperior\",\n    \"nsuperior\",\n    \"osuperior\",\n    \"\",\n    \"\",\n    \"rsuperior\",\n    \"ssuperior\",\n    \"tsuperior\",\n    \"\",\n    \"ff\",\n    \"fi\",\n    \"fl\",\n    \"ffi\",\n    \"ffl\",\n    \"parenleftinferior\",\n    \"\",\n    \"parenrightinferior\",\n    \"Circumflexsmall\",\n    \"hyphensuperior\",\n    \"Gravesmall\",\n    \"Asmall\",\n    \"Bsmall\",\n    \"Csmall\",\n    \"Dsmall\",\n    \"Esmall\",\n    \"Fsmall\",\n    \"Gsmall\",\n    \"Hsmall\",\n    \"Ismall\",\n    \"Jsmall\",\n    \"Ksmall\",\n    \"Lsmall\",\n    \"Msmall\",\n    \"Nsmall\",\n    \"Osmall\",\n    \"Psmall\",\n    \"Qsmall\",\n    \"Rsmall\",\n    \"Ssmall\",\n    \"Tsmall\",\n    \"Usmall\",\n    \"Vsmall\",\n    \"Wsmall\",\n    \"Xsmall\",\n    \"Ysmall\",\n    \"Zsmall\",\n    \"colonmonetary\",\n    \"onefitted\",\n    \"rupiah\",\n    \"Tildesmall\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"exclamdownsmall\",\n    \"centoldstyle\",\n    \"Lslashsmall\",\n    \"\",\n    \"\",\n    \"Scaronsmall\",\n    \"Zcaronsmall\",\n    \"Dieresissmall\",\n    \"Brevesmall\",\n    \"Caronsmall\",\n    \"\",\n    \"Dotaccentsmall\",\n    \"\",\n    \"\",\n    \"Macronsmall\",\n    \"\",\n    \"\",\n    \"figuredash\",\n    \"hypheninferior\",\n    \"\",\n    \"\",\n    \"Ogoneksmall\",\n    \"Ringsmall\",\n    \"Cedillasmall\",\n    \"\",\n    \"\",\n    \"\",\n    \"onequarter\",\n    \"onehalf\",\n    \"threequarters\",\n    \"questiondownsmall\",\n    \"oneeighth\",\n    \"threeeighths\",\n    \"fiveeighths\",\n    \"seveneighths\",\n    \"onethird\",\n    \"twothirds\",\n    \"\",\n    \"\",\n    \"zerosuperior\",\n    \"onesuperior\",\n    \"twosuperior\",\n    \"threesuperior\",\n    \"foursuperior\",\n    \"fivesuperior\",\n    \"sixsuperior\",\n    \"sevensuperior\",\n    \"eightsuperior\",\n    \"ninesuperior\",\n    \"zeroinferior\",\n    \"oneinferior\",\n    \"twoinferior\",\n    \"threeinferior\",\n    \"fourinferior\",\n    \"fiveinferior\",\n    \"sixinferior\",\n    \"seveninferior\",\n    \"eightinferior\",\n    \"nineinferior\",\n    \"centinferior\",\n    \"dollarinferior\",\n    \"periodinferior\",\n    \"commainferior\",\n    \"Agravesmall\",\n    \"Aacutesmall\",\n    \"Acircumflexsmall\",\n    \"Atildesmall\",\n    \"Adieresissmall\",\n    \"Aringsmall\",\n    \"AEsmall\",\n    \"Ccedillasmall\",\n    \"Egravesmall\",\n    \"Eacutesmall\",\n    \"Ecircumflexsmall\",\n    \"Edieresissmall\",\n    \"Igravesmall\",\n    \"Iacutesmall\",\n    \"Icircumflexsmall\",\n    \"Idieresissmall\",\n    \"Ethsmall\",\n    \"Ntildesmall\",\n    \"Ogravesmall\",\n    \"Oacutesmall\",\n    \"Ocircumflexsmall\",\n    \"Otildesmall\",\n    \"Odieresissmall\",\n    \"OEsmall\",\n    \"Oslashsmall\",\n    \"Ugravesmall\",\n    \"Uacutesmall\",\n    \"Ucircumflexsmall\",\n    \"Udieresissmall\",\n    \"Yacutesmall\",\n    \"Thornsmall\",\n    \"Ydieresissmall\"\n];\nfunction DefaultEncoding(font) {\n    this.font = font;\n}\nDefaultEncoding.prototype.charToGlyphIndex = function(c) {\n    var code = c.codePointAt(0);\n    var glyphs = this.font.glyphs;\n    if (glyphs) {\n        for(var i = 0; i < glyphs.length; i += 1){\n            var glyph = glyphs.get(i);\n            for(var j = 0; j < glyph.unicodes.length; j += 1){\n                if (glyph.unicodes[j] === code) {\n                    return i;\n                }\n            }\n        }\n    }\n    return null;\n};\nfunction CmapEncoding(cmap2) {\n    this.cmap = cmap2;\n}\nCmapEncoding.prototype.charToGlyphIndex = function(c) {\n    return this.cmap.glyphIndexMap[c.codePointAt(0)] || 0;\n};\nfunction CffEncoding(encoding, charset) {\n    this.encoding = encoding;\n    this.charset = charset;\n}\nCffEncoding.prototype.charToGlyphIndex = function(s) {\n    var code = s.codePointAt(0);\n    var charName = this.encoding[code];\n    return this.charset.indexOf(charName);\n};\nfunction addGlyphNamesAll(font) {\n    var glyph;\n    var glyphIndexMap = font.tables.cmap.glyphIndexMap;\n    var charCodes = Object.keys(glyphIndexMap);\n    for(var i = 0; i < charCodes.length; i += 1){\n        var c = charCodes[i];\n        var glyphIndex = glyphIndexMap[c];\n        glyph = font.glyphs.get(glyphIndex);\n        glyph.addUnicode(parseInt(c));\n    }\n}\nfunction addGlyphNamesToUnicodeMap(font) {\n    font._IndexToUnicodeMap = {};\n    var glyphIndexMap = font.tables.cmap.glyphIndexMap;\n    var charCodes = Object.keys(glyphIndexMap);\n    for(var i = 0; i < charCodes.length; i += 1){\n        var c = charCodes[i];\n        var glyphIndex = glyphIndexMap[c];\n        if (font._IndexToUnicodeMap[glyphIndex] === void 0) {\n            font._IndexToUnicodeMap[glyphIndex] = {\n                unicodes: [\n                    parseInt(c)\n                ]\n            };\n        } else {\n            font._IndexToUnicodeMap[glyphIndex].unicodes.push(parseInt(c));\n        }\n    }\n}\nfunction addGlyphNames(font, opt) {\n    if (opt.lowMemory) {\n        addGlyphNamesToUnicodeMap(font);\n    } else {\n        addGlyphNamesAll(font);\n    }\n}\nfunction fail(message) {\n    throw new Error(message);\n}\nfunction argument(predicate, message) {\n    if (!predicate) {\n        fail(message);\n    }\n}\nvar check = {\n    fail,\n    argument,\n    assert: argument\n};\nfunction getPathDefinition(glyph, path) {\n    var _path = path || new Path();\n    return {\n        configurable: true,\n        get: function() {\n            if (typeof _path === \"function\") {\n                _path = _path();\n            }\n            return _path;\n        },\n        set: function(p) {\n            _path = p;\n        }\n    };\n}\nfunction Glyph(options) {\n    this.bindConstructorValues(options);\n}\nGlyph.prototype.bindConstructorValues = function(options) {\n    this.index = options.index || 0;\n    this.name = options.name || null;\n    this.unicode = options.unicode || void 0;\n    this.unicodes = options.unicodes || options.unicode !== void 0 ? [\n        options.unicode\n    ] : [];\n    if (\"xMin\" in options) {\n        this.xMin = options.xMin;\n    }\n    if (\"yMin\" in options) {\n        this.yMin = options.yMin;\n    }\n    if (\"xMax\" in options) {\n        this.xMax = options.xMax;\n    }\n    if (\"yMax\" in options) {\n        this.yMax = options.yMax;\n    }\n    if (\"advanceWidth\" in options) {\n        this.advanceWidth = options.advanceWidth;\n    }\n    Object.defineProperty(this, \"path\", getPathDefinition(this, options.path));\n};\nGlyph.prototype.addUnicode = function(unicode) {\n    if (this.unicodes.length === 0) {\n        this.unicode = unicode;\n    }\n    this.unicodes.push(unicode);\n};\nGlyph.prototype.getPath = function(x, y, fontSize, options, font) {\n    x = x !== void 0 ? x : 0;\n    y = y !== void 0 ? y : 0;\n    fontSize = fontSize !== void 0 ? fontSize : 72;\n    var commands;\n    var hPoints;\n    if (!options) {\n        options = {};\n    }\n    var xScale = options.xScale;\n    var yScale = options.yScale;\n    if (options.hinting && font && font.hinting) {\n        hPoints = this.path && font.hinting.exec(this, fontSize);\n    }\n    if (hPoints) {\n        commands = font.hinting.getCommands(hPoints);\n        x = Math.round(x);\n        y = Math.round(y);\n        xScale = yScale = 1;\n    } else {\n        commands = this.path.commands;\n        var scale = 1 / (this.path.unitsPerEm || 1e3) * fontSize;\n        if (xScale === void 0) {\n            xScale = scale;\n        }\n        if (yScale === void 0) {\n            yScale = scale;\n        }\n    }\n    var p = new Path();\n    for(var i = 0; i < commands.length; i += 1){\n        var cmd = commands[i];\n        if (cmd.type === \"M\") {\n            p.moveTo(x + cmd.x * xScale, y + -cmd.y * yScale);\n        } else if (cmd.type === \"L\") {\n            p.lineTo(x + cmd.x * xScale, y + -cmd.y * yScale);\n        } else if (cmd.type === \"Q\") {\n            p.quadraticCurveTo(x + cmd.x1 * xScale, y + -cmd.y1 * yScale, x + cmd.x * xScale, y + -cmd.y * yScale);\n        } else if (cmd.type === \"C\") {\n            p.curveTo(x + cmd.x1 * xScale, y + -cmd.y1 * yScale, x + cmd.x2 * xScale, y + -cmd.y2 * yScale, x + cmd.x * xScale, y + -cmd.y * yScale);\n        } else if (cmd.type === \"Z\") {\n            p.closePath();\n        }\n    }\n    return p;\n};\nGlyph.prototype.getContours = function() {\n    if (this.points === void 0) {\n        return [];\n    }\n    var contours = [];\n    var currentContour = [];\n    for(var i = 0; i < this.points.length; i += 1){\n        var pt = this.points[i];\n        currentContour.push(pt);\n        if (pt.lastPointOfContour) {\n            contours.push(currentContour);\n            currentContour = [];\n        }\n    }\n    check.argument(currentContour.length === 0, \"There are still points left in the current contour.\");\n    return contours;\n};\nGlyph.prototype.getMetrics = function() {\n    var commands = this.path.commands;\n    var xCoords = [];\n    var yCoords = [];\n    for(var i = 0; i < commands.length; i += 1){\n        var cmd = commands[i];\n        if (cmd.type !== \"Z\") {\n            xCoords.push(cmd.x);\n            yCoords.push(cmd.y);\n        }\n        if (cmd.type === \"Q\" || cmd.type === \"C\") {\n            xCoords.push(cmd.x1);\n            yCoords.push(cmd.y1);\n        }\n        if (cmd.type === \"C\") {\n            xCoords.push(cmd.x2);\n            yCoords.push(cmd.y2);\n        }\n    }\n    var metrics = {\n        xMin: Math.min.apply(null, xCoords),\n        yMin: Math.min.apply(null, yCoords),\n        xMax: Math.max.apply(null, xCoords),\n        yMax: Math.max.apply(null, yCoords),\n        leftSideBearing: this.leftSideBearing\n    };\n    if (!isFinite(metrics.xMin)) {\n        metrics.xMin = 0;\n    }\n    if (!isFinite(metrics.xMax)) {\n        metrics.xMax = this.advanceWidth;\n    }\n    if (!isFinite(metrics.yMin)) {\n        metrics.yMin = 0;\n    }\n    if (!isFinite(metrics.yMax)) {\n        metrics.yMax = 0;\n    }\n    metrics.rightSideBearing = this.advanceWidth - metrics.leftSideBearing - (metrics.xMax - metrics.xMin);\n    return metrics;\n};\nfunction defineDependentProperty(glyph, externalName, internalName) {\n    Object.defineProperty(glyph, externalName, {\n        get: function() {\n            glyph.path;\n            return glyph[internalName];\n        },\n        set: function(newValue) {\n            glyph[internalName] = newValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n}\nfunction GlyphSet(font, glyphs) {\n    this.font = font;\n    this.glyphs = {};\n    if (Array.isArray(glyphs)) {\n        for(var i = 0; i < glyphs.length; i++){\n            var glyph = glyphs[i];\n            glyph.path.unitsPerEm = font.unitsPerEm;\n            this.glyphs[i] = glyph;\n        }\n    }\n    this.length = glyphs && glyphs.length || 0;\n}\nGlyphSet.prototype.get = function(index) {\n    if (this.glyphs[index] === void 0) {\n        this.font._push(index);\n        if (typeof this.glyphs[index] === \"function\") {\n            this.glyphs[index] = this.glyphs[index]();\n        }\n        var glyph = this.glyphs[index];\n        var unicodeObj = this.font._IndexToUnicodeMap[index];\n        if (unicodeObj) {\n            for(var j = 0; j < unicodeObj.unicodes.length; j++){\n                glyph.addUnicode(unicodeObj.unicodes[j]);\n            }\n        }\n        this.glyphs[index].advanceWidth = this.font._hmtxTableData[index].advanceWidth;\n        this.glyphs[index].leftSideBearing = this.font._hmtxTableData[index].leftSideBearing;\n    } else {\n        if (typeof this.glyphs[index] === \"function\") {\n            this.glyphs[index] = this.glyphs[index]();\n        }\n    }\n    return this.glyphs[index];\n};\nGlyphSet.prototype.push = function(index, loader) {\n    this.glyphs[index] = loader;\n    this.length++;\n};\nfunction glyphLoader(font, index) {\n    return new Glyph({\n        index,\n        font\n    });\n}\nfunction ttfGlyphLoader(font, index, parseGlyph2, data, position, buildPath2) {\n    return function() {\n        var glyph = new Glyph({\n            index,\n            font\n        });\n        glyph.path = function() {\n            parseGlyph2(glyph, data, position);\n            var path = buildPath2(font.glyphs, glyph);\n            path.unitsPerEm = font.unitsPerEm;\n            return path;\n        };\n        defineDependentProperty(glyph, \"xMin\", \"_xMin\");\n        defineDependentProperty(glyph, \"xMax\", \"_xMax\");\n        defineDependentProperty(glyph, \"yMin\", \"_yMin\");\n        defineDependentProperty(glyph, \"yMax\", \"_yMax\");\n        return glyph;\n    };\n}\nfunction cffGlyphLoader(font, index, parseCFFCharstring2, charstring) {\n    return function() {\n        var glyph = new Glyph({\n            index,\n            font\n        });\n        glyph.path = function() {\n            var path = parseCFFCharstring2(font, glyph, charstring);\n            path.unitsPerEm = font.unitsPerEm;\n            return path;\n        };\n        return glyph;\n    };\n}\nvar glyphset = {\n    GlyphSet,\n    glyphLoader,\n    ttfGlyphLoader,\n    cffGlyphLoader\n};\nfunction searchTag(arr, tag) {\n    var imin = 0;\n    var imax = arr.length - 1;\n    while(imin <= imax){\n        var imid = imin + imax >>> 1;\n        var val = arr[imid].tag;\n        if (val === tag) {\n            return imid;\n        } else if (val < tag) {\n            imin = imid + 1;\n        } else {\n            imax = imid - 1;\n        }\n    }\n    return -imin - 1;\n}\nfunction binSearch(arr, value) {\n    var imin = 0;\n    var imax = arr.length - 1;\n    while(imin <= imax){\n        var imid = imin + imax >>> 1;\n        var val = arr[imid];\n        if (val === value) {\n            return imid;\n        } else if (val < value) {\n            imin = imid + 1;\n        } else {\n            imax = imid - 1;\n        }\n    }\n    return -imin - 1;\n}\nfunction searchRange(ranges, value) {\n    var range;\n    var imin = 0;\n    var imax = ranges.length - 1;\n    while(imin <= imax){\n        var imid = imin + imax >>> 1;\n        range = ranges[imid];\n        var start = range.start;\n        if (start === value) {\n            return range;\n        } else if (start < value) {\n            imin = imid + 1;\n        } else {\n            imax = imid - 1;\n        }\n    }\n    if (imin > 0) {\n        range = ranges[imin - 1];\n        if (value > range.end) {\n            return 0;\n        }\n        return range;\n    }\n}\nfunction Layout(font, tableName) {\n    this.font = font;\n    this.tableName = tableName;\n}\nLayout.prototype = {\n    searchTag,\n    binSearch,\n    getTable: function(create) {\n        var layout = this.font.tables[this.tableName];\n        if (!layout && create) {\n            layout = this.font.tables[this.tableName] = this.createDefaultTable();\n        }\n        return layout;\n    },\n    getDefaultScriptName: function() {\n        var layout = this.getTable();\n        if (!layout) {\n            return;\n        }\n        var hasLatn = false;\n        for(var i = 0; i < layout.scripts.length; i++){\n            var name = layout.scripts[i].tag;\n            if (name === \"DFLT\") {\n                return name;\n            }\n            if (name === \"latn\") {\n                hasLatn = true;\n            }\n        }\n        if (hasLatn) {\n            return \"latn\";\n        }\n    },\n    getScriptTable: function(script, create) {\n        var layout = this.getTable(create);\n        if (layout) {\n            script = script || \"DFLT\";\n            var scripts = layout.scripts;\n            var pos = searchTag(layout.scripts, script);\n            if (pos >= 0) {\n                return scripts[pos].script;\n            } else if (create) {\n                var scr = {\n                    tag: script,\n                    script: {\n                        defaultLangSys: {\n                            reserved: 0,\n                            reqFeatureIndex: 65535,\n                            featureIndexes: []\n                        },\n                        langSysRecords: []\n                    }\n                };\n                scripts.splice(-1 - pos, 0, scr);\n                return scr.script;\n            }\n        }\n    },\n    getLangSysTable: function(script, language, create) {\n        var scriptTable = this.getScriptTable(script, create);\n        if (scriptTable) {\n            if (!language || language === \"dflt\" || language === \"DFLT\") {\n                return scriptTable.defaultLangSys;\n            }\n            var pos = searchTag(scriptTable.langSysRecords, language);\n            if (pos >= 0) {\n                return scriptTable.langSysRecords[pos].langSys;\n            } else if (create) {\n                var langSysRecord = {\n                    tag: language,\n                    langSys: {\n                        reserved: 0,\n                        reqFeatureIndex: 65535,\n                        featureIndexes: []\n                    }\n                };\n                scriptTable.langSysRecords.splice(-1 - pos, 0, langSysRecord);\n                return langSysRecord.langSys;\n            }\n        }\n    },\n    getFeatureTable: function(script, language, feature, create) {\n        var langSysTable2 = this.getLangSysTable(script, language, create);\n        if (langSysTable2) {\n            var featureRecord;\n            var featIndexes = langSysTable2.featureIndexes;\n            var allFeatures = this.font.tables[this.tableName].features;\n            for(var i = 0; i < featIndexes.length; i++){\n                featureRecord = allFeatures[featIndexes[i]];\n                if (featureRecord.tag === feature) {\n                    return featureRecord.feature;\n                }\n            }\n            if (create) {\n                var index = allFeatures.length;\n                check.assert(index === 0 || feature >= allFeatures[index - 1].tag, \"Features must be added in alphabetical order.\");\n                featureRecord = {\n                    tag: feature,\n                    feature: {\n                        params: 0,\n                        lookupListIndexes: []\n                    }\n                };\n                allFeatures.push(featureRecord);\n                featIndexes.push(index);\n                return featureRecord.feature;\n            }\n        }\n    },\n    getLookupTables: function(script, language, feature, lookupType, create) {\n        var featureTable = this.getFeatureTable(script, language, feature, create);\n        var tables = [];\n        if (featureTable) {\n            var lookupTable;\n            var lookupListIndexes = featureTable.lookupListIndexes;\n            var allLookups = this.font.tables[this.tableName].lookups;\n            for(var i = 0; i < lookupListIndexes.length; i++){\n                lookupTable = allLookups[lookupListIndexes[i]];\n                if (lookupTable.lookupType === lookupType) {\n                    tables.push(lookupTable);\n                }\n            }\n            if (tables.length === 0 && create) {\n                lookupTable = {\n                    lookupType,\n                    lookupFlag: 0,\n                    subtables: [],\n                    markFilteringSet: void 0\n                };\n                var index = allLookups.length;\n                allLookups.push(lookupTable);\n                lookupListIndexes.push(index);\n                return [\n                    lookupTable\n                ];\n            }\n        }\n        return tables;\n    },\n    getGlyphClass: function(classDefTable, glyphIndex) {\n        switch(classDefTable.format){\n            case 1:\n                if (classDefTable.startGlyph <= glyphIndex && glyphIndex < classDefTable.startGlyph + classDefTable.classes.length) {\n                    return classDefTable.classes[glyphIndex - classDefTable.startGlyph];\n                }\n                return 0;\n            case 2:\n                var range = searchRange(classDefTable.ranges, glyphIndex);\n                return range ? range.classId : 0;\n        }\n    },\n    getCoverageIndex: function(coverageTable, glyphIndex) {\n        switch(coverageTable.format){\n            case 1:\n                var index = binSearch(coverageTable.glyphs, glyphIndex);\n                return index >= 0 ? index : -1;\n            case 2:\n                var range = searchRange(coverageTable.ranges, glyphIndex);\n                return range ? range.index + glyphIndex - range.start : -1;\n        }\n    },\n    expandCoverage: function(coverageTable) {\n        if (coverageTable.format === 1) {\n            return coverageTable.glyphs;\n        } else {\n            var glyphs = [];\n            var ranges = coverageTable.ranges;\n            for(var i = 0; i < ranges.length; i++){\n                var range = ranges[i];\n                var start = range.start;\n                var end = range.end;\n                for(var j = start; j <= end; j++){\n                    glyphs.push(j);\n                }\n            }\n            return glyphs;\n        }\n    }\n};\nfunction Position(font) {\n    Layout.call(this, font, \"gpos\");\n}\nPosition.prototype = Layout.prototype;\nPosition.prototype.init = function() {\n    var script = this.getDefaultScriptName();\n    this.defaultKerningTables = this.getKerningTables(script);\n};\nPosition.prototype.getKerningValue = function(kerningLookups, leftIndex, rightIndex) {\n    for(var i = 0; i < kerningLookups.length; i++){\n        var subtables = kerningLookups[i].subtables;\n        for(var j = 0; j < subtables.length; j++){\n            var subtable = subtables[j];\n            var covIndex = this.getCoverageIndex(subtable.coverage, leftIndex);\n            if (covIndex < 0) {\n                continue;\n            }\n            switch(subtable.posFormat){\n                case 1:\n                    var pairSet = subtable.pairSets[covIndex];\n                    for(var k = 0; k < pairSet.length; k++){\n                        var pair = pairSet[k];\n                        if (pair.secondGlyph === rightIndex) {\n                            return pair.value1 && pair.value1.xAdvance || 0;\n                        }\n                    }\n                    break;\n                case 2:\n                    var class1 = this.getGlyphClass(subtable.classDef1, leftIndex);\n                    var class2 = this.getGlyphClass(subtable.classDef2, rightIndex);\n                    var pair$1 = subtable.classRecords[class1][class2];\n                    return pair$1.value1 && pair$1.value1.xAdvance || 0;\n            }\n        }\n    }\n    return 0;\n};\nPosition.prototype.getKerningTables = function(script, language) {\n    if (this.font.tables.gpos) {\n        return this.getLookupTables(script, language, \"kern\", 2);\n    }\n};\nfunction Substitution(font) {\n    Layout.call(this, font, \"gsub\");\n}\nfunction arraysEqual(ar1, ar2) {\n    var n = ar1.length;\n    if (n !== ar2.length) {\n        return false;\n    }\n    for(var i = 0; i < n; i++){\n        if (ar1[i] !== ar2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction getSubstFormat(lookupTable, format, defaultSubtable) {\n    var subtables = lookupTable.subtables;\n    for(var i = 0; i < subtables.length; i++){\n        var subtable = subtables[i];\n        if (subtable.substFormat === format) {\n            return subtable;\n        }\n    }\n    if (defaultSubtable) {\n        subtables.push(defaultSubtable);\n        return defaultSubtable;\n    }\n    return void 0;\n}\nSubstitution.prototype = Layout.prototype;\nSubstitution.prototype.createDefaultTable = function() {\n    return {\n        version: 1,\n        scripts: [\n            {\n                tag: \"DFLT\",\n                script: {\n                    defaultLangSys: {\n                        reserved: 0,\n                        reqFeatureIndex: 65535,\n                        featureIndexes: []\n                    },\n                    langSysRecords: []\n                }\n            }\n        ],\n        features: [],\n        lookups: []\n    };\n};\nSubstitution.prototype.getSingle = function(feature, script, language) {\n    var substitutions = [];\n    var lookupTables = this.getLookupTables(script, language, feature, 1);\n    for(var idx = 0; idx < lookupTables.length; idx++){\n        var subtables = lookupTables[idx].subtables;\n        for(var i = 0; i < subtables.length; i++){\n            var subtable = subtables[i];\n            var glyphs = this.expandCoverage(subtable.coverage);\n            var j = void 0;\n            if (subtable.substFormat === 1) {\n                var delta = subtable.deltaGlyphId;\n                for(j = 0; j < glyphs.length; j++){\n                    var glyph = glyphs[j];\n                    substitutions.push({\n                        sub: glyph,\n                        by: glyph + delta\n                    });\n                }\n            } else {\n                var substitute = subtable.substitute;\n                for(j = 0; j < glyphs.length; j++){\n                    substitutions.push({\n                        sub: glyphs[j],\n                        by: substitute[j]\n                    });\n                }\n            }\n        }\n    }\n    return substitutions;\n};\nSubstitution.prototype.getMultiple = function(feature, script, language) {\n    var substitutions = [];\n    var lookupTables = this.getLookupTables(script, language, feature, 2);\n    for(var idx = 0; idx < lookupTables.length; idx++){\n        var subtables = lookupTables[idx].subtables;\n        for(var i = 0; i < subtables.length; i++){\n            var subtable = subtables[i];\n            var glyphs = this.expandCoverage(subtable.coverage);\n            var j = void 0;\n            for(j = 0; j < glyphs.length; j++){\n                var glyph = glyphs[j];\n                var replacements = subtable.sequences[j];\n                substitutions.push({\n                    sub: glyph,\n                    by: replacements\n                });\n            }\n        }\n    }\n    return substitutions;\n};\nSubstitution.prototype.getAlternates = function(feature, script, language) {\n    var alternates = [];\n    var lookupTables = this.getLookupTables(script, language, feature, 3);\n    for(var idx = 0; idx < lookupTables.length; idx++){\n        var subtables = lookupTables[idx].subtables;\n        for(var i = 0; i < subtables.length; i++){\n            var subtable = subtables[i];\n            var glyphs = this.expandCoverage(subtable.coverage);\n            var alternateSets = subtable.alternateSets;\n            for(var j = 0; j < glyphs.length; j++){\n                alternates.push({\n                    sub: glyphs[j],\n                    by: alternateSets[j]\n                });\n            }\n        }\n    }\n    return alternates;\n};\nSubstitution.prototype.getLigatures = function(feature, script, language) {\n    var ligatures = [];\n    var lookupTables = this.getLookupTables(script, language, feature, 4);\n    for(var idx = 0; idx < lookupTables.length; idx++){\n        var subtables = lookupTables[idx].subtables;\n        for(var i = 0; i < subtables.length; i++){\n            var subtable = subtables[i];\n            var glyphs = this.expandCoverage(subtable.coverage);\n            var ligatureSets = subtable.ligatureSets;\n            for(var j = 0; j < glyphs.length; j++){\n                var startGlyph = glyphs[j];\n                var ligSet = ligatureSets[j];\n                for(var k = 0; k < ligSet.length; k++){\n                    var lig = ligSet[k];\n                    ligatures.push({\n                        sub: [\n                            startGlyph\n                        ].concat(lig.components),\n                        by: lig.ligGlyph\n                    });\n                }\n            }\n        }\n    }\n    return ligatures;\n};\nSubstitution.prototype.addSingle = function(feature, substitution, script, language) {\n    var lookupTable = this.getLookupTables(script, language, feature, 1, true)[0];\n    var subtable = getSubstFormat(lookupTable, 2, {\n        substFormat: 2,\n        coverage: {\n            format: 1,\n            glyphs: []\n        },\n        substitute: []\n    });\n    check.assert(subtable.coverage.format === 1, \"Single: unable to modify coverage table format \" + subtable.coverage.format);\n    var coverageGlyph = substitution.sub;\n    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos < 0) {\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.substitute.splice(pos, 0, 0);\n    }\n    subtable.substitute[pos] = substitution.by;\n};\nSubstitution.prototype.addMultiple = function(feature, substitution, script, language) {\n    check.assert(substitution.by instanceof Array && substitution.by.length > 1, 'Multiple: \"by\" must be an array of two or more ids');\n    var lookupTable = this.getLookupTables(script, language, feature, 2, true)[0];\n    var subtable = getSubstFormat(lookupTable, 1, {\n        substFormat: 1,\n        coverage: {\n            format: 1,\n            glyphs: []\n        },\n        sequences: []\n    });\n    check.assert(subtable.coverage.format === 1, \"Multiple: unable to modify coverage table format \" + subtable.coverage.format);\n    var coverageGlyph = substitution.sub;\n    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos < 0) {\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.sequences.splice(pos, 0, 0);\n    }\n    subtable.sequences[pos] = substitution.by;\n};\nSubstitution.prototype.addAlternate = function(feature, substitution, script, language) {\n    var lookupTable = this.getLookupTables(script, language, feature, 3, true)[0];\n    var subtable = getSubstFormat(lookupTable, 1, {\n        substFormat: 1,\n        coverage: {\n            format: 1,\n            glyphs: []\n        },\n        alternateSets: []\n    });\n    check.assert(subtable.coverage.format === 1, \"Alternate: unable to modify coverage table format \" + subtable.coverage.format);\n    var coverageGlyph = substitution.sub;\n    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos < 0) {\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.alternateSets.splice(pos, 0, 0);\n    }\n    subtable.alternateSets[pos] = substitution.by;\n};\nSubstitution.prototype.addLigature = function(feature, ligature, script, language) {\n    var lookupTable = this.getLookupTables(script, language, feature, 4, true)[0];\n    var subtable = lookupTable.subtables[0];\n    if (!subtable) {\n        subtable = {\n            substFormat: 1,\n            coverage: {\n                format: 1,\n                glyphs: []\n            },\n            ligatureSets: []\n        };\n        lookupTable.subtables[0] = subtable;\n    }\n    check.assert(subtable.coverage.format === 1, \"Ligature: unable to modify coverage table format \" + subtable.coverage.format);\n    var coverageGlyph = ligature.sub[0];\n    var ligComponents = ligature.sub.slice(1);\n    var ligatureTable = {\n        ligGlyph: ligature.by,\n        components: ligComponents\n    };\n    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos >= 0) {\n        var ligatureSet = subtable.ligatureSets[pos];\n        for(var i = 0; i < ligatureSet.length; i++){\n            if (arraysEqual(ligatureSet[i].components, ligComponents)) {\n                return;\n            }\n        }\n        ligatureSet.push(ligatureTable);\n    } else {\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.ligatureSets.splice(pos, 0, [\n            ligatureTable\n        ]);\n    }\n};\nSubstitution.prototype.getFeature = function(feature, script, language) {\n    if (/ss\\d\\d/.test(feature)) {\n        return this.getSingle(feature, script, language);\n    }\n    switch(feature){\n        case \"aalt\":\n        case \"salt\":\n            return this.getSingle(feature, script, language).concat(this.getAlternates(feature, script, language));\n        case \"dlig\":\n        case \"liga\":\n        case \"rlig\":\n            return this.getLigatures(feature, script, language);\n        case \"ccmp\":\n            return this.getMultiple(feature, script, language).concat(this.getLigatures(feature, script, language));\n        case \"stch\":\n            return this.getMultiple(feature, script, language);\n    }\n    return void 0;\n};\nSubstitution.prototype.add = function(feature, sub, script, language) {\n    if (/ss\\d\\d/.test(feature)) {\n        return this.addSingle(feature, sub, script, language);\n    }\n    switch(feature){\n        case \"aalt\":\n        case \"salt\":\n            if (typeof sub.by === \"number\") {\n                return this.addSingle(feature, sub, script, language);\n            }\n            return this.addAlternate(feature, sub, script, language);\n        case \"dlig\":\n        case \"liga\":\n        case \"rlig\":\n            return this.addLigature(feature, sub, script, language);\n        case \"ccmp\":\n            if (sub.by instanceof Array) {\n                return this.addMultiple(feature, sub, script, language);\n            }\n            return this.addLigature(feature, sub, script, language);\n    }\n    return void 0;\n};\nfunction checkArgument(expression, message) {\n    if (!expression) {\n        throw message;\n    }\n}\nfunction getByte(dataView, offset) {\n    return dataView.getUint8(offset);\n}\nfunction getUShort(dataView, offset) {\n    return dataView.getUint16(offset, false);\n}\nfunction getShort(dataView, offset) {\n    return dataView.getInt16(offset, false);\n}\nfunction getULong(dataView, offset) {\n    return dataView.getUint32(offset, false);\n}\nfunction getFixed(dataView, offset) {\n    var decimal = dataView.getInt16(offset, false);\n    var fraction = dataView.getUint16(offset + 2, false);\n    return decimal + fraction / 65535;\n}\nfunction getTag(dataView, offset) {\n    var tag = \"\";\n    for(var i = offset; i < offset + 4; i += 1){\n        tag += String.fromCharCode(dataView.getInt8(i));\n    }\n    return tag;\n}\nfunction getOffset(dataView, offset, offSize) {\n    var v = 0;\n    for(var i = 0; i < offSize; i += 1){\n        v <<= 8;\n        v += dataView.getUint8(offset + i);\n    }\n    return v;\n}\nfunction getBytes(dataView, startOffset, endOffset) {\n    var bytes = [];\n    for(var i = startOffset; i < endOffset; i += 1){\n        bytes.push(dataView.getUint8(i));\n    }\n    return bytes;\n}\nfunction bytesToString(bytes) {\n    var s = \"\";\n    for(var i = 0; i < bytes.length; i += 1){\n        s += String.fromCharCode(bytes[i]);\n    }\n    return s;\n}\nvar typeOffsets = {\n    byte: 1,\n    uShort: 2,\n    short: 2,\n    uLong: 4,\n    fixed: 4,\n    longDateTime: 8,\n    tag: 4\n};\nfunction Parser(data, offset) {\n    this.data = data;\n    this.offset = offset;\n    this.relativeOffset = 0;\n}\nParser.prototype.parseByte = function() {\n    var v = this.data.getUint8(this.offset + this.relativeOffset);\n    this.relativeOffset += 1;\n    return v;\n};\nParser.prototype.parseChar = function() {\n    var v = this.data.getInt8(this.offset + this.relativeOffset);\n    this.relativeOffset += 1;\n    return v;\n};\nParser.prototype.parseCard8 = Parser.prototype.parseByte;\nParser.prototype.parseUShort = function() {\n    var v = this.data.getUint16(this.offset + this.relativeOffset);\n    this.relativeOffset += 2;\n    return v;\n};\nParser.prototype.parseCard16 = Parser.prototype.parseUShort;\nParser.prototype.parseSID = Parser.prototype.parseUShort;\nParser.prototype.parseOffset16 = Parser.prototype.parseUShort;\nParser.prototype.parseShort = function() {\n    var v = this.data.getInt16(this.offset + this.relativeOffset);\n    this.relativeOffset += 2;\n    return v;\n};\nParser.prototype.parseF2Dot14 = function() {\n    var v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;\n    this.relativeOffset += 2;\n    return v;\n};\nParser.prototype.parseULong = function() {\n    var v = getULong(this.data, this.offset + this.relativeOffset);\n    this.relativeOffset += 4;\n    return v;\n};\nParser.prototype.parseOffset32 = Parser.prototype.parseULong;\nParser.prototype.parseFixed = function() {\n    var v = getFixed(this.data, this.offset + this.relativeOffset);\n    this.relativeOffset += 4;\n    return v;\n};\nParser.prototype.parseString = function(length) {\n    var dataView = this.data;\n    var offset = this.offset + this.relativeOffset;\n    var string = \"\";\n    this.relativeOffset += length;\n    for(var i = 0; i < length; i++){\n        string += String.fromCharCode(dataView.getUint8(offset + i));\n    }\n    return string;\n};\nParser.prototype.parseTag = function() {\n    return this.parseString(4);\n};\nParser.prototype.parseLongDateTime = function() {\n    var v = getULong(this.data, this.offset + this.relativeOffset + 4);\n    v -= 2082844800;\n    this.relativeOffset += 8;\n    return v;\n};\nParser.prototype.parseVersion = function(minorBase) {\n    var major = getUShort(this.data, this.offset + this.relativeOffset);\n    var minor = getUShort(this.data, this.offset + this.relativeOffset + 2);\n    this.relativeOffset += 4;\n    if (minorBase === void 0) {\n        minorBase = 4096;\n    }\n    return major + minor / minorBase / 10;\n};\nParser.prototype.skip = function(type, amount) {\n    if (amount === void 0) {\n        amount = 1;\n    }\n    this.relativeOffset += typeOffsets[type] * amount;\n};\nParser.prototype.parseULongList = function(count) {\n    if (count === void 0) {\n        count = this.parseULong();\n    }\n    var offsets = new Array(count);\n    var dataView = this.data;\n    var offset = this.offset + this.relativeOffset;\n    for(var i = 0; i < count; i++){\n        offsets[i] = dataView.getUint32(offset);\n        offset += 4;\n    }\n    this.relativeOffset += count * 4;\n    return offsets;\n};\nParser.prototype.parseOffset16List = Parser.prototype.parseUShortList = function(count) {\n    if (count === void 0) {\n        count = this.parseUShort();\n    }\n    var offsets = new Array(count);\n    var dataView = this.data;\n    var offset = this.offset + this.relativeOffset;\n    for(var i = 0; i < count; i++){\n        offsets[i] = dataView.getUint16(offset);\n        offset += 2;\n    }\n    this.relativeOffset += count * 2;\n    return offsets;\n};\nParser.prototype.parseShortList = function(count) {\n    var list = new Array(count);\n    var dataView = this.data;\n    var offset = this.offset + this.relativeOffset;\n    for(var i = 0; i < count; i++){\n        list[i] = dataView.getInt16(offset);\n        offset += 2;\n    }\n    this.relativeOffset += count * 2;\n    return list;\n};\nParser.prototype.parseByteList = function(count) {\n    var list = new Array(count);\n    var dataView = this.data;\n    var offset = this.offset + this.relativeOffset;\n    for(var i = 0; i < count; i++){\n        list[i] = dataView.getUint8(offset++);\n    }\n    this.relativeOffset += count;\n    return list;\n};\nParser.prototype.parseList = function(count, itemCallback) {\n    if (!itemCallback) {\n        itemCallback = count;\n        count = this.parseUShort();\n    }\n    var list = new Array(count);\n    for(var i = 0; i < count; i++){\n        list[i] = itemCallback.call(this);\n    }\n    return list;\n};\nParser.prototype.parseList32 = function(count, itemCallback) {\n    if (!itemCallback) {\n        itemCallback = count;\n        count = this.parseULong();\n    }\n    var list = new Array(count);\n    for(var i = 0; i < count; i++){\n        list[i] = itemCallback.call(this);\n    }\n    return list;\n};\nParser.prototype.parseRecordList = function(count, recordDescription) {\n    if (!recordDescription) {\n        recordDescription = count;\n        count = this.parseUShort();\n    }\n    var records = new Array(count);\n    var fields = Object.keys(recordDescription);\n    for(var i = 0; i < count; i++){\n        var rec = {};\n        for(var j = 0; j < fields.length; j++){\n            var fieldName = fields[j];\n            var fieldType = recordDescription[fieldName];\n            rec[fieldName] = fieldType.call(this);\n        }\n        records[i] = rec;\n    }\n    return records;\n};\nParser.prototype.parseRecordList32 = function(count, recordDescription) {\n    if (!recordDescription) {\n        recordDescription = count;\n        count = this.parseULong();\n    }\n    var records = new Array(count);\n    var fields = Object.keys(recordDescription);\n    for(var i = 0; i < count; i++){\n        var rec = {};\n        for(var j = 0; j < fields.length; j++){\n            var fieldName = fields[j];\n            var fieldType = recordDescription[fieldName];\n            rec[fieldName] = fieldType.call(this);\n        }\n        records[i] = rec;\n    }\n    return records;\n};\nParser.prototype.parseStruct = function(description) {\n    if (typeof description === \"function\") {\n        return description.call(this);\n    } else {\n        var fields = Object.keys(description);\n        var struct = {};\n        for(var j = 0; j < fields.length; j++){\n            var fieldName = fields[j];\n            var fieldType = description[fieldName];\n            struct[fieldName] = fieldType.call(this);\n        }\n        return struct;\n    }\n};\nParser.prototype.parseValueRecord = function(valueFormat) {\n    if (valueFormat === void 0) {\n        valueFormat = this.parseUShort();\n    }\n    if (valueFormat === 0) {\n        return;\n    }\n    var valueRecord = {};\n    if (valueFormat & 1) {\n        valueRecord.xPlacement = this.parseShort();\n    }\n    if (valueFormat & 2) {\n        valueRecord.yPlacement = this.parseShort();\n    }\n    if (valueFormat & 4) {\n        valueRecord.xAdvance = this.parseShort();\n    }\n    if (valueFormat & 8) {\n        valueRecord.yAdvance = this.parseShort();\n    }\n    if (valueFormat & 16) {\n        valueRecord.xPlaDevice = void 0;\n        this.parseShort();\n    }\n    if (valueFormat & 32) {\n        valueRecord.yPlaDevice = void 0;\n        this.parseShort();\n    }\n    if (valueFormat & 64) {\n        valueRecord.xAdvDevice = void 0;\n        this.parseShort();\n    }\n    if (valueFormat & 128) {\n        valueRecord.yAdvDevice = void 0;\n        this.parseShort();\n    }\n    return valueRecord;\n};\nParser.prototype.parseValueRecordList = function() {\n    var valueFormat = this.parseUShort();\n    var valueCount = this.parseUShort();\n    var values = new Array(valueCount);\n    for(var i = 0; i < valueCount; i++){\n        values[i] = this.parseValueRecord(valueFormat);\n    }\n    return values;\n};\nParser.prototype.parsePointer = function(description) {\n    var structOffset = this.parseOffset16();\n    if (structOffset > 0) {\n        return new Parser(this.data, this.offset + structOffset).parseStruct(description);\n    }\n    return void 0;\n};\nParser.prototype.parsePointer32 = function(description) {\n    var structOffset = this.parseOffset32();\n    if (structOffset > 0) {\n        return new Parser(this.data, this.offset + structOffset).parseStruct(description);\n    }\n    return void 0;\n};\nParser.prototype.parseListOfLists = function(itemCallback) {\n    var offsets = this.parseOffset16List();\n    var count = offsets.length;\n    var relativeOffset = this.relativeOffset;\n    var list = new Array(count);\n    for(var i = 0; i < count; i++){\n        var start = offsets[i];\n        if (start === 0) {\n            list[i] = void 0;\n            continue;\n        }\n        this.relativeOffset = start;\n        if (itemCallback) {\n            var subOffsets = this.parseOffset16List();\n            var subList = new Array(subOffsets.length);\n            for(var j = 0; j < subOffsets.length; j++){\n                this.relativeOffset = start + subOffsets[j];\n                subList[j] = itemCallback.call(this);\n            }\n            list[i] = subList;\n        } else {\n            list[i] = this.parseUShortList();\n        }\n    }\n    this.relativeOffset = relativeOffset;\n    return list;\n};\nParser.prototype.parseCoverage = function() {\n    var startOffset = this.offset + this.relativeOffset;\n    var format = this.parseUShort();\n    var count = this.parseUShort();\n    if (format === 1) {\n        return {\n            format: 1,\n            glyphs: this.parseUShortList(count)\n        };\n    } else if (format === 2) {\n        var ranges = new Array(count);\n        for(var i = 0; i < count; i++){\n            ranges[i] = {\n                start: this.parseUShort(),\n                end: this.parseUShort(),\n                index: this.parseUShort()\n            };\n        }\n        return {\n            format: 2,\n            ranges\n        };\n    }\n    throw new Error(\"0x\" + startOffset.toString(16) + \": Coverage format must be 1 or 2.\");\n};\nParser.prototype.parseClassDef = function() {\n    var startOffset = this.offset + this.relativeOffset;\n    var format = this.parseUShort();\n    if (format === 1) {\n        return {\n            format: 1,\n            startGlyph: this.parseUShort(),\n            classes: this.parseUShortList()\n        };\n    } else if (format === 2) {\n        return {\n            format: 2,\n            ranges: this.parseRecordList({\n                start: Parser.uShort,\n                end: Parser.uShort,\n                classId: Parser.uShort\n            })\n        };\n    }\n    throw new Error(\"0x\" + startOffset.toString(16) + \": ClassDef format must be 1 or 2.\");\n};\nParser.list = function(count, itemCallback) {\n    return function() {\n        return this.parseList(count, itemCallback);\n    };\n};\nParser.list32 = function(count, itemCallback) {\n    return function() {\n        return this.parseList32(count, itemCallback);\n    };\n};\nParser.recordList = function(count, recordDescription) {\n    return function() {\n        return this.parseRecordList(count, recordDescription);\n    };\n};\nParser.recordList32 = function(count, recordDescription) {\n    return function() {\n        return this.parseRecordList32(count, recordDescription);\n    };\n};\nParser.pointer = function(description) {\n    return function() {\n        return this.parsePointer(description);\n    };\n};\nParser.pointer32 = function(description) {\n    return function() {\n        return this.parsePointer32(description);\n    };\n};\nParser.tag = Parser.prototype.parseTag;\nParser.byte = Parser.prototype.parseByte;\nParser.uShort = Parser.offset16 = Parser.prototype.parseUShort;\nParser.uShortList = Parser.prototype.parseUShortList;\nParser.uLong = Parser.offset32 = Parser.prototype.parseULong;\nParser.uLongList = Parser.prototype.parseULongList;\nParser.struct = Parser.prototype.parseStruct;\nParser.coverage = Parser.prototype.parseCoverage;\nParser.classDef = Parser.prototype.parseClassDef;\nvar langSysTable = {\n    reserved: Parser.uShort,\n    reqFeatureIndex: Parser.uShort,\n    featureIndexes: Parser.uShortList\n};\nParser.prototype.parseScriptList = function() {\n    return this.parsePointer(Parser.recordList({\n        tag: Parser.tag,\n        script: Parser.pointer({\n            defaultLangSys: Parser.pointer(langSysTable),\n            langSysRecords: Parser.recordList({\n                tag: Parser.tag,\n                langSys: Parser.pointer(langSysTable)\n            })\n        })\n    })) || [];\n};\nParser.prototype.parseFeatureList = function() {\n    return this.parsePointer(Parser.recordList({\n        tag: Parser.tag,\n        feature: Parser.pointer({\n            featureParams: Parser.offset16,\n            lookupListIndexes: Parser.uShortList\n        })\n    })) || [];\n};\nParser.prototype.parseLookupList = function(lookupTableParsers) {\n    return this.parsePointer(Parser.list(Parser.pointer(function() {\n        var lookupType = this.parseUShort();\n        check.argument(1 <= lookupType && lookupType <= 9, \"GPOS/GSUB lookup type \" + lookupType + \" unknown.\");\n        var lookupFlag = this.parseUShort();\n        var useMarkFilteringSet = lookupFlag & 16;\n        return {\n            lookupType,\n            lookupFlag,\n            subtables: this.parseList(Parser.pointer(lookupTableParsers[lookupType])),\n            markFilteringSet: useMarkFilteringSet ? this.parseUShort() : void 0\n        };\n    }))) || [];\n};\nParser.prototype.parseFeatureVariationsList = function() {\n    return this.parsePointer32(function() {\n        var majorVersion = this.parseUShort();\n        var minorVersion = this.parseUShort();\n        check.argument(majorVersion === 1 && minorVersion < 1, \"GPOS/GSUB feature variations table unknown.\");\n        var featureVariations = this.parseRecordList32({\n            conditionSetOffset: Parser.offset32,\n            featureTableSubstitutionOffset: Parser.offset32\n        });\n        return featureVariations;\n    }) || [];\n};\nvar parse = {\n    getByte,\n    getCard8: getByte,\n    getUShort,\n    getCard16: getUShort,\n    getShort,\n    getULong,\n    getFixed,\n    getTag,\n    getOffset,\n    getBytes,\n    bytesToString,\n    Parser\n};\nfunction parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {\n    var v;\n    if ((flag & shortVectorBitMask) > 0) {\n        v = p.parseByte();\n        if ((flag & sameBitMask) === 0) {\n            v = -v;\n        }\n        v = previousValue + v;\n    } else {\n        if ((flag & sameBitMask) > 0) {\n            v = previousValue;\n        } else {\n            v = previousValue + p.parseShort();\n        }\n    }\n    return v;\n}\nfunction parseGlyph(glyph, data, start) {\n    var p = new parse.Parser(data, start);\n    glyph.numberOfContours = p.parseShort();\n    glyph._xMin = p.parseShort();\n    glyph._yMin = p.parseShort();\n    glyph._xMax = p.parseShort();\n    glyph._yMax = p.parseShort();\n    var flags;\n    var flag;\n    if (glyph.numberOfContours > 0) {\n        var endPointIndices = glyph.endPointIndices = [];\n        for(var i = 0; i < glyph.numberOfContours; i += 1){\n            endPointIndices.push(p.parseUShort());\n        }\n        glyph.instructionLength = p.parseUShort();\n        glyph.instructions = [];\n        for(var i$1 = 0; i$1 < glyph.instructionLength; i$1 += 1){\n            glyph.instructions.push(p.parseByte());\n        }\n        var numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;\n        flags = [];\n        for(var i$2 = 0; i$2 < numberOfCoordinates; i$2 += 1){\n            flag = p.parseByte();\n            flags.push(flag);\n            if ((flag & 8) > 0) {\n                var repeatCount = p.parseByte();\n                for(var j = 0; j < repeatCount; j += 1){\n                    flags.push(flag);\n                    i$2 += 1;\n                }\n            }\n        }\n        check.argument(flags.length === numberOfCoordinates, \"Bad flags.\");\n        if (endPointIndices.length > 0) {\n            var points = [];\n            var point;\n            if (numberOfCoordinates > 0) {\n                for(var i$3 = 0; i$3 < numberOfCoordinates; i$3 += 1){\n                    flag = flags[i$3];\n                    point = {};\n                    point.onCurve = !!(flag & 1);\n                    point.lastPointOfContour = endPointIndices.indexOf(i$3) >= 0;\n                    points.push(point);\n                }\n                var px = 0;\n                for(var i$4 = 0; i$4 < numberOfCoordinates; i$4 += 1){\n                    flag = flags[i$4];\n                    point = points[i$4];\n                    point.x = parseGlyphCoordinate(p, flag, px, 2, 16);\n                    px = point.x;\n                }\n                var py = 0;\n                for(var i$5 = 0; i$5 < numberOfCoordinates; i$5 += 1){\n                    flag = flags[i$5];\n                    point = points[i$5];\n                    point.y = parseGlyphCoordinate(p, flag, py, 4, 32);\n                    py = point.y;\n                }\n            }\n            glyph.points = points;\n        } else {\n            glyph.points = [];\n        }\n    } else if (glyph.numberOfContours === 0) {\n        glyph.points = [];\n    } else {\n        glyph.isComposite = true;\n        glyph.points = [];\n        glyph.components = [];\n        var moreComponents = true;\n        while(moreComponents){\n            flags = p.parseUShort();\n            var component = {\n                glyphIndex: p.parseUShort(),\n                xScale: 1,\n                scale01: 0,\n                scale10: 0,\n                yScale: 1,\n                dx: 0,\n                dy: 0\n            };\n            if ((flags & 1) > 0) {\n                if ((flags & 2) > 0) {\n                    component.dx = p.parseShort();\n                    component.dy = p.parseShort();\n                } else {\n                    component.matchedPoints = [\n                        p.parseUShort(),\n                        p.parseUShort()\n                    ];\n                }\n            } else {\n                if ((flags & 2) > 0) {\n                    component.dx = p.parseChar();\n                    component.dy = p.parseChar();\n                } else {\n                    component.matchedPoints = [\n                        p.parseByte(),\n                        p.parseByte()\n                    ];\n                }\n            }\n            if ((flags & 8) > 0) {\n                component.xScale = component.yScale = p.parseF2Dot14();\n            } else if ((flags & 64) > 0) {\n                component.xScale = p.parseF2Dot14();\n                component.yScale = p.parseF2Dot14();\n            } else if ((flags & 128) > 0) {\n                component.xScale = p.parseF2Dot14();\n                component.scale01 = p.parseF2Dot14();\n                component.scale10 = p.parseF2Dot14();\n                component.yScale = p.parseF2Dot14();\n            }\n            glyph.components.push(component);\n            moreComponents = !!(flags & 32);\n        }\n        if (flags & 256) {\n            glyph.instructionLength = p.parseUShort();\n            glyph.instructions = [];\n            for(var i$6 = 0; i$6 < glyph.instructionLength; i$6 += 1){\n                glyph.instructions.push(p.parseByte());\n            }\n        }\n    }\n}\nfunction transformPoints(points, transform) {\n    var newPoints = [];\n    for(var i = 0; i < points.length; i += 1){\n        var pt = points[i];\n        var newPt = {\n            x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,\n            y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,\n            onCurve: pt.onCurve,\n            lastPointOfContour: pt.lastPointOfContour\n        };\n        newPoints.push(newPt);\n    }\n    return newPoints;\n}\nfunction getContours(points) {\n    var contours = [];\n    var currentContour = [];\n    for(var i = 0; i < points.length; i += 1){\n        var pt = points[i];\n        currentContour.push(pt);\n        if (pt.lastPointOfContour) {\n            contours.push(currentContour);\n            currentContour = [];\n        }\n    }\n    check.argument(currentContour.length === 0, \"There are still points left in the current contour.\");\n    return contours;\n}\nfunction getPath(points) {\n    var p = new Path();\n    if (!points) {\n        return p;\n    }\n    var contours = getContours(points);\n    for(var contourIndex = 0; contourIndex < contours.length; ++contourIndex){\n        var contour = contours[contourIndex];\n        var prev = null;\n        var curr = contour[contour.length - 1];\n        var next = contour[0];\n        if (curr.onCurve) {\n            p.moveTo(curr.x, curr.y);\n        } else {\n            if (next.onCurve) {\n                p.moveTo(next.x, next.y);\n            } else {\n                var start = {\n                    x: (curr.x + next.x) * 0.5,\n                    y: (curr.y + next.y) * 0.5\n                };\n                p.moveTo(start.x, start.y);\n            }\n        }\n        for(var i = 0; i < contour.length; ++i){\n            prev = curr;\n            curr = next;\n            next = contour[(i + 1) % contour.length];\n            if (curr.onCurve) {\n                p.lineTo(curr.x, curr.y);\n            } else {\n                var prev2 = prev;\n                var next2 = next;\n                if (!prev.onCurve) {\n                    prev2 = {\n                        x: (curr.x + prev.x) * 0.5,\n                        y: (curr.y + prev.y) * 0.5\n                    };\n                }\n                if (!next.onCurve) {\n                    next2 = {\n                        x: (curr.x + next.x) * 0.5,\n                        y: (curr.y + next.y) * 0.5\n                    };\n                }\n                p.quadraticCurveTo(curr.x, curr.y, next2.x, next2.y);\n            }\n        }\n        p.closePath();\n    }\n    return p;\n}\nfunction buildPath(glyphs, glyph) {\n    if (glyph.isComposite) {\n        for(var j = 0; j < glyph.components.length; j += 1){\n            var component = glyph.components[j];\n            var componentGlyph = glyphs.get(component.glyphIndex);\n            componentGlyph.getPath();\n            if (componentGlyph.points) {\n                var transformedPoints = void 0;\n                if (component.matchedPoints === void 0) {\n                    transformedPoints = transformPoints(componentGlyph.points, component);\n                } else {\n                    if (component.matchedPoints[0] > glyph.points.length - 1 || component.matchedPoints[1] > componentGlyph.points.length - 1) {\n                        throw Error(\"Matched points out of range in \" + glyph.name);\n                    }\n                    var firstPt = glyph.points[component.matchedPoints[0]];\n                    var secondPt = componentGlyph.points[component.matchedPoints[1]];\n                    var transform = {\n                        xScale: component.xScale,\n                        scale01: component.scale01,\n                        scale10: component.scale10,\n                        yScale: component.yScale,\n                        dx: 0,\n                        dy: 0\n                    };\n                    secondPt = transformPoints([\n                        secondPt\n                    ], transform)[0];\n                    transform.dx = firstPt.x - secondPt.x;\n                    transform.dy = firstPt.y - secondPt.y;\n                    transformedPoints = transformPoints(componentGlyph.points, transform);\n                }\n                glyph.points = glyph.points.concat(transformedPoints);\n            }\n        }\n    }\n    return getPath(glyph.points);\n}\nfunction parseGlyfTableAll(data, start, loca2, font) {\n    var glyphs = new glyphset.GlyphSet(font);\n    for(var i = 0; i < loca2.length - 1; i += 1){\n        var offset = loca2[i];\n        var nextOffset = loca2[i + 1];\n        if (offset !== nextOffset) {\n            glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));\n        } else {\n            glyphs.push(i, glyphset.glyphLoader(font, i));\n        }\n    }\n    return glyphs;\n}\nfunction parseGlyfTableOnLowMemory(data, start, loca2, font) {\n    var glyphs = new glyphset.GlyphSet(font);\n    font._push = function(i) {\n        var offset = loca2[i];\n        var nextOffset = loca2[i + 1];\n        if (offset !== nextOffset) {\n            glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));\n        } else {\n            glyphs.push(i, glyphset.glyphLoader(font, i));\n        }\n    };\n    return glyphs;\n}\nfunction parseGlyfTable(data, start, loca2, font, opt) {\n    if (opt.lowMemory) {\n        return parseGlyfTableOnLowMemory(data, start, loca2, font);\n    } else {\n        return parseGlyfTableAll(data, start, loca2, font);\n    }\n}\nvar glyf = {\n    getPath,\n    parse: parseGlyfTable\n};\nvar instructionTable;\nvar exec;\nvar execGlyph;\nvar execComponent;\nfunction Hinting(font) {\n    this.font = font;\n    this.getCommands = function(hPoints) {\n        return glyf.getPath(hPoints).commands;\n    };\n    this._fpgmState = this._prepState = void 0;\n    this._errorState = 0;\n}\nfunction roundOff(v) {\n    return v;\n}\nfunction roundToGrid(v) {\n    return Math.sign(v) * Math.round(Math.abs(v));\n}\nfunction roundToDoubleGrid(v) {\n    return Math.sign(v) * Math.round(Math.abs(v * 2)) / 2;\n}\nfunction roundToHalfGrid(v) {\n    return Math.sign(v) * (Math.round(Math.abs(v) + 0.5) - 0.5);\n}\nfunction roundUpToGrid(v) {\n    return Math.sign(v) * Math.ceil(Math.abs(v));\n}\nfunction roundDownToGrid(v) {\n    return Math.sign(v) * Math.floor(Math.abs(v));\n}\nvar roundSuper = function(v) {\n    var period = this.srPeriod;\n    var phase = this.srPhase;\n    var threshold = this.srThreshold;\n    var sign = 1;\n    if (v < 0) {\n        v = -v;\n        sign = -1;\n    }\n    v += threshold - phase;\n    v = Math.trunc(v / period) * period;\n    v += phase;\n    if (v < 0) {\n        return phase * sign;\n    }\n    return v * sign;\n};\nvar xUnitVector = {\n    x: 1,\n    y: 0,\n    axis: \"x\",\n    distance: function(p1, p2, o1, o2) {\n        return (o1 ? p1.xo : p1.x) - (o2 ? p2.xo : p2.x);\n    },\n    interpolate: function(p, rp1, rp2, pv) {\n        var do1;\n        var do2;\n        var doa1;\n        var doa2;\n        var dm1;\n        var dm2;\n        var dt2;\n        if (!pv || pv === this) {\n            do1 = p.xo - rp1.xo;\n            do2 = p.xo - rp2.xo;\n            dm1 = rp1.x - rp1.xo;\n            dm2 = rp2.x - rp2.xo;\n            doa1 = Math.abs(do1);\n            doa2 = Math.abs(do2);\n            dt2 = doa1 + doa2;\n            if (dt2 === 0) {\n                p.x = p.xo + (dm1 + dm2) / 2;\n                return;\n            }\n            p.x = p.xo + (dm1 * doa2 + dm2 * doa1) / dt2;\n            return;\n        }\n        do1 = pv.distance(p, rp1, true, true);\n        do2 = pv.distance(p, rp2, true, true);\n        dm1 = pv.distance(rp1, rp1, false, true);\n        dm2 = pv.distance(rp2, rp2, false, true);\n        doa1 = Math.abs(do1);\n        doa2 = Math.abs(do2);\n        dt2 = doa1 + doa2;\n        if (dt2 === 0) {\n            xUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n            return;\n        }\n        xUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt2, pv, true);\n    },\n    normalSlope: Number.NEGATIVE_INFINITY,\n    setRelative: function(p, rp, d, pv, org) {\n        if (!pv || pv === this) {\n            p.x = (org ? rp.xo : rp.x) + d;\n            return;\n        }\n        var rpx = org ? rp.xo : rp.x;\n        var rpy = org ? rp.yo : rp.y;\n        var rpdx = rpx + d * pv.x;\n        var rpdy = rpy + d * pv.y;\n        p.x = rpdx + (p.y - rpdy) / pv.normalSlope;\n    },\n    slope: 0,\n    touch: function(p) {\n        p.xTouched = true;\n    },\n    touched: function(p) {\n        return p.xTouched;\n    },\n    untouch: function(p) {\n        p.xTouched = false;\n    }\n};\nvar yUnitVector = {\n    x: 0,\n    y: 1,\n    axis: \"y\",\n    distance: function(p1, p2, o1, o2) {\n        return (o1 ? p1.yo : p1.y) - (o2 ? p2.yo : p2.y);\n    },\n    interpolate: function(p, rp1, rp2, pv) {\n        var do1;\n        var do2;\n        var doa1;\n        var doa2;\n        var dm1;\n        var dm2;\n        var dt2;\n        if (!pv || pv === this) {\n            do1 = p.yo - rp1.yo;\n            do2 = p.yo - rp2.yo;\n            dm1 = rp1.y - rp1.yo;\n            dm2 = rp2.y - rp2.yo;\n            doa1 = Math.abs(do1);\n            doa2 = Math.abs(do2);\n            dt2 = doa1 + doa2;\n            if (dt2 === 0) {\n                p.y = p.yo + (dm1 + dm2) / 2;\n                return;\n            }\n            p.y = p.yo + (dm1 * doa2 + dm2 * doa1) / dt2;\n            return;\n        }\n        do1 = pv.distance(p, rp1, true, true);\n        do2 = pv.distance(p, rp2, true, true);\n        dm1 = pv.distance(rp1, rp1, false, true);\n        dm2 = pv.distance(rp2, rp2, false, true);\n        doa1 = Math.abs(do1);\n        doa2 = Math.abs(do2);\n        dt2 = doa1 + doa2;\n        if (dt2 === 0) {\n            yUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n            return;\n        }\n        yUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt2, pv, true);\n    },\n    normalSlope: 0,\n    setRelative: function(p, rp, d, pv, org) {\n        if (!pv || pv === this) {\n            p.y = (org ? rp.yo : rp.y) + d;\n            return;\n        }\n        var rpx = org ? rp.xo : rp.x;\n        var rpy = org ? rp.yo : rp.y;\n        var rpdx = rpx + d * pv.x;\n        var rpdy = rpy + d * pv.y;\n        p.y = rpdy + pv.normalSlope * (p.x - rpdx);\n    },\n    slope: Number.POSITIVE_INFINITY,\n    touch: function(p) {\n        p.yTouched = true;\n    },\n    touched: function(p) {\n        return p.yTouched;\n    },\n    untouch: function(p) {\n        p.yTouched = false;\n    }\n};\nObject.freeze(xUnitVector);\nObject.freeze(yUnitVector);\nfunction UnitVector(x, y) {\n    this.x = x;\n    this.y = y;\n    this.axis = void 0;\n    this.slope = y / x;\n    this.normalSlope = -x / y;\n    Object.freeze(this);\n}\nUnitVector.prototype.distance = function(p1, p2, o1, o2) {\n    return this.x * xUnitVector.distance(p1, p2, o1, o2) + this.y * yUnitVector.distance(p1, p2, o1, o2);\n};\nUnitVector.prototype.interpolate = function(p, rp1, rp2, pv) {\n    var dm1;\n    var dm2;\n    var do1;\n    var do2;\n    var doa1;\n    var doa2;\n    var dt2;\n    do1 = pv.distance(p, rp1, true, true);\n    do2 = pv.distance(p, rp2, true, true);\n    dm1 = pv.distance(rp1, rp1, false, true);\n    dm2 = pv.distance(rp2, rp2, false, true);\n    doa1 = Math.abs(do1);\n    doa2 = Math.abs(do2);\n    dt2 = doa1 + doa2;\n    if (dt2 === 0) {\n        this.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n        return;\n    }\n    this.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt2, pv, true);\n};\nUnitVector.prototype.setRelative = function(p, rp, d, pv, org) {\n    pv = pv || this;\n    var rpx = org ? rp.xo : rp.x;\n    var rpy = org ? rp.yo : rp.y;\n    var rpdx = rpx + d * pv.x;\n    var rpdy = rpy + d * pv.y;\n    var pvns = pv.normalSlope;\n    var fvs = this.slope;\n    var px = p.x;\n    var py = p.y;\n    p.x = (fvs * px - pvns * rpdx + rpdy - py) / (fvs - pvns);\n    p.y = fvs * (p.x - px) + py;\n};\nUnitVector.prototype.touch = function(p) {\n    p.xTouched = true;\n    p.yTouched = true;\n};\nfunction getUnitVector(x, y) {\n    var d = Math.sqrt(x * x + y * y);\n    x /= d;\n    y /= d;\n    if (x === 1 && y === 0) {\n        return xUnitVector;\n    } else if (x === 0 && y === 1) {\n        return yUnitVector;\n    } else {\n        return new UnitVector(x, y);\n    }\n}\nfunction HPoint(x, y, lastPointOfContour, onCurve) {\n    this.x = this.xo = Math.round(x * 64) / 64;\n    this.y = this.yo = Math.round(y * 64) / 64;\n    this.lastPointOfContour = lastPointOfContour;\n    this.onCurve = onCurve;\n    this.prevPointOnContour = void 0;\n    this.nextPointOnContour = void 0;\n    this.xTouched = false;\n    this.yTouched = false;\n    Object.preventExtensions(this);\n}\nHPoint.prototype.nextTouched = function(v) {\n    var p = this.nextPointOnContour;\n    while(!v.touched(p) && p !== this){\n        p = p.nextPointOnContour;\n    }\n    return p;\n};\nHPoint.prototype.prevTouched = function(v) {\n    var p = this.prevPointOnContour;\n    while(!v.touched(p) && p !== this){\n        p = p.prevPointOnContour;\n    }\n    return p;\n};\nvar HPZero = Object.freeze(new HPoint(0, 0));\nvar defaultState = {\n    cvCutIn: 17 / 16,\n    deltaBase: 9,\n    deltaShift: 0.125,\n    loop: 1,\n    minDis: 1,\n    autoFlip: true\n};\nfunction State(env, prog) {\n    this.env = env;\n    this.stack = [];\n    this.prog = prog;\n    switch(env){\n        case \"glyf\":\n            this.zp0 = this.zp1 = this.zp2 = 1;\n            this.rp0 = this.rp1 = this.rp2 = 0;\n        case \"prep\":\n            this.fv = this.pv = this.dpv = xUnitVector;\n            this.round = roundToGrid;\n    }\n}\nHinting.prototype.exec = function(glyph, ppem) {\n    if (typeof ppem !== \"number\") {\n        throw new Error(\"Point size is not a number!\");\n    }\n    if (this._errorState > 2) {\n        return;\n    }\n    var font = this.font;\n    var prepState = this._prepState;\n    if (!prepState || prepState.ppem !== ppem) {\n        var fpgmState = this._fpgmState;\n        if (!fpgmState) {\n            State.prototype = defaultState;\n            fpgmState = this._fpgmState = new State(\"fpgm\", font.tables.fpgm);\n            fpgmState.funcs = [];\n            fpgmState.font = font;\n            if (exports.DEBUG) {\n                console.log(\"---EXEC FPGM---\");\n                fpgmState.step = -1;\n            }\n            try {\n                exec(fpgmState);\n            } catch (e) {\n                console.log(\"Hinting error in FPGM:\" + e);\n                this._errorState = 3;\n                return;\n            }\n        }\n        State.prototype = fpgmState;\n        prepState = this._prepState = new State(\"prep\", font.tables.prep);\n        prepState.ppem = ppem;\n        var oCvt = font.tables.cvt;\n        if (oCvt) {\n            var cvt = prepState.cvt = new Array(oCvt.length);\n            var scale = ppem / font.unitsPerEm;\n            for(var c = 0; c < oCvt.length; c++){\n                cvt[c] = oCvt[c] * scale;\n            }\n        } else {\n            prepState.cvt = [];\n        }\n        if (exports.DEBUG) {\n            console.log(\"---EXEC PREP---\");\n            prepState.step = -1;\n        }\n        try {\n            exec(prepState);\n        } catch (e) {\n            if (this._errorState < 2) {\n                console.log(\"Hinting error in PREP:\" + e);\n            }\n            this._errorState = 2;\n        }\n    }\n    if (this._errorState > 1) {\n        return;\n    }\n    try {\n        return execGlyph(glyph, prepState);\n    } catch (e) {\n        if (this._errorState < 1) {\n            console.log(\"Hinting error:\" + e);\n            console.log(\"Note: further hinting errors are silenced\");\n        }\n        this._errorState = 1;\n        return void 0;\n    }\n};\nexecGlyph = function(glyph, prepState) {\n    var xScale = prepState.ppem / prepState.font.unitsPerEm;\n    var yScale = xScale;\n    var components = glyph.components;\n    var contours;\n    var gZone;\n    var state;\n    State.prototype = prepState;\n    if (!components) {\n        state = new State(\"glyf\", glyph.instructions);\n        if (exports.DEBUG) {\n            console.log(\"---EXEC GLYPH---\");\n            state.step = -1;\n        }\n        execComponent(glyph, state, xScale, yScale);\n        gZone = state.gZone;\n    } else {\n        var font = prepState.font;\n        gZone = [];\n        contours = [];\n        for(var i = 0; i < components.length; i++){\n            var c = components[i];\n            var cg = font.glyphs.get(c.glyphIndex);\n            state = new State(\"glyf\", cg.instructions);\n            if (exports.DEBUG) {\n                console.log(\"---EXEC COMP \" + i + \"---\");\n                state.step = -1;\n            }\n            execComponent(cg, state, xScale, yScale);\n            var dx = Math.round(c.dx * xScale);\n            var dy = Math.round(c.dy * yScale);\n            var gz = state.gZone;\n            var cc = state.contours;\n            for(var pi = 0; pi < gz.length; pi++){\n                var p = gz[pi];\n                p.xTouched = p.yTouched = false;\n                p.xo = p.x = p.x + dx;\n                p.yo = p.y = p.y + dy;\n            }\n            var gLen = gZone.length;\n            gZone.push.apply(gZone, gz);\n            for(var j = 0; j < cc.length; j++){\n                contours.push(cc[j] + gLen);\n            }\n        }\n        if (glyph.instructions && !state.inhibitGridFit) {\n            state = new State(\"glyf\", glyph.instructions);\n            state.gZone = state.z0 = state.z1 = state.z2 = gZone;\n            state.contours = contours;\n            gZone.push(new HPoint(0, 0), new HPoint(Math.round(glyph.advanceWidth * xScale), 0));\n            if (exports.DEBUG) {\n                console.log(\"---EXEC COMPOSITE---\");\n                state.step = -1;\n            }\n            exec(state);\n            gZone.length -= 2;\n        }\n    }\n    return gZone;\n};\nexecComponent = function(glyph, state, xScale, yScale) {\n    var points = glyph.points || [];\n    var pLen = points.length;\n    var gZone = state.gZone = state.z0 = state.z1 = state.z2 = [];\n    var contours = state.contours = [];\n    var cp;\n    for(var i = 0; i < pLen; i++){\n        cp = points[i];\n        gZone[i] = new HPoint(cp.x * xScale, cp.y * yScale, cp.lastPointOfContour, cp.onCurve);\n    }\n    var sp;\n    var np;\n    for(var i$1 = 0; i$1 < pLen; i$1++){\n        cp = gZone[i$1];\n        if (!sp) {\n            sp = cp;\n            contours.push(i$1);\n        }\n        if (cp.lastPointOfContour) {\n            cp.nextPointOnContour = sp;\n            sp.prevPointOnContour = cp;\n            sp = void 0;\n        } else {\n            np = gZone[i$1 + 1];\n            cp.nextPointOnContour = np;\n            np.prevPointOnContour = cp;\n        }\n    }\n    if (state.inhibitGridFit) {\n        return;\n    }\n    if (exports.DEBUG) {\n        console.log(\"PROCESSING GLYPH\", state.stack);\n        for(var i$2 = 0; i$2 < pLen; i$2++){\n            console.log(i$2, gZone[i$2].x, gZone[i$2].y);\n        }\n    }\n    gZone.push(new HPoint(0, 0), new HPoint(Math.round(glyph.advanceWidth * xScale), 0));\n    exec(state);\n    gZone.length -= 2;\n    if (exports.DEBUG) {\n        console.log(\"FINISHED GLYPH\", state.stack);\n        for(var i$3 = 0; i$3 < pLen; i$3++){\n            console.log(i$3, gZone[i$3].x, gZone[i$3].y);\n        }\n    }\n};\nexec = function(state) {\n    var prog = state.prog;\n    if (!prog) {\n        return;\n    }\n    var pLen = prog.length;\n    var ins;\n    for(state.ip = 0; state.ip < pLen; state.ip++){\n        if (exports.DEBUG) {\n            state.step++;\n        }\n        ins = instructionTable[prog[state.ip]];\n        if (!ins) {\n            throw new Error(\"unknown instruction: 0x\" + Number(prog[state.ip]).toString(16));\n        }\n        ins(state);\n    }\n};\nfunction initTZone(state) {\n    var tZone = state.tZone = new Array(state.gZone.length);\n    for(var i = 0; i < tZone.length; i++){\n        tZone[i] = new HPoint(0, 0);\n    }\n}\nfunction skip(state, handleElse) {\n    var prog = state.prog;\n    var ip = state.ip;\n    var nesting = 1;\n    var ins;\n    do {\n        ins = prog[++ip];\n        if (ins === 88) {\n            nesting++;\n        } else if (ins === 89) {\n            nesting--;\n        } else if (ins === 64) {\n            ip += prog[ip + 1] + 1;\n        } else if (ins === 65) {\n            ip += 2 * prog[ip + 1] + 1;\n        } else if (ins >= 176 && ins <= 183) {\n            ip += ins - 176 + 1;\n        } else if (ins >= 184 && ins <= 191) {\n            ip += (ins - 184 + 1) * 2;\n        } else if (handleElse && nesting === 1 && ins === 27) {\n            break;\n        }\n    }while (nesting > 0);\n    state.ip = ip;\n}\nfunction SVTCA(v, state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"SVTCA[\" + v.axis + \"]\");\n    }\n    state.fv = state.pv = state.dpv = v;\n}\nfunction SPVTCA(v, state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"SPVTCA[\" + v.axis + \"]\");\n    }\n    state.pv = state.dpv = v;\n}\nfunction SFVTCA(v, state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"SFVTCA[\" + v.axis + \"]\");\n    }\n    state.fv = v;\n}\nfunction SPVTL(a, state) {\n    var stack = state.stack;\n    var p2i = stack.pop();\n    var p1i = stack.pop();\n    var p2 = state.z2[p2i];\n    var p1 = state.z1[p1i];\n    if (exports.DEBUG) {\n        console.log(\"SPVTL[\" + a + \"]\", p2i, p1i);\n    }\n    var dx;\n    var dy;\n    if (!a) {\n        dx = p1.x - p2.x;\n        dy = p1.y - p2.y;\n    } else {\n        dx = p2.y - p1.y;\n        dy = p1.x - p2.x;\n    }\n    state.pv = state.dpv = getUnitVector(dx, dy);\n}\nfunction SFVTL(a, state) {\n    var stack = state.stack;\n    var p2i = stack.pop();\n    var p1i = stack.pop();\n    var p2 = state.z2[p2i];\n    var p1 = state.z1[p1i];\n    if (exports.DEBUG) {\n        console.log(\"SFVTL[\" + a + \"]\", p2i, p1i);\n    }\n    var dx;\n    var dy;\n    if (!a) {\n        dx = p1.x - p2.x;\n        dy = p1.y - p2.y;\n    } else {\n        dx = p2.y - p1.y;\n        dy = p1.x - p2.x;\n    }\n    state.fv = getUnitVector(dx, dy);\n}\nfunction SPVFS(state) {\n    var stack = state.stack;\n    var y = stack.pop();\n    var x = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SPVFS[]\", y, x);\n    }\n    state.pv = state.dpv = getUnitVector(x, y);\n}\nfunction SFVFS(state) {\n    var stack = state.stack;\n    var y = stack.pop();\n    var x = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SPVFS[]\", y, x);\n    }\n    state.fv = getUnitVector(x, y);\n}\nfunction GPV(state) {\n    var stack = state.stack;\n    var pv = state.pv;\n    if (exports.DEBUG) {\n        console.log(state.step, \"GPV[]\");\n    }\n    stack.push(pv.x * 16384);\n    stack.push(pv.y * 16384);\n}\nfunction GFV(state) {\n    var stack = state.stack;\n    var fv = state.fv;\n    if (exports.DEBUG) {\n        console.log(state.step, \"GFV[]\");\n    }\n    stack.push(fv.x * 16384);\n    stack.push(fv.y * 16384);\n}\nfunction SFVTPV(state) {\n    state.fv = state.pv;\n    if (exports.DEBUG) {\n        console.log(state.step, \"SFVTPV[]\");\n    }\n}\nfunction ISECT(state) {\n    var stack = state.stack;\n    var pa0i = stack.pop();\n    var pa1i = stack.pop();\n    var pb0i = stack.pop();\n    var pb1i = stack.pop();\n    var pi = stack.pop();\n    var z0 = state.z0;\n    var z1 = state.z1;\n    var pa0 = z0[pa0i];\n    var pa1 = z0[pa1i];\n    var pb0 = z1[pb0i];\n    var pb1 = z1[pb1i];\n    var p = state.z2[pi];\n    if (exports.DEBUG) {\n        console.log(\"ISECT[], \", pa0i, pa1i, pb0i, pb1i, pi);\n    }\n    var x1 = pa0.x;\n    var y1 = pa0.y;\n    var x2 = pa1.x;\n    var y2 = pa1.y;\n    var x3 = pb0.x;\n    var y3 = pb0.y;\n    var x4 = pb1.x;\n    var y4 = pb1.y;\n    var div = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    var f1 = x1 * y2 - y1 * x2;\n    var f2 = x3 * y4 - y3 * x4;\n    p.x = (f1 * (x3 - x4) - f2 * (x1 - x2)) / div;\n    p.y = (f1 * (y3 - y4) - f2 * (y1 - y2)) / div;\n}\nfunction SRP0(state) {\n    state.rp0 = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SRP0[]\", state.rp0);\n    }\n}\nfunction SRP1(state) {\n    state.rp1 = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SRP1[]\", state.rp1);\n    }\n}\nfunction SRP2(state) {\n    state.rp2 = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SRP2[]\", state.rp2);\n    }\n}\nfunction SZP0(state) {\n    var n = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SZP0[]\", n);\n    }\n    state.zp0 = n;\n    switch(n){\n        case 0:\n            if (!state.tZone) {\n                initTZone(state);\n            }\n            state.z0 = state.tZone;\n            break;\n        case 1:\n            state.z0 = state.gZone;\n            break;\n        default:\n            throw new Error(\"Invalid zone pointer\");\n    }\n}\nfunction SZP1(state) {\n    var n = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SZP1[]\", n);\n    }\n    state.zp1 = n;\n    switch(n){\n        case 0:\n            if (!state.tZone) {\n                initTZone(state);\n            }\n            state.z1 = state.tZone;\n            break;\n        case 1:\n            state.z1 = state.gZone;\n            break;\n        default:\n            throw new Error(\"Invalid zone pointer\");\n    }\n}\nfunction SZP2(state) {\n    var n = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SZP2[]\", n);\n    }\n    state.zp2 = n;\n    switch(n){\n        case 0:\n            if (!state.tZone) {\n                initTZone(state);\n            }\n            state.z2 = state.tZone;\n            break;\n        case 1:\n            state.z2 = state.gZone;\n            break;\n        default:\n            throw new Error(\"Invalid zone pointer\");\n    }\n}\nfunction SZPS(state) {\n    var n = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SZPS[]\", n);\n    }\n    state.zp0 = state.zp1 = state.zp2 = n;\n    switch(n){\n        case 0:\n            if (!state.tZone) {\n                initTZone(state);\n            }\n            state.z0 = state.z1 = state.z2 = state.tZone;\n            break;\n        case 1:\n            state.z0 = state.z1 = state.z2 = state.gZone;\n            break;\n        default:\n            throw new Error(\"Invalid zone pointer\");\n    }\n}\nfunction SLOOP(state) {\n    state.loop = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SLOOP[]\", state.loop);\n    }\n}\nfunction RTG(state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"RTG[]\");\n    }\n    state.round = roundToGrid;\n}\nfunction RTHG(state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"RTHG[]\");\n    }\n    state.round = roundToHalfGrid;\n}\nfunction SMD(state) {\n    var d = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SMD[]\", d);\n    }\n    state.minDis = d / 64;\n}\nfunction ELSE(state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"ELSE[]\");\n    }\n    skip(state, false);\n}\nfunction JMPR(state) {\n    var o = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"JMPR[]\", o);\n    }\n    state.ip += o - 1;\n}\nfunction SCVTCI(state) {\n    var n = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SCVTCI[]\", n);\n    }\n    state.cvCutIn = n / 64;\n}\nfunction DUP(state) {\n    var stack = state.stack;\n    if (exports.DEBUG) {\n        console.log(state.step, \"DUP[]\");\n    }\n    stack.push(stack[stack.length - 1]);\n}\nfunction POP(state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"POP[]\");\n    }\n    state.stack.pop();\n}\nfunction CLEAR(state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"CLEAR[]\");\n    }\n    state.stack.length = 0;\n}\nfunction SWAP(state) {\n    var stack = state.stack;\n    var a = stack.pop();\n    var b = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SWAP[]\");\n    }\n    stack.push(a);\n    stack.push(b);\n}\nfunction DEPTH(state) {\n    var stack = state.stack;\n    if (exports.DEBUG) {\n        console.log(state.step, \"DEPTH[]\");\n    }\n    stack.push(stack.length);\n}\nfunction LOOPCALL(state) {\n    var stack = state.stack;\n    var fn = stack.pop();\n    var c = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"LOOPCALL[]\", fn, c);\n    }\n    var cip = state.ip;\n    var cprog = state.prog;\n    state.prog = state.funcs[fn];\n    for(var i = 0; i < c; i++){\n        exec(state);\n        if (exports.DEBUG) {\n            console.log(++state.step, i + 1 < c ? \"next loopcall\" : \"done loopcall\", i);\n        }\n    }\n    state.ip = cip;\n    state.prog = cprog;\n}\nfunction CALL(state) {\n    var fn = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"CALL[]\", fn);\n    }\n    var cip = state.ip;\n    var cprog = state.prog;\n    state.prog = state.funcs[fn];\n    exec(state);\n    state.ip = cip;\n    state.prog = cprog;\n    if (exports.DEBUG) {\n        console.log(++state.step, \"returning from\", fn);\n    }\n}\nfunction CINDEX(state) {\n    var stack = state.stack;\n    var k = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"CINDEX[]\", k);\n    }\n    stack.push(stack[stack.length - k]);\n}\nfunction MINDEX(state) {\n    var stack = state.stack;\n    var k = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"MINDEX[]\", k);\n    }\n    stack.push(stack.splice(stack.length - k, 1)[0]);\n}\nfunction FDEF(state) {\n    if (state.env !== \"fpgm\") {\n        throw new Error(\"FDEF not allowed here\");\n    }\n    var stack = state.stack;\n    var prog = state.prog;\n    var ip = state.ip;\n    var fn = stack.pop();\n    var ipBegin = ip;\n    if (exports.DEBUG) {\n        console.log(state.step, \"FDEF[]\", fn);\n    }\n    while(prog[++ip] !== 45){}\n    state.ip = ip;\n    state.funcs[fn] = prog.slice(ipBegin + 1, ip);\n}\nfunction MDAP(round, state) {\n    var pi = state.stack.pop();\n    var p = state.z0[pi];\n    var fv = state.fv;\n    var pv = state.pv;\n    if (exports.DEBUG) {\n        console.log(state.step, \"MDAP[\" + round + \"]\", pi);\n    }\n    var d = pv.distance(p, HPZero);\n    if (round) {\n        d = state.round(d);\n    }\n    fv.setRelative(p, HPZero, d, pv);\n    fv.touch(p);\n    state.rp0 = state.rp1 = pi;\n}\nfunction IUP(v, state) {\n    var z2 = state.z2;\n    var pLen = z2.length - 2;\n    var cp;\n    var pp;\n    var np;\n    if (exports.DEBUG) {\n        console.log(state.step, \"IUP[\" + v.axis + \"]\");\n    }\n    for(var i = 0; i < pLen; i++){\n        cp = z2[i];\n        if (v.touched(cp)) {\n            continue;\n        }\n        pp = cp.prevTouched(v);\n        if (pp === cp) {\n            continue;\n        }\n        np = cp.nextTouched(v);\n        if (pp === np) {\n            v.setRelative(cp, cp, v.distance(pp, pp, false, true), v, true);\n        }\n        v.interpolate(cp, pp, np, v);\n    }\n}\nfunction SHP(a, state) {\n    var stack = state.stack;\n    var rpi = a ? state.rp1 : state.rp2;\n    var rp = (a ? state.z0 : state.z1)[rpi];\n    var fv = state.fv;\n    var pv = state.pv;\n    var loop = state.loop;\n    var z2 = state.z2;\n    while(loop--){\n        var pi = stack.pop();\n        var p = z2[pi];\n        var d = pv.distance(rp, rp, false, true);\n        fv.setRelative(p, p, d, pv);\n        fv.touch(p);\n        if (exports.DEBUG) {\n            console.log(state.step, (state.loop > 1 ? \"loop \" + (state.loop - loop) + \": \" : \"\") + \"SHP[\" + (a ? \"rp1\" : \"rp2\") + \"]\", pi);\n        }\n    }\n    state.loop = 1;\n}\nfunction SHC(a, state) {\n    var stack = state.stack;\n    var rpi = a ? state.rp1 : state.rp2;\n    var rp = (a ? state.z0 : state.z1)[rpi];\n    var fv = state.fv;\n    var pv = state.pv;\n    var ci2 = stack.pop();\n    var sp = state.z2[state.contours[ci2]];\n    var p = sp;\n    if (exports.DEBUG) {\n        console.log(state.step, \"SHC[\" + a + \"]\", ci2);\n    }\n    var d = pv.distance(rp, rp, false, true);\n    do {\n        if (p !== rp) {\n            fv.setRelative(p, p, d, pv);\n        }\n        p = p.nextPointOnContour;\n    }while (p !== sp);\n}\nfunction SHZ(a, state) {\n    var stack = state.stack;\n    var rpi = a ? state.rp1 : state.rp2;\n    var rp = (a ? state.z0 : state.z1)[rpi];\n    var fv = state.fv;\n    var pv = state.pv;\n    var e = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SHZ[\" + a + \"]\", e);\n    }\n    var z2;\n    switch(e){\n        case 0:\n            z2 = state.tZone;\n            break;\n        case 1:\n            z2 = state.gZone;\n            break;\n        default:\n            throw new Error(\"Invalid zone\");\n    }\n    var p;\n    var d = pv.distance(rp, rp, false, true);\n    var pLen = z2.length - 2;\n    for(var i = 0; i < pLen; i++){\n        p = z2[i];\n        fv.setRelative(p, p, d, pv);\n    }\n}\nfunction SHPIX(state) {\n    var stack = state.stack;\n    var loop = state.loop;\n    var fv = state.fv;\n    var d = stack.pop() / 64;\n    var z2 = state.z2;\n    while(loop--){\n        var pi = stack.pop();\n        var p = z2[pi];\n        if (exports.DEBUG) {\n            console.log(state.step, (state.loop > 1 ? \"loop \" + (state.loop - loop) + \": \" : \"\") + \"SHPIX[]\", pi, d);\n        }\n        fv.setRelative(p, p, d);\n        fv.touch(p);\n    }\n    state.loop = 1;\n}\nfunction IP(state) {\n    var stack = state.stack;\n    var rp1i = state.rp1;\n    var rp2i = state.rp2;\n    var loop = state.loop;\n    var rp1 = state.z0[rp1i];\n    var rp2 = state.z1[rp2i];\n    var fv = state.fv;\n    var pv = state.dpv;\n    var z2 = state.z2;\n    while(loop--){\n        var pi = stack.pop();\n        var p = z2[pi];\n        if (exports.DEBUG) {\n            console.log(state.step, (state.loop > 1 ? \"loop \" + (state.loop - loop) + \": \" : \"\") + \"IP[]\", pi, rp1i, \"<->\", rp2i);\n        }\n        fv.interpolate(p, rp1, rp2, pv);\n        fv.touch(p);\n    }\n    state.loop = 1;\n}\nfunction MSIRP(a, state) {\n    var stack = state.stack;\n    var d = stack.pop() / 64;\n    var pi = stack.pop();\n    var p = state.z1[pi];\n    var rp0 = state.z0[state.rp0];\n    var fv = state.fv;\n    var pv = state.pv;\n    fv.setRelative(p, rp0, d, pv);\n    fv.touch(p);\n    if (exports.DEBUG) {\n        console.log(state.step, \"MSIRP[\" + a + \"]\", d, pi);\n    }\n    state.rp1 = state.rp0;\n    state.rp2 = pi;\n    if (a) {\n        state.rp0 = pi;\n    }\n}\nfunction ALIGNRP(state) {\n    var stack = state.stack;\n    var rp0i = state.rp0;\n    var rp0 = state.z0[rp0i];\n    var loop = state.loop;\n    var fv = state.fv;\n    var pv = state.pv;\n    var z1 = state.z1;\n    while(loop--){\n        var pi = stack.pop();\n        var p = z1[pi];\n        if (exports.DEBUG) {\n            console.log(state.step, (state.loop > 1 ? \"loop \" + (state.loop - loop) + \": \" : \"\") + \"ALIGNRP[]\", pi);\n        }\n        fv.setRelative(p, rp0, 0, pv);\n        fv.touch(p);\n    }\n    state.loop = 1;\n}\nfunction RTDG(state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"RTDG[]\");\n    }\n    state.round = roundToDoubleGrid;\n}\nfunction MIAP(round, state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    var pi = stack.pop();\n    var p = state.z0[pi];\n    var fv = state.fv;\n    var pv = state.pv;\n    var cv = state.cvt[n];\n    if (exports.DEBUG) {\n        console.log(state.step, \"MIAP[\" + round + \"]\", n, \"(\", cv, \")\", pi);\n    }\n    var d = pv.distance(p, HPZero);\n    if (round) {\n        if (Math.abs(d - cv) < state.cvCutIn) {\n            d = cv;\n        }\n        d = state.round(d);\n    }\n    fv.setRelative(p, HPZero, d, pv);\n    if (state.zp0 === 0) {\n        p.xo = p.x;\n        p.yo = p.y;\n    }\n    fv.touch(p);\n    state.rp0 = state.rp1 = pi;\n}\nfunction NPUSHB(state) {\n    var prog = state.prog;\n    var ip = state.ip;\n    var stack = state.stack;\n    var n = prog[++ip];\n    if (exports.DEBUG) {\n        console.log(state.step, \"NPUSHB[]\", n);\n    }\n    for(var i = 0; i < n; i++){\n        stack.push(prog[++ip]);\n    }\n    state.ip = ip;\n}\nfunction NPUSHW(state) {\n    var ip = state.ip;\n    var prog = state.prog;\n    var stack = state.stack;\n    var n = prog[++ip];\n    if (exports.DEBUG) {\n        console.log(state.step, \"NPUSHW[]\", n);\n    }\n    for(var i = 0; i < n; i++){\n        var w = prog[++ip] << 8 | prog[++ip];\n        if (w & 32768) {\n            w = -((w ^ 65535) + 1);\n        }\n        stack.push(w);\n    }\n    state.ip = ip;\n}\nfunction WS(state) {\n    var stack = state.stack;\n    var store = state.store;\n    if (!store) {\n        store = state.store = [];\n    }\n    var v = stack.pop();\n    var l = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"WS\", v, l);\n    }\n    store[l] = v;\n}\nfunction RS(state) {\n    var stack = state.stack;\n    var store = state.store;\n    var l = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"RS\", l);\n    }\n    var v = store && store[l] || 0;\n    stack.push(v);\n}\nfunction WCVTP(state) {\n    var stack = state.stack;\n    var v = stack.pop();\n    var l = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"WCVTP\", v, l);\n    }\n    state.cvt[l] = v / 64;\n}\nfunction RCVT(state) {\n    var stack = state.stack;\n    var cvte = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"RCVT\", cvte);\n    }\n    stack.push(state.cvt[cvte] * 64);\n}\nfunction GC(a, state) {\n    var stack = state.stack;\n    var pi = stack.pop();\n    var p = state.z2[pi];\n    if (exports.DEBUG) {\n        console.log(state.step, \"GC[\" + a + \"]\", pi);\n    }\n    stack.push(state.dpv.distance(p, HPZero, a, false) * 64);\n}\nfunction MD(a, state) {\n    var stack = state.stack;\n    var pi2 = stack.pop();\n    var pi1 = stack.pop();\n    var p2 = state.z1[pi2];\n    var p1 = state.z0[pi1];\n    var d = state.dpv.distance(p1, p2, a, a);\n    if (exports.DEBUG) {\n        console.log(state.step, \"MD[\" + a + \"]\", pi2, pi1, \"->\", d);\n    }\n    state.stack.push(Math.round(d * 64));\n}\nfunction MPPEM(state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"MPPEM[]\");\n    }\n    state.stack.push(state.ppem);\n}\nfunction FLIPON(state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"FLIPON[]\");\n    }\n    state.autoFlip = true;\n}\nfunction LT(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"LT[]\", e2, e1);\n    }\n    stack.push(e1 < e2 ? 1 : 0);\n}\nfunction LTEQ(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"LTEQ[]\", e2, e1);\n    }\n    stack.push(e1 <= e2 ? 1 : 0);\n}\nfunction GT(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"GT[]\", e2, e1);\n    }\n    stack.push(e1 > e2 ? 1 : 0);\n}\nfunction GTEQ(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"GTEQ[]\", e2, e1);\n    }\n    stack.push(e1 >= e2 ? 1 : 0);\n}\nfunction EQ(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"EQ[]\", e2, e1);\n    }\n    stack.push(e2 === e1 ? 1 : 0);\n}\nfunction NEQ(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"NEQ[]\", e2, e1);\n    }\n    stack.push(e2 !== e1 ? 1 : 0);\n}\nfunction ODD(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"ODD[]\", n);\n    }\n    stack.push(Math.trunc(n) % 2 ? 1 : 0);\n}\nfunction EVEN(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"EVEN[]\", n);\n    }\n    stack.push(Math.trunc(n) % 2 ? 0 : 1);\n}\nfunction IF(state) {\n    var test = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"IF[]\", test);\n    }\n    if (!test) {\n        skip(state, true);\n        if (exports.DEBUG) {\n            console.log(state.step, \"EIF[]\");\n        }\n    }\n}\nfunction EIF(state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"EIF[]\");\n    }\n}\nfunction AND(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"AND[]\", e2, e1);\n    }\n    stack.push(e2 && e1 ? 1 : 0);\n}\nfunction OR(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"OR[]\", e2, e1);\n    }\n    stack.push(e2 || e1 ? 1 : 0);\n}\nfunction NOT(state) {\n    var stack = state.stack;\n    var e = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"NOT[]\", e);\n    }\n    stack.push(e ? 0 : 1);\n}\nfunction DELTAP123(b, state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    var fv = state.fv;\n    var pv = state.pv;\n    var ppem = state.ppem;\n    var base = state.deltaBase + (b - 1) * 16;\n    var ds = state.deltaShift;\n    var z0 = state.z0;\n    if (exports.DEBUG) {\n        console.log(state.step, \"DELTAP[\" + b + \"]\", n, stack);\n    }\n    for(var i = 0; i < n; i++){\n        var pi = stack.pop();\n        var arg = stack.pop();\n        var appem = base + ((arg & 240) >> 4);\n        if (appem !== ppem) {\n            continue;\n        }\n        var mag = (arg & 15) - 8;\n        if (mag >= 0) {\n            mag++;\n        }\n        if (exports.DEBUG) {\n            console.log(state.step, \"DELTAPFIX\", pi, \"by\", mag * ds);\n        }\n        var p = z0[pi];\n        fv.setRelative(p, p, mag * ds, pv);\n    }\n}\nfunction SDB(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SDB[]\", n);\n    }\n    state.deltaBase = n;\n}\nfunction SDS(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SDS[]\", n);\n    }\n    state.deltaShift = Math.pow(0.5, n);\n}\nfunction ADD(state) {\n    var stack = state.stack;\n    var n2 = stack.pop();\n    var n1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"ADD[]\", n2, n1);\n    }\n    stack.push(n1 + n2);\n}\nfunction SUB(state) {\n    var stack = state.stack;\n    var n2 = stack.pop();\n    var n1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SUB[]\", n2, n1);\n    }\n    stack.push(n1 - n2);\n}\nfunction DIV(state) {\n    var stack = state.stack;\n    var n2 = stack.pop();\n    var n1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"DIV[]\", n2, n1);\n    }\n    stack.push(n1 * 64 / n2);\n}\nfunction MUL(state) {\n    var stack = state.stack;\n    var n2 = stack.pop();\n    var n1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"MUL[]\", n2, n1);\n    }\n    stack.push(n1 * n2 / 64);\n}\nfunction ABS(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"ABS[]\", n);\n    }\n    stack.push(Math.abs(n));\n}\nfunction NEG(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"NEG[]\", n);\n    }\n    stack.push(-n);\n}\nfunction FLOOR(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"FLOOR[]\", n);\n    }\n    stack.push(Math.floor(n / 64) * 64);\n}\nfunction CEILING(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"CEILING[]\", n);\n    }\n    stack.push(Math.ceil(n / 64) * 64);\n}\nfunction ROUND(dt2, state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"ROUND[]\");\n    }\n    stack.push(state.round(n / 64) * 64);\n}\nfunction WCVTF(state) {\n    var stack = state.stack;\n    var v = stack.pop();\n    var l = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"WCVTF[]\", v, l);\n    }\n    state.cvt[l] = v * state.ppem / state.font.unitsPerEm;\n}\nfunction DELTAC123(b, state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    var ppem = state.ppem;\n    var base = state.deltaBase + (b - 1) * 16;\n    var ds = state.deltaShift;\n    if (exports.DEBUG) {\n        console.log(state.step, \"DELTAC[\" + b + \"]\", n, stack);\n    }\n    for(var i = 0; i < n; i++){\n        var c = stack.pop();\n        var arg = stack.pop();\n        var appem = base + ((arg & 240) >> 4);\n        if (appem !== ppem) {\n            continue;\n        }\n        var mag = (arg & 15) - 8;\n        if (mag >= 0) {\n            mag++;\n        }\n        var delta = mag * ds;\n        if (exports.DEBUG) {\n            console.log(state.step, \"DELTACFIX\", c, \"by\", delta);\n        }\n        state.cvt[c] += delta;\n    }\n}\nfunction SROUND(state) {\n    var n = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SROUND[]\", n);\n    }\n    state.round = roundSuper;\n    var period;\n    switch(n & 192){\n        case 0:\n            period = 0.5;\n            break;\n        case 64:\n            period = 1;\n            break;\n        case 128:\n            period = 2;\n            break;\n        default:\n            throw new Error(\"invalid SROUND value\");\n    }\n    state.srPeriod = period;\n    switch(n & 48){\n        case 0:\n            state.srPhase = 0;\n            break;\n        case 16:\n            state.srPhase = 0.25 * period;\n            break;\n        case 32:\n            state.srPhase = 0.5 * period;\n            break;\n        case 48:\n            state.srPhase = 0.75 * period;\n            break;\n        default:\n            throw new Error(\"invalid SROUND value\");\n    }\n    n &= 15;\n    if (n === 0) {\n        state.srThreshold = 0;\n    } else {\n        state.srThreshold = (n / 8 - 0.5) * period;\n    }\n}\nfunction S45ROUND(state) {\n    var n = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"S45ROUND[]\", n);\n    }\n    state.round = roundSuper;\n    var period;\n    switch(n & 192){\n        case 0:\n            period = Math.sqrt(2) / 2;\n            break;\n        case 64:\n            period = Math.sqrt(2);\n            break;\n        case 128:\n            period = 2 * Math.sqrt(2);\n            break;\n        default:\n            throw new Error(\"invalid S45ROUND value\");\n    }\n    state.srPeriod = period;\n    switch(n & 48){\n        case 0:\n            state.srPhase = 0;\n            break;\n        case 16:\n            state.srPhase = 0.25 * period;\n            break;\n        case 32:\n            state.srPhase = 0.5 * period;\n            break;\n        case 48:\n            state.srPhase = 0.75 * period;\n            break;\n        default:\n            throw new Error(\"invalid S45ROUND value\");\n    }\n    n &= 15;\n    if (n === 0) {\n        state.srThreshold = 0;\n    } else {\n        state.srThreshold = (n / 8 - 0.5) * period;\n    }\n}\nfunction ROFF(state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"ROFF[]\");\n    }\n    state.round = roundOff;\n}\nfunction RUTG(state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"RUTG[]\");\n    }\n    state.round = roundUpToGrid;\n}\nfunction RDTG(state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"RDTG[]\");\n    }\n    state.round = roundDownToGrid;\n}\nfunction SCANCTRL(state) {\n    var n = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SCANCTRL[]\", n);\n    }\n}\nfunction SDPVTL(a, state) {\n    var stack = state.stack;\n    var p2i = stack.pop();\n    var p1i = stack.pop();\n    var p2 = state.z2[p2i];\n    var p1 = state.z1[p1i];\n    if (exports.DEBUG) {\n        console.log(state.step, \"SDPVTL[\" + a + \"]\", p2i, p1i);\n    }\n    var dx;\n    var dy;\n    if (!a) {\n        dx = p1.x - p2.x;\n        dy = p1.y - p2.y;\n    } else {\n        dx = p2.y - p1.y;\n        dy = p1.x - p2.x;\n    }\n    state.dpv = getUnitVector(dx, dy);\n}\nfunction GETINFO(state) {\n    var stack = state.stack;\n    var sel = stack.pop();\n    var r = 0;\n    if (exports.DEBUG) {\n        console.log(state.step, \"GETINFO[]\", sel);\n    }\n    if (sel & 1) {\n        r = 35;\n    }\n    if (sel & 32) {\n        r |= 4096;\n    }\n    stack.push(r);\n}\nfunction ROLL(state) {\n    var stack = state.stack;\n    var a = stack.pop();\n    var b = stack.pop();\n    var c = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"ROLL[]\");\n    }\n    stack.push(b);\n    stack.push(a);\n    stack.push(c);\n}\nfunction MAX(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"MAX[]\", e2, e1);\n    }\n    stack.push(Math.max(e1, e2));\n}\nfunction MIN(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"MIN[]\", e2, e1);\n    }\n    stack.push(Math.min(e1, e2));\n}\nfunction SCANTYPE(state) {\n    var n = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SCANTYPE[]\", n);\n    }\n}\nfunction INSTCTRL(state) {\n    var s = state.stack.pop();\n    var v = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"INSTCTRL[]\", s, v);\n    }\n    switch(s){\n        case 1:\n            state.inhibitGridFit = !!v;\n            return;\n        case 2:\n            state.ignoreCvt = !!v;\n            return;\n        default:\n            throw new Error(\"invalid INSTCTRL[] selector\");\n    }\n}\nfunction PUSHB(n, state) {\n    var stack = state.stack;\n    var prog = state.prog;\n    var ip = state.ip;\n    if (exports.DEBUG) {\n        console.log(state.step, \"PUSHB[\" + n + \"]\");\n    }\n    for(var i = 0; i < n; i++){\n        stack.push(prog[++ip]);\n    }\n    state.ip = ip;\n}\nfunction PUSHW(n, state) {\n    var ip = state.ip;\n    var prog = state.prog;\n    var stack = state.stack;\n    if (exports.DEBUG) {\n        console.log(state.ip, \"PUSHW[\" + n + \"]\");\n    }\n    for(var i = 0; i < n; i++){\n        var w = prog[++ip] << 8 | prog[++ip];\n        if (w & 32768) {\n            w = -((w ^ 65535) + 1);\n        }\n        stack.push(w);\n    }\n    state.ip = ip;\n}\nfunction MDRP_MIRP(indirect, setRp0, keepD, ro, dt2, state) {\n    var stack = state.stack;\n    var cvte = indirect && stack.pop();\n    var pi = stack.pop();\n    var rp0i = state.rp0;\n    var rp = state.z0[rp0i];\n    var p = state.z1[pi];\n    var md = state.minDis;\n    var fv = state.fv;\n    var pv = state.dpv;\n    var od;\n    var d;\n    var sign;\n    var cv;\n    d = od = pv.distance(p, rp, true, true);\n    sign = d >= 0 ? 1 : -1;\n    d = Math.abs(d);\n    if (indirect) {\n        cv = state.cvt[cvte];\n        if (ro && Math.abs(d - cv) < state.cvCutIn) {\n            d = cv;\n        }\n    }\n    if (keepD && d < md) {\n        d = md;\n    }\n    if (ro) {\n        d = state.round(d);\n    }\n    fv.setRelative(p, rp, sign * d, pv);\n    fv.touch(p);\n    if (exports.DEBUG) {\n        console.log(state.step, (indirect ? \"MIRP[\" : \"MDRP[\") + (setRp0 ? \"M\" : \"m\") + (keepD ? \">\" : \"_\") + (ro ? \"R\" : \"_\") + (dt2 === 0 ? \"Gr\" : dt2 === 1 ? \"Bl\" : dt2 === 2 ? \"Wh\" : \"\") + \"]\", indirect ? cvte + \"(\" + state.cvt[cvte] + \",\" + cv + \")\" : \"\", pi, \"(d =\", od, \"->\", sign * d, \")\");\n    }\n    state.rp1 = state.rp0;\n    state.rp2 = pi;\n    if (setRp0) {\n        state.rp0 = pi;\n    }\n}\ninstructionTable = [\n    SVTCA.bind(void 0, yUnitVector),\n    SVTCA.bind(void 0, xUnitVector),\n    SPVTCA.bind(void 0, yUnitVector),\n    SPVTCA.bind(void 0, xUnitVector),\n    SFVTCA.bind(void 0, yUnitVector),\n    SFVTCA.bind(void 0, xUnitVector),\n    SPVTL.bind(void 0, 0),\n    SPVTL.bind(void 0, 1),\n    SFVTL.bind(void 0, 0),\n    SFVTL.bind(void 0, 1),\n    SPVFS,\n    SFVFS,\n    GPV,\n    GFV,\n    SFVTPV,\n    ISECT,\n    SRP0,\n    SRP1,\n    SRP2,\n    SZP0,\n    SZP1,\n    SZP2,\n    SZPS,\n    SLOOP,\n    RTG,\n    RTHG,\n    SMD,\n    ELSE,\n    JMPR,\n    SCVTCI,\n    void 0,\n    void 0,\n    DUP,\n    POP,\n    CLEAR,\n    SWAP,\n    DEPTH,\n    CINDEX,\n    MINDEX,\n    void 0,\n    void 0,\n    void 0,\n    LOOPCALL,\n    CALL,\n    FDEF,\n    void 0,\n    MDAP.bind(void 0, 0),\n    MDAP.bind(void 0, 1),\n    IUP.bind(void 0, yUnitVector),\n    IUP.bind(void 0, xUnitVector),\n    SHP.bind(void 0, 0),\n    SHP.bind(void 0, 1),\n    SHC.bind(void 0, 0),\n    SHC.bind(void 0, 1),\n    SHZ.bind(void 0, 0),\n    SHZ.bind(void 0, 1),\n    SHPIX,\n    IP,\n    MSIRP.bind(void 0, 0),\n    MSIRP.bind(void 0, 1),\n    ALIGNRP,\n    RTDG,\n    MIAP.bind(void 0, 0),\n    MIAP.bind(void 0, 1),\n    NPUSHB,\n    NPUSHW,\n    WS,\n    RS,\n    WCVTP,\n    RCVT,\n    GC.bind(void 0, 0),\n    GC.bind(void 0, 1),\n    void 0,\n    MD.bind(void 0, 0),\n    MD.bind(void 0, 1),\n    MPPEM,\n    void 0,\n    FLIPON,\n    void 0,\n    void 0,\n    LT,\n    LTEQ,\n    GT,\n    GTEQ,\n    EQ,\n    NEQ,\n    ODD,\n    EVEN,\n    IF,\n    EIF,\n    AND,\n    OR,\n    NOT,\n    DELTAP123.bind(void 0, 1),\n    SDB,\n    SDS,\n    ADD,\n    SUB,\n    DIV,\n    MUL,\n    ABS,\n    NEG,\n    FLOOR,\n    CEILING,\n    ROUND.bind(void 0, 0),\n    ROUND.bind(void 0, 1),\n    ROUND.bind(void 0, 2),\n    ROUND.bind(void 0, 3),\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    WCVTF,\n    DELTAP123.bind(void 0, 2),\n    DELTAP123.bind(void 0, 3),\n    DELTAC123.bind(void 0, 1),\n    DELTAC123.bind(void 0, 2),\n    DELTAC123.bind(void 0, 3),\n    SROUND,\n    S45ROUND,\n    void 0,\n    void 0,\n    ROFF,\n    void 0,\n    RUTG,\n    RDTG,\n    POP,\n    POP,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    SCANCTRL,\n    SDPVTL.bind(void 0, 0),\n    SDPVTL.bind(void 0, 1),\n    GETINFO,\n    void 0,\n    ROLL,\n    MAX,\n    MIN,\n    SCANTYPE,\n    INSTCTRL,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    PUSHB.bind(void 0, 1),\n    PUSHB.bind(void 0, 2),\n    PUSHB.bind(void 0, 3),\n    PUSHB.bind(void 0, 4),\n    PUSHB.bind(void 0, 5),\n    PUSHB.bind(void 0, 6),\n    PUSHB.bind(void 0, 7),\n    PUSHB.bind(void 0, 8),\n    PUSHW.bind(void 0, 1),\n    PUSHW.bind(void 0, 2),\n    PUSHW.bind(void 0, 3),\n    PUSHW.bind(void 0, 4),\n    PUSHW.bind(void 0, 5),\n    PUSHW.bind(void 0, 6),\n    PUSHW.bind(void 0, 7),\n    PUSHW.bind(void 0, 8),\n    MDRP_MIRP.bind(void 0, 0, 0, 0, 0, 0),\n    MDRP_MIRP.bind(void 0, 0, 0, 0, 0, 1),\n    MDRP_MIRP.bind(void 0, 0, 0, 0, 0, 2),\n    MDRP_MIRP.bind(void 0, 0, 0, 0, 0, 3),\n    MDRP_MIRP.bind(void 0, 0, 0, 0, 1, 0),\n    MDRP_MIRP.bind(void 0, 0, 0, 0, 1, 1),\n    MDRP_MIRP.bind(void 0, 0, 0, 0, 1, 2),\n    MDRP_MIRP.bind(void 0, 0, 0, 0, 1, 3),\n    MDRP_MIRP.bind(void 0, 0, 0, 1, 0, 0),\n    MDRP_MIRP.bind(void 0, 0, 0, 1, 0, 1),\n    MDRP_MIRP.bind(void 0, 0, 0, 1, 0, 2),\n    MDRP_MIRP.bind(void 0, 0, 0, 1, 0, 3),\n    MDRP_MIRP.bind(void 0, 0, 0, 1, 1, 0),\n    MDRP_MIRP.bind(void 0, 0, 0, 1, 1, 1),\n    MDRP_MIRP.bind(void 0, 0, 0, 1, 1, 2),\n    MDRP_MIRP.bind(void 0, 0, 0, 1, 1, 3),\n    MDRP_MIRP.bind(void 0, 0, 1, 0, 0, 0),\n    MDRP_MIRP.bind(void 0, 0, 1, 0, 0, 1),\n    MDRP_MIRP.bind(void 0, 0, 1, 0, 0, 2),\n    MDRP_MIRP.bind(void 0, 0, 1, 0, 0, 3),\n    MDRP_MIRP.bind(void 0, 0, 1, 0, 1, 0),\n    MDRP_MIRP.bind(void 0, 0, 1, 0, 1, 1),\n    MDRP_MIRP.bind(void 0, 0, 1, 0, 1, 2),\n    MDRP_MIRP.bind(void 0, 0, 1, 0, 1, 3),\n    MDRP_MIRP.bind(void 0, 0, 1, 1, 0, 0),\n    MDRP_MIRP.bind(void 0, 0, 1, 1, 0, 1),\n    MDRP_MIRP.bind(void 0, 0, 1, 1, 0, 2),\n    MDRP_MIRP.bind(void 0, 0, 1, 1, 0, 3),\n    MDRP_MIRP.bind(void 0, 0, 1, 1, 1, 0),\n    MDRP_MIRP.bind(void 0, 0, 1, 1, 1, 1),\n    MDRP_MIRP.bind(void 0, 0, 1, 1, 1, 2),\n    MDRP_MIRP.bind(void 0, 0, 1, 1, 1, 3),\n    MDRP_MIRP.bind(void 0, 1, 0, 0, 0, 0),\n    MDRP_MIRP.bind(void 0, 1, 0, 0, 0, 1),\n    MDRP_MIRP.bind(void 0, 1, 0, 0, 0, 2),\n    MDRP_MIRP.bind(void 0, 1, 0, 0, 0, 3),\n    MDRP_MIRP.bind(void 0, 1, 0, 0, 1, 0),\n    MDRP_MIRP.bind(void 0, 1, 0, 0, 1, 1),\n    MDRP_MIRP.bind(void 0, 1, 0, 0, 1, 2),\n    MDRP_MIRP.bind(void 0, 1, 0, 0, 1, 3),\n    MDRP_MIRP.bind(void 0, 1, 0, 1, 0, 0),\n    MDRP_MIRP.bind(void 0, 1, 0, 1, 0, 1),\n    MDRP_MIRP.bind(void 0, 1, 0, 1, 0, 2),\n    MDRP_MIRP.bind(void 0, 1, 0, 1, 0, 3),\n    MDRP_MIRP.bind(void 0, 1, 0, 1, 1, 0),\n    MDRP_MIRP.bind(void 0, 1, 0, 1, 1, 1),\n    MDRP_MIRP.bind(void 0, 1, 0, 1, 1, 2),\n    MDRP_MIRP.bind(void 0, 1, 0, 1, 1, 3),\n    MDRP_MIRP.bind(void 0, 1, 1, 0, 0, 0),\n    MDRP_MIRP.bind(void 0, 1, 1, 0, 0, 1),\n    MDRP_MIRP.bind(void 0, 1, 1, 0, 0, 2),\n    MDRP_MIRP.bind(void 0, 1, 1, 0, 0, 3),\n    MDRP_MIRP.bind(void 0, 1, 1, 0, 1, 0),\n    MDRP_MIRP.bind(void 0, 1, 1, 0, 1, 1),\n    MDRP_MIRP.bind(void 0, 1, 1, 0, 1, 2),\n    MDRP_MIRP.bind(void 0, 1, 1, 0, 1, 3),\n    MDRP_MIRP.bind(void 0, 1, 1, 1, 0, 0),\n    MDRP_MIRP.bind(void 0, 1, 1, 1, 0, 1),\n    MDRP_MIRP.bind(void 0, 1, 1, 1, 0, 2),\n    MDRP_MIRP.bind(void 0, 1, 1, 1, 0, 3),\n    MDRP_MIRP.bind(void 0, 1, 1, 1, 1, 0),\n    MDRP_MIRP.bind(void 0, 1, 1, 1, 1, 1),\n    MDRP_MIRP.bind(void 0, 1, 1, 1, 1, 2),\n    MDRP_MIRP.bind(void 0, 1, 1, 1, 1, 3)\n];\nfunction Token(char) {\n    this.char = char;\n    this.state = {};\n    this.activeState = null;\n}\nfunction ContextRange(startIndex, endOffset, contextName) {\n    this.contextName = contextName;\n    this.startIndex = startIndex;\n    this.endOffset = endOffset;\n}\nfunction ContextChecker(contextName, checkStart, checkEnd) {\n    this.contextName = contextName;\n    this.openRange = null;\n    this.ranges = [];\n    this.checkStart = checkStart;\n    this.checkEnd = checkEnd;\n}\nfunction ContextParams(context, currentIndex) {\n    this.context = context;\n    this.index = currentIndex;\n    this.length = context.length;\n    this.current = context[currentIndex];\n    this.backtrack = context.slice(0, currentIndex);\n    this.lookahead = context.slice(currentIndex + 1);\n}\nfunction Event(eventId) {\n    this.eventId = eventId;\n    this.subscribers = [];\n}\nfunction initializeCoreEvents(events) {\n    var this$1 = this;\n    var coreEvents = [\n        \"start\",\n        \"end\",\n        \"next\",\n        \"newToken\",\n        \"contextStart\",\n        \"contextEnd\",\n        \"insertToken\",\n        \"removeToken\",\n        \"removeRange\",\n        \"replaceToken\",\n        \"replaceRange\",\n        \"composeRUD\",\n        \"updateContextsRanges\"\n    ];\n    coreEvents.forEach(function(eventId) {\n        Object.defineProperty(this$1.events, eventId, {\n            value: new Event(eventId)\n        });\n    });\n    if (!!events) {\n        coreEvents.forEach(function(eventId) {\n            var event = events[eventId];\n            if (typeof event === \"function\") {\n                this$1.events[eventId].subscribe(event);\n            }\n        });\n    }\n    var requiresContextUpdate = [\n        \"insertToken\",\n        \"removeToken\",\n        \"removeRange\",\n        \"replaceToken\",\n        \"replaceRange\",\n        \"composeRUD\"\n    ];\n    requiresContextUpdate.forEach(function(eventId) {\n        this$1.events[eventId].subscribe(this$1.updateContextsRanges);\n    });\n}\nfunction Tokenizer(events) {\n    this.tokens = [];\n    this.registeredContexts = {};\n    this.contextCheckers = [];\n    this.events = {};\n    this.registeredModifiers = [];\n    initializeCoreEvents.call(this, events);\n}\nToken.prototype.setState = function(key, value) {\n    this.state[key] = value;\n    this.activeState = {\n        key,\n        value: this.state[key]\n    };\n    return this.activeState;\n};\nToken.prototype.getState = function(stateId) {\n    return this.state[stateId] || null;\n};\nTokenizer.prototype.inboundIndex = function(index) {\n    return index >= 0 && index < this.tokens.length;\n};\nTokenizer.prototype.composeRUD = function(RUDs) {\n    var this$1 = this;\n    var silent = true;\n    var state = RUDs.map(function(RUD) {\n        return this$1[RUD[0]].apply(this$1, RUD.slice(1).concat(silent));\n    });\n    var hasFAILObject = function(obj) {\n        return typeof obj === \"object\" && obj.hasOwnProperty(\"FAIL\");\n    };\n    if (state.every(hasFAILObject)) {\n        return {\n            FAIL: \"composeRUD: one or more operations hasn't completed successfully\",\n            report: state.filter(hasFAILObject)\n        };\n    }\n    this.dispatch(\"composeRUD\", [\n        state.filter(function(op) {\n            return !hasFAILObject(op);\n        })\n    ]);\n};\nTokenizer.prototype.replaceRange = function(startIndex, offset, tokens, silent) {\n    offset = offset !== null ? offset : this.tokens.length;\n    var isTokenType = tokens.every(function(token) {\n        return token instanceof Token;\n    });\n    if (!isNaN(startIndex) && this.inboundIndex(startIndex) && isTokenType) {\n        var replaced = this.tokens.splice.apply(this.tokens, [\n            startIndex,\n            offset\n        ].concat(tokens));\n        if (!silent) {\n            this.dispatch(\"replaceToken\", [\n                startIndex,\n                offset,\n                tokens\n            ]);\n        }\n        return [\n            replaced,\n            tokens\n        ];\n    } else {\n        return {\n            FAIL: \"replaceRange: invalid tokens or startIndex.\"\n        };\n    }\n};\nTokenizer.prototype.replaceToken = function(index, token, silent) {\n    if (!isNaN(index) && this.inboundIndex(index) && token instanceof Token) {\n        var replaced = this.tokens.splice(index, 1, token);\n        if (!silent) {\n            this.dispatch(\"replaceToken\", [\n                index,\n                token\n            ]);\n        }\n        return [\n            replaced[0],\n            token\n        ];\n    } else {\n        return {\n            FAIL: \"replaceToken: invalid token or index.\"\n        };\n    }\n};\nTokenizer.prototype.removeRange = function(startIndex, offset, silent) {\n    offset = !isNaN(offset) ? offset : this.tokens.length;\n    var tokens = this.tokens.splice(startIndex, offset);\n    if (!silent) {\n        this.dispatch(\"removeRange\", [\n            tokens,\n            startIndex,\n            offset\n        ]);\n    }\n    return tokens;\n};\nTokenizer.prototype.removeToken = function(index, silent) {\n    if (!isNaN(index) && this.inboundIndex(index)) {\n        var token = this.tokens.splice(index, 1);\n        if (!silent) {\n            this.dispatch(\"removeToken\", [\n                token,\n                index\n            ]);\n        }\n        return token;\n    } else {\n        return {\n            FAIL: \"removeToken: invalid token index.\"\n        };\n    }\n};\nTokenizer.prototype.insertToken = function(tokens, index, silent) {\n    var tokenType = tokens.every(function(token) {\n        return token instanceof Token;\n    });\n    if (tokenType) {\n        this.tokens.splice.apply(this.tokens, [\n            index,\n            0\n        ].concat(tokens));\n        if (!silent) {\n            this.dispatch(\"insertToken\", [\n                tokens,\n                index\n            ]);\n        }\n        return tokens;\n    } else {\n        return {\n            FAIL: \"insertToken: invalid token(s).\"\n        };\n    }\n};\nTokenizer.prototype.registerModifier = function(modifierId, condition, modifier) {\n    this.events.newToken.subscribe(function(token, contextParams) {\n        var conditionParams = [\n            token,\n            contextParams\n        ];\n        var canApplyModifier = condition === null || condition.apply(this, conditionParams) === true;\n        var modifierParams = [\n            token,\n            contextParams\n        ];\n        if (canApplyModifier) {\n            var newStateValue = modifier.apply(this, modifierParams);\n            token.setState(modifierId, newStateValue);\n        }\n    });\n    this.registeredModifiers.push(modifierId);\n};\nEvent.prototype.subscribe = function(eventHandler) {\n    if (typeof eventHandler === \"function\") {\n        return this.subscribers.push(eventHandler) - 1;\n    } else {\n        return {\n            FAIL: \"invalid '\" + this.eventId + \"' event handler\"\n        };\n    }\n};\nEvent.prototype.unsubscribe = function(subsId) {\n    this.subscribers.splice(subsId, 1);\n};\nContextParams.prototype.setCurrentIndex = function(index) {\n    this.index = index;\n    this.current = this.context[index];\n    this.backtrack = this.context.slice(0, index);\n    this.lookahead = this.context.slice(index + 1);\n};\nContextParams.prototype.get = function(offset) {\n    switch(true){\n        case offset === 0:\n            return this.current;\n        case offset < 0 && Math.abs(offset) <= this.backtrack.length:\n            return this.backtrack.slice(offset)[0];\n        case offset > 0 && offset <= this.lookahead.length:\n            return this.lookahead[offset - 1];\n        default:\n            return null;\n    }\n};\nTokenizer.prototype.rangeToText = function(range) {\n    if (range instanceof ContextRange) {\n        return this.getRangeTokens(range).map(function(token) {\n            return token.char;\n        }).join(\"\");\n    }\n};\nTokenizer.prototype.getText = function() {\n    return this.tokens.map(function(token) {\n        return token.char;\n    }).join(\"\");\n};\nTokenizer.prototype.getContext = function(contextName) {\n    var context = this.registeredContexts[contextName];\n    return !!context ? context : null;\n};\nTokenizer.prototype.on = function(eventName, eventHandler) {\n    var event = this.events[eventName];\n    if (!!event) {\n        return event.subscribe(eventHandler);\n    } else {\n        return null;\n    }\n};\nTokenizer.prototype.dispatch = function(eventName, args) {\n    var this$1 = this;\n    var event = this.events[eventName];\n    if (event instanceof Event) {\n        event.subscribers.forEach(function(subscriber) {\n            subscriber.apply(this$1, args || []);\n        });\n    }\n};\nTokenizer.prototype.registerContextChecker = function(contextName, contextStartCheck, contextEndCheck) {\n    if (!!this.getContext(contextName)) {\n        return {\n            FAIL: \"context name '\" + contextName + \"' is already registered.\"\n        };\n    }\n    if (typeof contextStartCheck !== \"function\") {\n        return {\n            FAIL: \"missing context start check.\"\n        };\n    }\n    if (typeof contextEndCheck !== \"function\") {\n        return {\n            FAIL: \"missing context end check.\"\n        };\n    }\n    var contextCheckers = new ContextChecker(contextName, contextStartCheck, contextEndCheck);\n    this.registeredContexts[contextName] = contextCheckers;\n    this.contextCheckers.push(contextCheckers);\n    return contextCheckers;\n};\nTokenizer.prototype.getRangeTokens = function(range) {\n    var endIndex = range.startIndex + range.endOffset;\n    return [].concat(this.tokens.slice(range.startIndex, endIndex));\n};\nTokenizer.prototype.getContextRanges = function(contextName) {\n    var context = this.getContext(contextName);\n    if (!!context) {\n        return context.ranges;\n    } else {\n        return {\n            FAIL: \"context checker '\" + contextName + \"' is not registered.\"\n        };\n    }\n};\nTokenizer.prototype.resetContextsRanges = function() {\n    var registeredContexts = this.registeredContexts;\n    for(var contextName in registeredContexts){\n        if (registeredContexts.hasOwnProperty(contextName)) {\n            var context = registeredContexts[contextName];\n            context.ranges = [];\n        }\n    }\n};\nTokenizer.prototype.updateContextsRanges = function() {\n    this.resetContextsRanges();\n    var chars = this.tokens.map(function(token) {\n        return token.char;\n    });\n    for(var i = 0; i < chars.length; i++){\n        var contextParams = new ContextParams(chars, i);\n        this.runContextCheck(contextParams);\n    }\n    this.dispatch(\"updateContextsRanges\", [\n        this.registeredContexts\n    ]);\n};\nTokenizer.prototype.setEndOffset = function(offset, contextName) {\n    var startIndex = this.getContext(contextName).openRange.startIndex;\n    var range = new ContextRange(startIndex, offset, contextName);\n    var ranges = this.getContext(contextName).ranges;\n    range.rangeId = contextName + \".\" + ranges.length;\n    ranges.push(range);\n    this.getContext(contextName).openRange = null;\n    return range;\n};\nTokenizer.prototype.runContextCheck = function(contextParams) {\n    var this$1 = this;\n    var index = contextParams.index;\n    this.contextCheckers.forEach(function(contextChecker) {\n        var contextName = contextChecker.contextName;\n        var openRange = this$1.getContext(contextName).openRange;\n        if (!openRange && contextChecker.checkStart(contextParams)) {\n            openRange = new ContextRange(index, null, contextName);\n            this$1.getContext(contextName).openRange = openRange;\n            this$1.dispatch(\"contextStart\", [\n                contextName,\n                index\n            ]);\n        }\n        if (!!openRange && contextChecker.checkEnd(contextParams)) {\n            var offset = index - openRange.startIndex + 1;\n            var range = this$1.setEndOffset(offset, contextName);\n            this$1.dispatch(\"contextEnd\", [\n                contextName,\n                range\n            ]);\n        }\n    });\n};\nTokenizer.prototype.tokenize = function(text) {\n    this.tokens = [];\n    this.resetContextsRanges();\n    var chars = Array.from(text);\n    this.dispatch(\"start\");\n    for(var i = 0; i < chars.length; i++){\n        var char = chars[i];\n        var contextParams = new ContextParams(chars, i);\n        this.dispatch(\"next\", [\n            contextParams\n        ]);\n        this.runContextCheck(contextParams);\n        var token = new Token(char);\n        this.tokens.push(token);\n        this.dispatch(\"newToken\", [\n            token,\n            contextParams\n        ]);\n    }\n    this.dispatch(\"end\", [\n        this.tokens\n    ]);\n    return this.tokens;\n};\nfunction isArabicChar(c) {\n    return /[\\u0600-\\u065F\\u066A-\\u06D2\\u06FA-\\u06FF]/.test(c);\n}\nfunction isIsolatedArabicChar(char) {\n    return /[\\u0630\\u0690\\u0621\\u0631\\u0661\\u0671\\u0622\\u0632\\u0672\\u0692\\u06C2\\u0623\\u0673\\u0693\\u06C3\\u0624\\u0694\\u06C4\\u0625\\u0675\\u0695\\u06C5\\u06E5\\u0676\\u0696\\u06C6\\u0627\\u0677\\u0697\\u06C7\\u0648\\u0688\\u0698\\u06C8\\u0689\\u0699\\u06C9\\u068A\\u06CA\\u066B\\u068B\\u06CB\\u068C\\u068D\\u06CD\\u06FD\\u068E\\u06EE\\u06FE\\u062F\\u068F\\u06CF\\u06EF]/.test(char);\n}\nfunction isTashkeelArabicChar(char) {\n    return /[\\u0600-\\u0605\\u060C-\\u060E\\u0610-\\u061B\\u061E\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED]/.test(char);\n}\nfunction isLatinChar(c) {\n    return /[A-z]/.test(c);\n}\nfunction isWhiteSpace(c) {\n    return /\\s/.test(c);\n}\nfunction FeatureQuery(font) {\n    this.font = font;\n    this.features = {};\n}\nfunction SubstitutionAction(action) {\n    this.id = action.id;\n    this.tag = action.tag;\n    this.substitution = action.substitution;\n}\nfunction lookupCoverage(glyphIndex, coverage) {\n    if (!glyphIndex) {\n        return -1;\n    }\n    switch(coverage.format){\n        case 1:\n            return coverage.glyphs.indexOf(glyphIndex);\n        case 2:\n            var ranges = coverage.ranges;\n            for(var i = 0; i < ranges.length; i++){\n                var range = ranges[i];\n                if (glyphIndex >= range.start && glyphIndex <= range.end) {\n                    var offset = glyphIndex - range.start;\n                    return range.index + offset;\n                }\n            }\n            break;\n        default:\n            return -1;\n    }\n    return -1;\n}\nfunction singleSubstitutionFormat1(glyphIndex, subtable) {\n    var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);\n    if (substituteIndex === -1) {\n        return null;\n    }\n    return glyphIndex + subtable.deltaGlyphId;\n}\nfunction singleSubstitutionFormat2(glyphIndex, subtable) {\n    var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);\n    if (substituteIndex === -1) {\n        return null;\n    }\n    return subtable.substitute[substituteIndex];\n}\nfunction lookupCoverageList(coverageList, contextParams) {\n    var lookupList = [];\n    for(var i = 0; i < coverageList.length; i++){\n        var coverage = coverageList[i];\n        var glyphIndex = contextParams.current;\n        glyphIndex = Array.isArray(glyphIndex) ? glyphIndex[0] : glyphIndex;\n        var lookupIndex = lookupCoverage(glyphIndex, coverage);\n        if (lookupIndex !== -1) {\n            lookupList.push(lookupIndex);\n        }\n    }\n    if (lookupList.length !== coverageList.length) {\n        return -1;\n    }\n    return lookupList;\n}\nfunction chainingSubstitutionFormat3(contextParams, subtable) {\n    var lookupsCount = subtable.inputCoverage.length + subtable.lookaheadCoverage.length + subtable.backtrackCoverage.length;\n    if (contextParams.context.length < lookupsCount) {\n        return [];\n    }\n    var inputLookups = lookupCoverageList(subtable.inputCoverage, contextParams);\n    if (inputLookups === -1) {\n        return [];\n    }\n    var lookaheadOffset = subtable.inputCoverage.length - 1;\n    if (contextParams.lookahead.length < subtable.lookaheadCoverage.length) {\n        return [];\n    }\n    var lookaheadContext = contextParams.lookahead.slice(lookaheadOffset);\n    while(lookaheadContext.length && isTashkeelArabicChar(lookaheadContext[0].char)){\n        lookaheadContext.shift();\n    }\n    var lookaheadParams = new ContextParams(lookaheadContext, 0);\n    var lookaheadLookups = lookupCoverageList(subtable.lookaheadCoverage, lookaheadParams);\n    var backtrackContext = [].concat(contextParams.backtrack);\n    backtrackContext.reverse();\n    while(backtrackContext.length && isTashkeelArabicChar(backtrackContext[0].char)){\n        backtrackContext.shift();\n    }\n    if (backtrackContext.length < subtable.backtrackCoverage.length) {\n        return [];\n    }\n    var backtrackParams = new ContextParams(backtrackContext, 0);\n    var backtrackLookups = lookupCoverageList(subtable.backtrackCoverage, backtrackParams);\n    var contextRulesMatch = inputLookups.length === subtable.inputCoverage.length && lookaheadLookups.length === subtable.lookaheadCoverage.length && backtrackLookups.length === subtable.backtrackCoverage.length;\n    var substitutions = [];\n    if (contextRulesMatch) {\n        for(var i = 0; i < subtable.lookupRecords.length; i++){\n            var lookupRecord = subtable.lookupRecords[i];\n            var lookupListIndex = lookupRecord.lookupListIndex;\n            var lookupTable = this.getLookupByIndex(lookupListIndex);\n            for(var s = 0; s < lookupTable.subtables.length; s++){\n                var subtable$1 = lookupTable.subtables[s];\n                var lookup = this.getLookupMethod(lookupTable, subtable$1);\n                var substitutionType = this.getSubstitutionType(lookupTable, subtable$1);\n                if (substitutionType === \"12\") {\n                    for(var n = 0; n < inputLookups.length; n++){\n                        var glyphIndex = contextParams.get(n);\n                        var substitution = lookup(glyphIndex);\n                        if (substitution) {\n                            substitutions.push(substitution);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return substitutions;\n}\nfunction ligatureSubstitutionFormat1(contextParams, subtable) {\n    var glyphIndex = contextParams.current;\n    var ligSetIndex = lookupCoverage(glyphIndex, subtable.coverage);\n    if (ligSetIndex === -1) {\n        return null;\n    }\n    var ligature;\n    var ligatureSet = subtable.ligatureSets[ligSetIndex];\n    for(var s = 0; s < ligatureSet.length; s++){\n        ligature = ligatureSet[s];\n        for(var l = 0; l < ligature.components.length; l++){\n            var lookaheadItem = contextParams.lookahead[l];\n            var component = ligature.components[l];\n            if (lookaheadItem !== component) {\n                break;\n            }\n            if (l === ligature.components.length - 1) {\n                return ligature;\n            }\n        }\n    }\n    return null;\n}\nfunction decompositionSubstitutionFormat1(glyphIndex, subtable) {\n    var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);\n    if (substituteIndex === -1) {\n        return null;\n    }\n    return subtable.sequences[substituteIndex];\n}\nFeatureQuery.prototype.getDefaultScriptFeaturesIndexes = function() {\n    var scripts = this.font.tables.gsub.scripts;\n    for(var s = 0; s < scripts.length; s++){\n        var script = scripts[s];\n        if (script.tag === \"DFLT\") {\n            return script.script.defaultLangSys.featureIndexes;\n        }\n    }\n    return [];\n};\nFeatureQuery.prototype.getScriptFeaturesIndexes = function(scriptTag) {\n    var tables = this.font.tables;\n    if (!tables.gsub) {\n        return [];\n    }\n    if (!scriptTag) {\n        return this.getDefaultScriptFeaturesIndexes();\n    }\n    var scripts = this.font.tables.gsub.scripts;\n    for(var i = 0; i < scripts.length; i++){\n        var script = scripts[i];\n        if (script.tag === scriptTag && script.script.defaultLangSys) {\n            return script.script.defaultLangSys.featureIndexes;\n        } else {\n            var langSysRecords = script.langSysRecords;\n            if (!!langSysRecords) {\n                for(var j = 0; j < langSysRecords.length; j++){\n                    var langSysRecord = langSysRecords[j];\n                    if (langSysRecord.tag === scriptTag) {\n                        var langSys = langSysRecord.langSys;\n                        return langSys.featureIndexes;\n                    }\n                }\n            }\n        }\n    }\n    return this.getDefaultScriptFeaturesIndexes();\n};\nFeatureQuery.prototype.mapTagsToFeatures = function(features, scriptTag) {\n    var tags = {};\n    for(var i = 0; i < features.length; i++){\n        var tag = features[i].tag;\n        var feature = features[i].feature;\n        tags[tag] = feature;\n    }\n    this.features[scriptTag].tags = tags;\n};\nFeatureQuery.prototype.getScriptFeatures = function(scriptTag) {\n    var features = this.features[scriptTag];\n    if (this.features.hasOwnProperty(scriptTag)) {\n        return features;\n    }\n    var featuresIndexes = this.getScriptFeaturesIndexes(scriptTag);\n    if (!featuresIndexes) {\n        return null;\n    }\n    var gsub2 = this.font.tables.gsub;\n    features = featuresIndexes.map(function(index) {\n        return gsub2.features[index];\n    });\n    this.features[scriptTag] = features;\n    this.mapTagsToFeatures(features, scriptTag);\n    return features;\n};\nFeatureQuery.prototype.getSubstitutionType = function(lookupTable, subtable) {\n    var lookupType = lookupTable.lookupType.toString();\n    var substFormat = subtable.substFormat.toString();\n    return lookupType + substFormat;\n};\nFeatureQuery.prototype.getLookupMethod = function(lookupTable, subtable) {\n    var this$1 = this;\n    var substitutionType = this.getSubstitutionType(lookupTable, subtable);\n    switch(substitutionType){\n        case \"11\":\n            return function(glyphIndex) {\n                return singleSubstitutionFormat1.apply(this$1, [\n                    glyphIndex,\n                    subtable\n                ]);\n            };\n        case \"12\":\n            return function(glyphIndex) {\n                return singleSubstitutionFormat2.apply(this$1, [\n                    glyphIndex,\n                    subtable\n                ]);\n            };\n        case \"63\":\n            return function(contextParams) {\n                return chainingSubstitutionFormat3.apply(this$1, [\n                    contextParams,\n                    subtable\n                ]);\n            };\n        case \"41\":\n            return function(contextParams) {\n                return ligatureSubstitutionFormat1.apply(this$1, [\n                    contextParams,\n                    subtable\n                ]);\n            };\n        case \"21\":\n            return function(glyphIndex) {\n                return decompositionSubstitutionFormat1.apply(this$1, [\n                    glyphIndex,\n                    subtable\n                ]);\n            };\n        default:\n            throw new Error(\"lookupType: \" + lookupTable.lookupType + \" - substFormat: \" + subtable.substFormat + \" is not yet supported\");\n    }\n};\nFeatureQuery.prototype.lookupFeature = function(query) {\n    var contextParams = query.contextParams;\n    var currentIndex = contextParams.index;\n    var feature = this.getFeature({\n        tag: query.tag,\n        script: query.script\n    });\n    if (!feature) {\n        return new Error(\"font '\" + this.font.names.fullName.en + \"' doesn't support feature '\" + query.tag + \"' for script '\" + query.script + \"'.\");\n    }\n    var lookups = this.getFeatureLookups(feature);\n    var substitutions = [].concat(contextParams.context);\n    for(var l = 0; l < lookups.length; l++){\n        var lookupTable = lookups[l];\n        var subtables = this.getLookupSubtables(lookupTable);\n        for(var s = 0; s < subtables.length; s++){\n            var subtable = subtables[s];\n            var substType = this.getSubstitutionType(lookupTable, subtable);\n            var lookup = this.getLookupMethod(lookupTable, subtable);\n            var substitution = void 0;\n            switch(substType){\n                case \"11\":\n                    substitution = lookup(contextParams.current);\n                    if (substitution) {\n                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                            id: 11,\n                            tag: query.tag,\n                            substitution\n                        }));\n                    }\n                    break;\n                case \"12\":\n                    substitution = lookup(contextParams.current);\n                    if (substitution) {\n                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                            id: 12,\n                            tag: query.tag,\n                            substitution\n                        }));\n                    }\n                    break;\n                case \"63\":\n                    substitution = lookup(contextParams);\n                    if (Array.isArray(substitution) && substitution.length) {\n                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                            id: 63,\n                            tag: query.tag,\n                            substitution\n                        }));\n                    }\n                    break;\n                case \"41\":\n                    substitution = lookup(contextParams);\n                    if (substitution) {\n                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                            id: 41,\n                            tag: query.tag,\n                            substitution\n                        }));\n                    }\n                    break;\n                case \"21\":\n                    substitution = lookup(contextParams.current);\n                    if (substitution) {\n                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                            id: 21,\n                            tag: query.tag,\n                            substitution\n                        }));\n                    }\n                    break;\n            }\n            contextParams = new ContextParams(substitutions, currentIndex);\n            if (Array.isArray(substitution) && !substitution.length) {\n                continue;\n            }\n            substitution = null;\n        }\n    }\n    return substitutions.length ? substitutions : null;\n};\nFeatureQuery.prototype.supports = function(query) {\n    if (!query.script) {\n        return false;\n    }\n    this.getScriptFeatures(query.script);\n    var supportedScript = this.features.hasOwnProperty(query.script);\n    if (!query.tag) {\n        return supportedScript;\n    }\n    var supportedFeature = this.features[query.script].some(function(feature) {\n        return feature.tag === query.tag;\n    });\n    return supportedScript && supportedFeature;\n};\nFeatureQuery.prototype.getLookupSubtables = function(lookupTable) {\n    return lookupTable.subtables || null;\n};\nFeatureQuery.prototype.getLookupByIndex = function(index) {\n    var lookups = this.font.tables.gsub.lookups;\n    return lookups[index] || null;\n};\nFeatureQuery.prototype.getFeatureLookups = function(feature) {\n    return feature.lookupListIndexes.map(this.getLookupByIndex.bind(this));\n};\nFeatureQuery.prototype.getFeature = function getFeature(query) {\n    if (!this.font) {\n        return {\n            FAIL: \"No font was found\"\n        };\n    }\n    if (!this.features.hasOwnProperty(query.script)) {\n        this.getScriptFeatures(query.script);\n    }\n    var scriptFeatures = this.features[query.script];\n    if (!scriptFeatures) {\n        return {\n            FAIL: \"No feature for script \" + query.script\n        };\n    }\n    if (!scriptFeatures.tags[query.tag]) {\n        return null;\n    }\n    return this.features[query.script].tags[query.tag];\n};\nfunction arabicWordStartCheck(contextParams) {\n    var char = contextParams.current;\n    var prevChar = contextParams.get(-1);\n    return prevChar === null && isArabicChar(char) || !isArabicChar(prevChar) && isArabicChar(char);\n}\nfunction arabicWordEndCheck(contextParams) {\n    var nextChar = contextParams.get(1);\n    return nextChar === null || !isArabicChar(nextChar);\n}\nvar arabicWordCheck = {\n    startCheck: arabicWordStartCheck,\n    endCheck: arabicWordEndCheck\n};\nfunction arabicSentenceStartCheck(contextParams) {\n    var char = contextParams.current;\n    var prevChar = contextParams.get(-1);\n    return (isArabicChar(char) || isTashkeelArabicChar(char)) && !isArabicChar(prevChar);\n}\nfunction arabicSentenceEndCheck(contextParams) {\n    var nextChar = contextParams.get(1);\n    switch(true){\n        case nextChar === null:\n            return true;\n        case !isArabicChar(nextChar) && !isTashkeelArabicChar(nextChar):\n            var nextIsWhitespace = isWhiteSpace(nextChar);\n            if (!nextIsWhitespace) {\n                return true;\n            }\n            if (nextIsWhitespace) {\n                var arabicCharAhead = false;\n                arabicCharAhead = contextParams.lookahead.some(function(c) {\n                    return isArabicChar(c) || isTashkeelArabicChar(c);\n                });\n                if (!arabicCharAhead) {\n                    return true;\n                }\n            }\n            break;\n        default:\n            return false;\n    }\n}\nvar arabicSentenceCheck = {\n    startCheck: arabicSentenceStartCheck,\n    endCheck: arabicSentenceEndCheck\n};\nfunction singleSubstitutionFormat1$1(action, tokens, index) {\n    tokens[index].setState(action.tag, action.substitution);\n}\nfunction singleSubstitutionFormat2$1(action, tokens, index) {\n    tokens[index].setState(action.tag, action.substitution);\n}\nfunction chainingSubstitutionFormat3$1(action, tokens, index) {\n    action.substitution.forEach(function(subst, offset) {\n        var token = tokens[index + offset];\n        token.setState(action.tag, subst);\n    });\n}\nfunction ligatureSubstitutionFormat1$1(action, tokens, index) {\n    var token = tokens[index];\n    token.setState(action.tag, action.substitution.ligGlyph);\n    var compsCount = action.substitution.components.length;\n    for(var i = 0; i < compsCount; i++){\n        token = tokens[index + i + 1];\n        token.setState(\"deleted\", true);\n    }\n}\nvar SUBSTITUTIONS = {\n    11: singleSubstitutionFormat1$1,\n    12: singleSubstitutionFormat2$1,\n    63: chainingSubstitutionFormat3$1,\n    41: ligatureSubstitutionFormat1$1\n};\nfunction applySubstitution(action, tokens, index) {\n    if (action instanceof SubstitutionAction && SUBSTITUTIONS[action.id]) {\n        SUBSTITUTIONS[action.id](action, tokens, index);\n    }\n}\nfunction willConnectPrev(charContextParams) {\n    var backtrack = [].concat(charContextParams.backtrack);\n    for(var i = backtrack.length - 1; i >= 0; i--){\n        var prevChar = backtrack[i];\n        var isolated = isIsolatedArabicChar(prevChar);\n        var tashkeel = isTashkeelArabicChar(prevChar);\n        if (!isolated && !tashkeel) {\n            return true;\n        }\n        if (isolated) {\n            return false;\n        }\n    }\n    return false;\n}\nfunction willConnectNext(charContextParams) {\n    if (isIsolatedArabicChar(charContextParams.current)) {\n        return false;\n    }\n    for(var i = 0; i < charContextParams.lookahead.length; i++){\n        var nextChar = charContextParams.lookahead[i];\n        var tashkeel = isTashkeelArabicChar(nextChar);\n        if (!tashkeel) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction arabicPresentationForms(range) {\n    var this$1 = this;\n    var script = \"arab\";\n    var tags = this.featuresTags[script];\n    var tokens = this.tokenizer.getRangeTokens(range);\n    if (tokens.length === 1) {\n        return;\n    }\n    var contextParams = new ContextParams(tokens.map(function(token) {\n        return token.getState(\"glyphIndex\");\n    }), 0);\n    var charContextParams = new ContextParams(tokens.map(function(token) {\n        return token.char;\n    }), 0);\n    tokens.forEach(function(token, index) {\n        if (isTashkeelArabicChar(token.char)) {\n            return;\n        }\n        contextParams.setCurrentIndex(index);\n        charContextParams.setCurrentIndex(index);\n        var CONNECT = 0;\n        if (willConnectPrev(charContextParams)) {\n            CONNECT |= 1;\n        }\n        if (willConnectNext(charContextParams)) {\n            CONNECT |= 2;\n        }\n        var tag;\n        switch(CONNECT){\n            case 1:\n                tag = \"fina\";\n                break;\n            case 2:\n                tag = \"init\";\n                break;\n            case 3:\n                tag = \"medi\";\n                break;\n        }\n        if (tags.indexOf(tag) === -1) {\n            return;\n        }\n        var substitutions = this$1.query.lookupFeature({\n            tag,\n            script,\n            contextParams\n        });\n        if (substitutions instanceof Error) {\n            return console.info(substitutions.message);\n        }\n        substitutions.forEach(function(action, index2) {\n            if (action instanceof SubstitutionAction) {\n                applySubstitution(action, tokens, index2);\n                contextParams.context[index2] = action.substitution;\n            }\n        });\n    });\n}\nfunction getContextParams(tokens, index) {\n    var context = tokens.map(function(token) {\n        return token.activeState.value;\n    });\n    return new ContextParams(context, index || 0);\n}\nfunction arabicRequiredLigatures(range) {\n    var this$1 = this;\n    var script = \"arab\";\n    var tokens = this.tokenizer.getRangeTokens(range);\n    var contextParams = getContextParams(tokens);\n    contextParams.context.forEach(function(glyphIndex, index) {\n        contextParams.setCurrentIndex(index);\n        var substitutions = this$1.query.lookupFeature({\n            tag: \"rlig\",\n            script,\n            contextParams\n        });\n        if (substitutions.length) {\n            substitutions.forEach(function(action) {\n                return applySubstitution(action, tokens, index);\n            });\n            contextParams = getContextParams(tokens);\n        }\n    });\n}\nfunction latinWordStartCheck(contextParams) {\n    var char = contextParams.current;\n    var prevChar = contextParams.get(-1);\n    return prevChar === null && isLatinChar(char) || !isLatinChar(prevChar) && isLatinChar(char);\n}\nfunction latinWordEndCheck(contextParams) {\n    var nextChar = contextParams.get(1);\n    return nextChar === null || !isLatinChar(nextChar);\n}\nvar latinWordCheck = {\n    startCheck: latinWordStartCheck,\n    endCheck: latinWordEndCheck\n};\nfunction getContextParams$1(tokens, index) {\n    var context = tokens.map(function(token) {\n        return token.activeState.value;\n    });\n    return new ContextParams(context, index || 0);\n}\nfunction latinLigature(range) {\n    var this$1 = this;\n    var script = \"latn\";\n    var tokens = this.tokenizer.getRangeTokens(range);\n    var contextParams = getContextParams$1(tokens);\n    contextParams.context.forEach(function(glyphIndex, index) {\n        contextParams.setCurrentIndex(index);\n        var substitutions = this$1.query.lookupFeature({\n            tag: \"liga\",\n            script,\n            contextParams\n        });\n        if (substitutions.length) {\n            substitutions.forEach(function(action) {\n                return applySubstitution(action, tokens, index);\n            });\n            contextParams = getContextParams$1(tokens);\n        }\n    });\n}\nfunction Bidi(baseDir) {\n    this.baseDir = baseDir || \"ltr\";\n    this.tokenizer = new Tokenizer();\n    this.featuresTags = {};\n}\nBidi.prototype.setText = function(text) {\n    this.text = text;\n};\nBidi.prototype.contextChecks = {\n    latinWordCheck,\n    arabicWordCheck,\n    arabicSentenceCheck\n};\nfunction registerContextChecker(checkId) {\n    var check2 = this.contextChecks[checkId + \"Check\"];\n    return this.tokenizer.registerContextChecker(checkId, check2.startCheck, check2.endCheck);\n}\nfunction tokenizeText() {\n    registerContextChecker.call(this, \"latinWord\");\n    registerContextChecker.call(this, \"arabicWord\");\n    registerContextChecker.call(this, \"arabicSentence\");\n    return this.tokenizer.tokenize(this.text);\n}\nfunction reverseArabicSentences() {\n    var this$1 = this;\n    var ranges = this.tokenizer.getContextRanges(\"arabicSentence\");\n    ranges.forEach(function(range) {\n        var rangeTokens = this$1.tokenizer.getRangeTokens(range);\n        this$1.tokenizer.replaceRange(range.startIndex, range.endOffset, rangeTokens.reverse());\n    });\n}\nBidi.prototype.registerFeatures = function(script, tags) {\n    var this$1 = this;\n    var supportedTags = tags.filter(function(tag) {\n        return this$1.query.supports({\n            script,\n            tag\n        });\n    });\n    if (!this.featuresTags.hasOwnProperty(script)) {\n        this.featuresTags[script] = supportedTags;\n    } else {\n        this.featuresTags[script] = this.featuresTags[script].concat(supportedTags);\n    }\n};\nBidi.prototype.applyFeatures = function(font, features) {\n    if (!font) {\n        throw new Error(\"No valid font was provided to apply features\");\n    }\n    if (!this.query) {\n        this.query = new FeatureQuery(font);\n    }\n    for(var f = 0; f < features.length; f++){\n        var feature = features[f];\n        if (!this.query.supports({\n            script: feature.script\n        })) {\n            continue;\n        }\n        this.registerFeatures(feature.script, feature.tags);\n    }\n};\nBidi.prototype.registerModifier = function(modifierId, condition, modifier) {\n    this.tokenizer.registerModifier(modifierId, condition, modifier);\n};\nfunction checkGlyphIndexStatus() {\n    if (this.tokenizer.registeredModifiers.indexOf(\"glyphIndex\") === -1) {\n        throw new Error(\"glyphIndex modifier is required to apply arabic presentation features.\");\n    }\n}\nfunction applyArabicPresentationForms() {\n    var this$1 = this;\n    var script = \"arab\";\n    if (!this.featuresTags.hasOwnProperty(script)) {\n        return;\n    }\n    checkGlyphIndexStatus.call(this);\n    var ranges = this.tokenizer.getContextRanges(\"arabicWord\");\n    ranges.forEach(function(range) {\n        arabicPresentationForms.call(this$1, range);\n    });\n}\nfunction applyArabicRequireLigatures() {\n    var this$1 = this;\n    var script = \"arab\";\n    if (!this.featuresTags.hasOwnProperty(script)) {\n        return;\n    }\n    var tags = this.featuresTags[script];\n    if (tags.indexOf(\"rlig\") === -1) {\n        return;\n    }\n    checkGlyphIndexStatus.call(this);\n    var ranges = this.tokenizer.getContextRanges(\"arabicWord\");\n    ranges.forEach(function(range) {\n        arabicRequiredLigatures.call(this$1, range);\n    });\n}\nfunction applyLatinLigatures() {\n    var this$1 = this;\n    var script = \"latn\";\n    if (!this.featuresTags.hasOwnProperty(script)) {\n        return;\n    }\n    var tags = this.featuresTags[script];\n    if (tags.indexOf(\"liga\") === -1) {\n        return;\n    }\n    checkGlyphIndexStatus.call(this);\n    var ranges = this.tokenizer.getContextRanges(\"latinWord\");\n    ranges.forEach(function(range) {\n        latinLigature.call(this$1, range);\n    });\n}\nBidi.prototype.checkContextReady = function(contextId) {\n    return !!this.tokenizer.getContext(contextId);\n};\nBidi.prototype.applyFeaturesToContexts = function() {\n    if (this.checkContextReady(\"arabicWord\")) {\n        applyArabicPresentationForms.call(this);\n        applyArabicRequireLigatures.call(this);\n    }\n    if (this.checkContextReady(\"latinWord\")) {\n        applyLatinLigatures.call(this);\n    }\n    if (this.checkContextReady(\"arabicSentence\")) {\n        reverseArabicSentences.call(this);\n    }\n};\nBidi.prototype.processText = function(text) {\n    if (!this.text || this.text !== text) {\n        this.setText(text);\n        tokenizeText.call(this);\n        this.applyFeaturesToContexts();\n    }\n};\nBidi.prototype.getBidiText = function(text) {\n    this.processText(text);\n    return this.tokenizer.getText();\n};\nBidi.prototype.getTextGlyphs = function(text) {\n    this.processText(text);\n    var indexes = [];\n    for(var i = 0; i < this.tokenizer.tokens.length; i++){\n        var token = this.tokenizer.tokens[i];\n        if (token.state.deleted) {\n            continue;\n        }\n        var index = token.activeState.value;\n        indexes.push(Array.isArray(index) ? index[0] : index);\n    }\n    return indexes;\n};\nfunction Font(options) {\n    options = options || {};\n    options.tables = options.tables || {};\n    if (!options.empty) {\n        checkArgument(options.familyName, \"When creating a new Font object, familyName is required.\");\n        checkArgument(options.styleName, \"When creating a new Font object, styleName is required.\");\n        checkArgument(options.unitsPerEm, \"When creating a new Font object, unitsPerEm is required.\");\n        checkArgument(options.ascender, \"When creating a new Font object, ascender is required.\");\n        checkArgument(options.descender <= 0, \"When creating a new Font object, negative descender value is required.\");\n        this.unitsPerEm = options.unitsPerEm || 1e3;\n        this.ascender = options.ascender;\n        this.descender = options.descender;\n        this.createdTimestamp = options.createdTimestamp;\n        this.tables = Object.assign(options.tables, {\n            os2: Object.assign({\n                usWeightClass: options.weightClass || this.usWeightClasses.MEDIUM,\n                usWidthClass: options.widthClass || this.usWidthClasses.MEDIUM,\n                fsSelection: options.fsSelection || this.fsSelectionValues.REGULAR\n            }, options.tables.os2)\n        });\n    }\n    this.supported = true;\n    this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);\n    this.encoding = new DefaultEncoding(this);\n    this.position = new Position(this);\n    this.substitution = new Substitution(this);\n    this.tables = this.tables || {};\n    this._push = null;\n    this._hmtxTableData = {};\n    Object.defineProperty(this, \"hinting\", {\n        get: function() {\n            if (this._hinting) {\n                return this._hinting;\n            }\n            if (this.outlinesFormat === \"truetype\") {\n                return this._hinting = new Hinting(this);\n            }\n        }\n    });\n}\nFont.prototype.hasChar = function(c) {\n    return this.encoding.charToGlyphIndex(c) !== null;\n};\nFont.prototype.charToGlyphIndex = function(s) {\n    return this.encoding.charToGlyphIndex(s);\n};\nFont.prototype.charToGlyph = function(c) {\n    var glyphIndex = this.charToGlyphIndex(c);\n    var glyph = this.glyphs.get(glyphIndex);\n    if (!glyph) {\n        glyph = this.glyphs.get(0);\n    }\n    return glyph;\n};\nFont.prototype.updateFeatures = function(options) {\n    return this.defaultRenderOptions.features.map(function(feature) {\n        if (feature.script === \"latn\") {\n            return {\n                script: \"latn\",\n                tags: feature.tags.filter(function(tag) {\n                    return options[tag];\n                })\n            };\n        } else {\n            return feature;\n        }\n    });\n};\nFont.prototype.stringToGlyphs = function(s, options) {\n    var this$1 = this;\n    var bidi = new Bidi();\n    var charToGlyphIndexMod = function(token) {\n        return this$1.charToGlyphIndex(token.char);\n    };\n    bidi.registerModifier(\"glyphIndex\", null, charToGlyphIndexMod);\n    var features = options ? this.updateFeatures(options.features) : this.defaultRenderOptions.features;\n    bidi.applyFeatures(this, features);\n    var indexes = bidi.getTextGlyphs(s);\n    var length = indexes.length;\n    var glyphs = new Array(length);\n    var notdef = this.glyphs.get(0);\n    for(var i = 0; i < length; i += 1){\n        glyphs[i] = this.glyphs.get(indexes[i]) || notdef;\n    }\n    return glyphs;\n};\nFont.prototype.getKerningValue = function(leftGlyph, rightGlyph) {\n    leftGlyph = leftGlyph.index || leftGlyph;\n    rightGlyph = rightGlyph.index || rightGlyph;\n    var gposKerning = this.position.defaultKerningTables;\n    if (gposKerning) {\n        return this.position.getKerningValue(gposKerning, leftGlyph, rightGlyph);\n    }\n    return this.kerningPairs[leftGlyph + \",\" + rightGlyph] || 0;\n};\nFont.prototype.defaultRenderOptions = {\n    kerning: true,\n    features: [\n        {\n            script: \"arab\",\n            tags: [\n                \"init\",\n                \"medi\",\n                \"fina\",\n                \"rlig\"\n            ]\n        },\n        {\n            script: \"latn\",\n            tags: [\n                \"liga\",\n                \"rlig\"\n            ]\n        }\n    ]\n};\nFont.prototype.forEachGlyph = function(text, x, y, fontSize, options, callback) {\n    x = x !== void 0 ? x : 0;\n    y = y !== void 0 ? y : 0;\n    fontSize = fontSize !== void 0 ? fontSize : 72;\n    options = Object.assign({}, this.defaultRenderOptions, options);\n    var fontScale = 1 / this.unitsPerEm * fontSize;\n    var glyphs = this.stringToGlyphs(text, options);\n    var kerningLookups;\n    if (options.kerning) {\n        var script = options.script || this.position.getDefaultScriptName();\n        kerningLookups = this.position.getKerningTables(script, options.language);\n    }\n    for(var i = 0; i < glyphs.length; i += 1){\n        var glyph = glyphs[i];\n        callback.call(this, glyph, x, y, fontSize, options);\n        if (glyph.advanceWidth) {\n            x += glyph.advanceWidth * fontScale;\n        }\n        if (options.kerning && i < glyphs.length - 1) {\n            var kerningValue = kerningLookups ? this.position.getKerningValue(kerningLookups, glyph.index, glyphs[i + 1].index) : this.getKerningValue(glyph, glyphs[i + 1]);\n            x += kerningValue * fontScale;\n        }\n        if (options.letterSpacing) {\n            x += options.letterSpacing * fontSize;\n        } else if (options.tracking) {\n            x += options.tracking / 1e3 * fontSize;\n        }\n    }\n    return x;\n};\nFont.prototype.getPath = function(text, x, y, fontSize, options) {\n    var fullPath = new Path();\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n        fullPath.extend(glyphPath);\n    });\n    return fullPath;\n};\nFont.prototype.getPaths = function(text, x, y, fontSize, options) {\n    var glyphPaths = [];\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n        glyphPaths.push(glyphPath);\n    });\n    return glyphPaths;\n};\nFont.prototype.getAdvanceWidth = function(text, fontSize, options) {\n    return this.forEachGlyph(text, 0, 0, fontSize, options, function() {});\n};\nFont.prototype.fsSelectionValues = {\n    ITALIC: 1,\n    UNDERSCORE: 2,\n    NEGATIVE: 4,\n    OUTLINED: 8,\n    STRIKEOUT: 16,\n    BOLD: 32,\n    REGULAR: 64,\n    USER_TYPO_METRICS: 128,\n    WWS: 256,\n    OBLIQUE: 512\n};\nFont.prototype.usWidthClasses = {\n    ULTRA_CONDENSED: 1,\n    EXTRA_CONDENSED: 2,\n    CONDENSED: 3,\n    SEMI_CONDENSED: 4,\n    MEDIUM: 5,\n    SEMI_EXPANDED: 6,\n    EXPANDED: 7,\n    EXTRA_EXPANDED: 8,\n    ULTRA_EXPANDED: 9\n};\nFont.prototype.usWeightClasses = {\n    THIN: 100,\n    EXTRA_LIGHT: 200,\n    LIGHT: 300,\n    NORMAL: 400,\n    MEDIUM: 500,\n    SEMI_BOLD: 600,\n    BOLD: 700,\n    EXTRA_BOLD: 800,\n    BLACK: 900\n};\nfunction parseCmapTableFormat12(cmap2, p) {\n    p.parseUShort();\n    cmap2.length = p.parseULong();\n    cmap2.language = p.parseULong();\n    var groupCount;\n    cmap2.groupCount = groupCount = p.parseULong();\n    cmap2.glyphIndexMap = {};\n    for(var i = 0; i < groupCount; i += 1){\n        var startCharCode = p.parseULong();\n        var endCharCode = p.parseULong();\n        var startGlyphId = p.parseULong();\n        for(var c = startCharCode; c <= endCharCode; c += 1){\n            cmap2.glyphIndexMap[c] = startGlyphId;\n            startGlyphId++;\n        }\n    }\n}\nfunction parseCmapTableFormat4(cmap2, p, data, start, offset) {\n    cmap2.length = p.parseUShort();\n    cmap2.language = p.parseUShort();\n    var segCount;\n    cmap2.segCount = segCount = p.parseUShort() >> 1;\n    p.skip(\"uShort\", 3);\n    cmap2.glyphIndexMap = {};\n    var endCountParser = new parse.Parser(data, start + offset + 14);\n    var startCountParser = new parse.Parser(data, start + offset + 16 + segCount * 2);\n    var idDeltaParser = new parse.Parser(data, start + offset + 16 + segCount * 4);\n    var idRangeOffsetParser = new parse.Parser(data, start + offset + 16 + segCount * 6);\n    var glyphIndexOffset = start + offset + 16 + segCount * 8;\n    for(var i = 0; i < segCount - 1; i += 1){\n        var glyphIndex = void 0;\n        var endCount = endCountParser.parseUShort();\n        var startCount = startCountParser.parseUShort();\n        var idDelta = idDeltaParser.parseShort();\n        var idRangeOffset = idRangeOffsetParser.parseUShort();\n        for(var c = startCount; c <= endCount; c += 1){\n            if (idRangeOffset !== 0) {\n                glyphIndexOffset = idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2;\n                glyphIndexOffset += idRangeOffset;\n                glyphIndexOffset += (c - startCount) * 2;\n                glyphIndex = parse.getUShort(data, glyphIndexOffset);\n                if (glyphIndex !== 0) {\n                    glyphIndex = glyphIndex + idDelta & 65535;\n                }\n            } else {\n                glyphIndex = c + idDelta & 65535;\n            }\n            cmap2.glyphIndexMap[c] = glyphIndex;\n        }\n    }\n}\nfunction parseCmapTable(data, start) {\n    var cmap2 = {};\n    cmap2.version = parse.getUShort(data, start);\n    check.argument(cmap2.version === 0, \"cmap table version should be 0.\");\n    cmap2.numTables = parse.getUShort(data, start + 2);\n    var offset = -1;\n    for(var i = cmap2.numTables - 1; i >= 0; i -= 1){\n        var platformId = parse.getUShort(data, start + 4 + i * 8);\n        var encodingId = parse.getUShort(data, start + 4 + i * 8 + 2);\n        if (platformId === 3 && (encodingId === 0 || encodingId === 1 || encodingId === 10) || platformId === 0 && (encodingId === 0 || encodingId === 1 || encodingId === 2 || encodingId === 3 || encodingId === 4)) {\n            offset = parse.getULong(data, start + 4 + i * 8 + 4);\n            break;\n        }\n    }\n    if (offset === -1) {\n        throw new Error(\"No valid cmap sub-tables found.\");\n    }\n    var p = new parse.Parser(data, start + offset);\n    cmap2.format = p.parseUShort();\n    if (cmap2.format === 12) {\n        parseCmapTableFormat12(cmap2, p);\n    } else if (cmap2.format === 4) {\n        parseCmapTableFormat4(cmap2, p, data, start, offset);\n    } else {\n        throw new Error(\"Only format 4 and 12 cmap tables are supported (found format \" + cmap2.format + \").\");\n    }\n    return cmap2;\n}\nvar cmap = {\n    parse: parseCmapTable\n};\nfunction calcCFFSubroutineBias(subrs) {\n    var bias;\n    if (subrs.length < 1240) {\n        bias = 107;\n    } else if (subrs.length < 33900) {\n        bias = 1131;\n    } else {\n        bias = 32768;\n    }\n    return bias;\n}\nfunction parseCFFIndex(data, start, conversionFn) {\n    var offsets = [];\n    var objects = [];\n    var count = parse.getCard16(data, start);\n    var objectOffset;\n    var endOffset;\n    if (count !== 0) {\n        var offsetSize = parse.getByte(data, start + 2);\n        objectOffset = start + (count + 1) * offsetSize + 2;\n        var pos = start + 3;\n        for(var i = 0; i < count + 1; i += 1){\n            offsets.push(parse.getOffset(data, pos, offsetSize));\n            pos += offsetSize;\n        }\n        endOffset = objectOffset + offsets[count];\n    } else {\n        endOffset = start + 2;\n    }\n    for(var i$1 = 0; i$1 < offsets.length - 1; i$1 += 1){\n        var value = parse.getBytes(data, objectOffset + offsets[i$1], objectOffset + offsets[i$1 + 1]);\n        if (conversionFn) {\n            value = conversionFn(value);\n        }\n        objects.push(value);\n    }\n    return {\n        objects,\n        startOffset: start,\n        endOffset\n    };\n}\nfunction parseCFFIndexLowMemory(data, start) {\n    var offsets = [];\n    var count = parse.getCard16(data, start);\n    var objectOffset;\n    var endOffset;\n    if (count !== 0) {\n        var offsetSize = parse.getByte(data, start + 2);\n        objectOffset = start + (count + 1) * offsetSize + 2;\n        var pos = start + 3;\n        for(var i = 0; i < count + 1; i += 1){\n            offsets.push(parse.getOffset(data, pos, offsetSize));\n            pos += offsetSize;\n        }\n        endOffset = objectOffset + offsets[count];\n    } else {\n        endOffset = start + 2;\n    }\n    return {\n        offsets,\n        startOffset: start,\n        endOffset\n    };\n}\nfunction getCffIndexObject(i, offsets, data, start, conversionFn) {\n    var count = parse.getCard16(data, start);\n    var objectOffset = 0;\n    if (count !== 0) {\n        var offsetSize = parse.getByte(data, start + 2);\n        objectOffset = start + (count + 1) * offsetSize + 2;\n    }\n    var value = parse.getBytes(data, objectOffset + offsets[i], objectOffset + offsets[i + 1]);\n    if (conversionFn) {\n        value = conversionFn(value);\n    }\n    return value;\n}\nfunction parseFloatOperand(parser) {\n    var s = \"\";\n    var eof = 15;\n    var lookup = [\n        \"0\",\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",\n        \"9\",\n        \".\",\n        \"E\",\n        \"E-\",\n        null,\n        \"-\"\n    ];\n    while(true){\n        var b = parser.parseByte();\n        var n1 = b >> 4;\n        var n2 = b & 15;\n        if (n1 === eof) {\n            break;\n        }\n        s += lookup[n1];\n        if (n2 === eof) {\n            break;\n        }\n        s += lookup[n2];\n    }\n    return parseFloat(s);\n}\nfunction parseOperand(parser, b0) {\n    var b1;\n    var b2;\n    var b3;\n    var b4;\n    if (b0 === 28) {\n        b1 = parser.parseByte();\n        b2 = parser.parseByte();\n        return b1 << 8 | b2;\n    }\n    if (b0 === 29) {\n        b1 = parser.parseByte();\n        b2 = parser.parseByte();\n        b3 = parser.parseByte();\n        b4 = parser.parseByte();\n        return b1 << 24 | b2 << 16 | b3 << 8 | b4;\n    }\n    if (b0 === 30) {\n        return parseFloatOperand(parser);\n    }\n    if (b0 >= 32 && b0 <= 246) {\n        return b0 - 139;\n    }\n    if (b0 >= 247 && b0 <= 250) {\n        b1 = parser.parseByte();\n        return (b0 - 247) * 256 + b1 + 108;\n    }\n    if (b0 >= 251 && b0 <= 254) {\n        b1 = parser.parseByte();\n        return -(b0 - 251) * 256 - b1 - 108;\n    }\n    throw new Error(\"Invalid b0 \" + b0);\n}\nfunction entriesToObject(entries) {\n    var o = {};\n    for(var i = 0; i < entries.length; i += 1){\n        var key = entries[i][0];\n        var values = entries[i][1];\n        var value = void 0;\n        if (values.length === 1) {\n            value = values[0];\n        } else {\n            value = values;\n        }\n        if (o.hasOwnProperty(key) && !isNaN(o[key])) {\n            throw new Error(\"Object \" + o + \" already has key \" + key);\n        }\n        o[key] = value;\n    }\n    return o;\n}\nfunction parseCFFDict(data, start, size) {\n    start = start !== void 0 ? start : 0;\n    var parser = new parse.Parser(data, start);\n    var entries = [];\n    var operands = [];\n    size = size !== void 0 ? size : data.length;\n    while(parser.relativeOffset < size){\n        var op = parser.parseByte();\n        if (op <= 21) {\n            if (op === 12) {\n                op = 1200 + parser.parseByte();\n            }\n            entries.push([\n                op,\n                operands\n            ]);\n            operands = [];\n        } else {\n            operands.push(parseOperand(parser, op));\n        }\n    }\n    return entriesToObject(entries);\n}\nfunction getCFFString(strings, index) {\n    if (index <= 390) {\n        index = cffStandardStrings[index];\n    } else {\n        index = strings[index - 391];\n    }\n    return index;\n}\nfunction interpretDict(dict, meta2, strings) {\n    var newDict = {};\n    var value;\n    for(var i = 0; i < meta2.length; i += 1){\n        var m = meta2[i];\n        if (Array.isArray(m.type)) {\n            var values = [];\n            values.length = m.type.length;\n            for(var j = 0; j < m.type.length; j++){\n                value = dict[m.op] !== void 0 ? dict[m.op][j] : void 0;\n                if (value === void 0) {\n                    value = m.value !== void 0 && m.value[j] !== void 0 ? m.value[j] : null;\n                }\n                if (m.type[j] === \"SID\") {\n                    value = getCFFString(strings, value);\n                }\n                values[j] = value;\n            }\n            newDict[m.name] = values;\n        } else {\n            value = dict[m.op];\n            if (value === void 0) {\n                value = m.value !== void 0 ? m.value : null;\n            }\n            if (m.type === \"SID\") {\n                value = getCFFString(strings, value);\n            }\n            newDict[m.name] = value;\n        }\n    }\n    return newDict;\n}\nfunction parseCFFHeader(data, start) {\n    var header = {};\n    header.formatMajor = parse.getCard8(data, start);\n    header.formatMinor = parse.getCard8(data, start + 1);\n    header.size = parse.getCard8(data, start + 2);\n    header.offsetSize = parse.getCard8(data, start + 3);\n    header.startOffset = start;\n    header.endOffset = start + 4;\n    return header;\n}\nvar TOP_DICT_META = [\n    {\n        name: \"version\",\n        op: 0,\n        type: \"SID\"\n    },\n    {\n        name: \"notice\",\n        op: 1,\n        type: \"SID\"\n    },\n    {\n        name: \"copyright\",\n        op: 1200,\n        type: \"SID\"\n    },\n    {\n        name: \"fullName\",\n        op: 2,\n        type: \"SID\"\n    },\n    {\n        name: \"familyName\",\n        op: 3,\n        type: \"SID\"\n    },\n    {\n        name: \"weight\",\n        op: 4,\n        type: \"SID\"\n    },\n    {\n        name: \"isFixedPitch\",\n        op: 1201,\n        type: \"number\",\n        value: 0\n    },\n    {\n        name: \"italicAngle\",\n        op: 1202,\n        type: \"number\",\n        value: 0\n    },\n    {\n        name: \"underlinePosition\",\n        op: 1203,\n        type: \"number\",\n        value: -100\n    },\n    {\n        name: \"underlineThickness\",\n        op: 1204,\n        type: \"number\",\n        value: 50\n    },\n    {\n        name: \"paintType\",\n        op: 1205,\n        type: \"number\",\n        value: 0\n    },\n    {\n        name: \"charstringType\",\n        op: 1206,\n        type: \"number\",\n        value: 2\n    },\n    {\n        name: \"fontMatrix\",\n        op: 1207,\n        type: [\n            \"real\",\n            \"real\",\n            \"real\",\n            \"real\",\n            \"real\",\n            \"real\"\n        ],\n        value: [\n            1e-3,\n            0,\n            0,\n            1e-3,\n            0,\n            0\n        ]\n    },\n    {\n        name: \"uniqueId\",\n        op: 13,\n        type: \"number\"\n    },\n    {\n        name: \"fontBBox\",\n        op: 5,\n        type: [\n            \"number\",\n            \"number\",\n            \"number\",\n            \"number\"\n        ],\n        value: [\n            0,\n            0,\n            0,\n            0\n        ]\n    },\n    {\n        name: \"strokeWidth\",\n        op: 1208,\n        type: \"number\",\n        value: 0\n    },\n    {\n        name: \"xuid\",\n        op: 14,\n        type: [],\n        value: null\n    },\n    {\n        name: \"charset\",\n        op: 15,\n        type: \"offset\",\n        value: 0\n    },\n    {\n        name: \"encoding\",\n        op: 16,\n        type: \"offset\",\n        value: 0\n    },\n    {\n        name: \"charStrings\",\n        op: 17,\n        type: \"offset\",\n        value: 0\n    },\n    {\n        name: \"private\",\n        op: 18,\n        type: [\n            \"number\",\n            \"offset\"\n        ],\n        value: [\n            0,\n            0\n        ]\n    },\n    {\n        name: \"ros\",\n        op: 1230,\n        type: [\n            \"SID\",\n            \"SID\",\n            \"number\"\n        ]\n    },\n    {\n        name: \"cidFontVersion\",\n        op: 1231,\n        type: \"number\",\n        value: 0\n    },\n    {\n        name: \"cidFontRevision\",\n        op: 1232,\n        type: \"number\",\n        value: 0\n    },\n    {\n        name: \"cidFontType\",\n        op: 1233,\n        type: \"number\",\n        value: 0\n    },\n    {\n        name: \"cidCount\",\n        op: 1234,\n        type: \"number\",\n        value: 8720\n    },\n    {\n        name: \"uidBase\",\n        op: 1235,\n        type: \"number\"\n    },\n    {\n        name: \"fdArray\",\n        op: 1236,\n        type: \"offset\"\n    },\n    {\n        name: \"fdSelect\",\n        op: 1237,\n        type: \"offset\"\n    },\n    {\n        name: \"fontName\",\n        op: 1238,\n        type: \"SID\"\n    }\n];\nvar PRIVATE_DICT_META = [\n    {\n        name: \"subrs\",\n        op: 19,\n        type: \"offset\",\n        value: 0\n    },\n    {\n        name: \"defaultWidthX\",\n        op: 20,\n        type: \"number\",\n        value: 0\n    },\n    {\n        name: \"nominalWidthX\",\n        op: 21,\n        type: \"number\",\n        value: 0\n    }\n];\nfunction parseCFFTopDict(data, strings) {\n    var dict = parseCFFDict(data, 0, data.byteLength);\n    return interpretDict(dict, TOP_DICT_META, strings);\n}\nfunction parseCFFPrivateDict(data, start, size, strings) {\n    var dict = parseCFFDict(data, start, size);\n    return interpretDict(dict, PRIVATE_DICT_META, strings);\n}\nfunction gatherCFFTopDicts(data, start, cffIndex, strings) {\n    var topDictArray = [];\n    for(var iTopDict = 0; iTopDict < cffIndex.length; iTopDict += 1){\n        var topDictData = new DataView(new Uint8Array(cffIndex[iTopDict]).buffer);\n        var topDict = parseCFFTopDict(topDictData, strings);\n        topDict._subrs = [];\n        topDict._subrsBias = 0;\n        topDict._defaultWidthX = 0;\n        topDict._nominalWidthX = 0;\n        var privateSize = topDict.private[0];\n        var privateOffset = topDict.private[1];\n        if (privateSize !== 0 && privateOffset !== 0) {\n            var privateDict = parseCFFPrivateDict(data, privateOffset + start, privateSize, strings);\n            topDict._defaultWidthX = privateDict.defaultWidthX;\n            topDict._nominalWidthX = privateDict.nominalWidthX;\n            if (privateDict.subrs !== 0) {\n                var subrOffset = privateOffset + privateDict.subrs;\n                var subrIndex = parseCFFIndex(data, subrOffset + start);\n                topDict._subrs = subrIndex.objects;\n                topDict._subrsBias = calcCFFSubroutineBias(topDict._subrs);\n            }\n            topDict._privateDict = privateDict;\n        }\n        topDictArray.push(topDict);\n    }\n    return topDictArray;\n}\nfunction parseCFFCharset(data, start, nGlyphs, strings) {\n    var sid;\n    var count;\n    var parser = new parse.Parser(data, start);\n    nGlyphs -= 1;\n    var charset = [\n        \".notdef\"\n    ];\n    var format = parser.parseCard8();\n    if (format === 0) {\n        for(var i = 0; i < nGlyphs; i += 1){\n            sid = parser.parseSID();\n            charset.push(getCFFString(strings, sid));\n        }\n    } else if (format === 1) {\n        while(charset.length <= nGlyphs){\n            sid = parser.parseSID();\n            count = parser.parseCard8();\n            for(var i$1 = 0; i$1 <= count; i$1 += 1){\n                charset.push(getCFFString(strings, sid));\n                sid += 1;\n            }\n        }\n    } else if (format === 2) {\n        while(charset.length <= nGlyphs){\n            sid = parser.parseSID();\n            count = parser.parseCard16();\n            for(var i$2 = 0; i$2 <= count; i$2 += 1){\n                charset.push(getCFFString(strings, sid));\n                sid += 1;\n            }\n        }\n    } else {\n        throw new Error(\"Unknown charset format \" + format);\n    }\n    return charset;\n}\nfunction parseCFFEncoding(data, start, charset) {\n    var code;\n    var enc = {};\n    var parser = new parse.Parser(data, start);\n    var format = parser.parseCard8();\n    if (format === 0) {\n        var nCodes = parser.parseCard8();\n        for(var i = 0; i < nCodes; i += 1){\n            code = parser.parseCard8();\n            enc[code] = i;\n        }\n    } else if (format === 1) {\n        var nRanges = parser.parseCard8();\n        code = 1;\n        for(var i$1 = 0; i$1 < nRanges; i$1 += 1){\n            var first = parser.parseCard8();\n            var nLeft = parser.parseCard8();\n            for(var j = first; j <= first + nLeft; j += 1){\n                enc[j] = code;\n                code += 1;\n            }\n        }\n    } else {\n        throw new Error(\"Unknown encoding format \" + format);\n    }\n    return new CffEncoding(enc, charset);\n}\nfunction parseCFFCharstring(font, glyph, code) {\n    var c1x;\n    var c1y;\n    var c2x;\n    var c2y;\n    var p = new Path();\n    var stack = [];\n    var nStems = 0;\n    var haveWidth = false;\n    var open = false;\n    var x = 0;\n    var y = 0;\n    var subrs;\n    var subrsBias;\n    var defaultWidthX;\n    var nominalWidthX;\n    if (font.isCIDFont) {\n        var fdIndex = font.tables.cff.topDict._fdSelect[glyph.index];\n        var fdDict = font.tables.cff.topDict._fdArray[fdIndex];\n        subrs = fdDict._subrs;\n        subrsBias = fdDict._subrsBias;\n        defaultWidthX = fdDict._defaultWidthX;\n        nominalWidthX = fdDict._nominalWidthX;\n    } else {\n        subrs = font.tables.cff.topDict._subrs;\n        subrsBias = font.tables.cff.topDict._subrsBias;\n        defaultWidthX = font.tables.cff.topDict._defaultWidthX;\n        nominalWidthX = font.tables.cff.topDict._nominalWidthX;\n    }\n    var width = defaultWidthX;\n    function newContour(x2, y2) {\n        if (open) {\n            p.closePath();\n        }\n        p.moveTo(x2, y2);\n        open = true;\n    }\n    function parseStems() {\n        var hasWidthArg;\n        hasWidthArg = stack.length % 2 !== 0;\n        if (hasWidthArg && !haveWidth) {\n            width = stack.shift() + nominalWidthX;\n        }\n        nStems += stack.length >> 1;\n        stack.length = 0;\n        haveWidth = true;\n    }\n    function parse2(code2) {\n        var b1;\n        var b2;\n        var b3;\n        var b4;\n        var codeIndex;\n        var subrCode;\n        var jpx;\n        var jpy;\n        var c3x;\n        var c3y;\n        var c4x;\n        var c4y;\n        var i = 0;\n        while(i < code2.length){\n            var v = code2[i];\n            i += 1;\n            switch(v){\n                case 1:\n                    parseStems();\n                    break;\n                case 3:\n                    parseStems();\n                    break;\n                case 4:\n                    if (stack.length > 1 && !haveWidth) {\n                        width = stack.shift() + nominalWidthX;\n                        haveWidth = true;\n                    }\n                    y += stack.pop();\n                    newContour(x, y);\n                    break;\n                case 5:\n                    while(stack.length > 0){\n                        x += stack.shift();\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                    }\n                    break;\n                case 6:\n                    while(stack.length > 0){\n                        x += stack.shift();\n                        p.lineTo(x, y);\n                        if (stack.length === 0) {\n                            break;\n                        }\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                    }\n                    break;\n                case 7:\n                    while(stack.length > 0){\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                        if (stack.length === 0) {\n                            break;\n                        }\n                        x += stack.shift();\n                        p.lineTo(x, y);\n                    }\n                    break;\n                case 8:\n                    while(stack.length > 0){\n                        c1x = x + stack.shift();\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + stack.shift();\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n                    break;\n                case 10:\n                    codeIndex = stack.pop() + subrsBias;\n                    subrCode = subrs[codeIndex];\n                    if (subrCode) {\n                        parse2(subrCode);\n                    }\n                    break;\n                case 11:\n                    return;\n                case 12:\n                    v = code2[i];\n                    i += 1;\n                    switch(v){\n                        case 35:\n                            c1x = x + stack.shift();\n                            c1y = y + stack.shift();\n                            c2x = c1x + stack.shift();\n                            c2y = c1y + stack.shift();\n                            jpx = c2x + stack.shift();\n                            jpy = c2y + stack.shift();\n                            c3x = jpx + stack.shift();\n                            c3y = jpy + stack.shift();\n                            c4x = c3x + stack.shift();\n                            c4y = c3y + stack.shift();\n                            x = c4x + stack.shift();\n                            y = c4y + stack.shift();\n                            stack.shift();\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                        case 34:\n                            c1x = x + stack.shift();\n                            c1y = y;\n                            c2x = c1x + stack.shift();\n                            c2y = c1y + stack.shift();\n                            jpx = c2x + stack.shift();\n                            jpy = c2y;\n                            c3x = jpx + stack.shift();\n                            c3y = c2y;\n                            c4x = c3x + stack.shift();\n                            c4y = y;\n                            x = c4x + stack.shift();\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                        case 36:\n                            c1x = x + stack.shift();\n                            c1y = y + stack.shift();\n                            c2x = c1x + stack.shift();\n                            c2y = c1y + stack.shift();\n                            jpx = c2x + stack.shift();\n                            jpy = c2y;\n                            c3x = jpx + stack.shift();\n                            c3y = c2y;\n                            c4x = c3x + stack.shift();\n                            c4y = c3y + stack.shift();\n                            x = c4x + stack.shift();\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                        case 37:\n                            c1x = x + stack.shift();\n                            c1y = y + stack.shift();\n                            c2x = c1x + stack.shift();\n                            c2y = c1y + stack.shift();\n                            jpx = c2x + stack.shift();\n                            jpy = c2y + stack.shift();\n                            c3x = jpx + stack.shift();\n                            c3y = jpy + stack.shift();\n                            c4x = c3x + stack.shift();\n                            c4y = c3y + stack.shift();\n                            if (Math.abs(c4x - x) > Math.abs(c4y - y)) {\n                                x = c4x + stack.shift();\n                            } else {\n                                y = c4y + stack.shift();\n                            }\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                        default:\n                            console.log(\"Glyph \" + glyph.index + \": unknown operator \" + 1200 + v);\n                            stack.length = 0;\n                    }\n                    break;\n                case 14:\n                    if (stack.length > 0 && !haveWidth) {\n                        width = stack.shift() + nominalWidthX;\n                        haveWidth = true;\n                    }\n                    if (open) {\n                        p.closePath();\n                        open = false;\n                    }\n                    break;\n                case 18:\n                    parseStems();\n                    break;\n                case 19:\n                case 20:\n                    parseStems();\n                    i += nStems + 7 >> 3;\n                    break;\n                case 21:\n                    if (stack.length > 2 && !haveWidth) {\n                        width = stack.shift() + nominalWidthX;\n                        haveWidth = true;\n                    }\n                    y += stack.pop();\n                    x += stack.pop();\n                    newContour(x, y);\n                    break;\n                case 22:\n                    if (stack.length > 1 && !haveWidth) {\n                        width = stack.shift() + nominalWidthX;\n                        haveWidth = true;\n                    }\n                    x += stack.pop();\n                    newContour(x, y);\n                    break;\n                case 23:\n                    parseStems();\n                    break;\n                case 24:\n                    while(stack.length > 2){\n                        c1x = x + stack.shift();\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + stack.shift();\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n                    x += stack.shift();\n                    y += stack.shift();\n                    p.lineTo(x, y);\n                    break;\n                case 25:\n                    while(stack.length > 6){\n                        x += stack.shift();\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                    }\n                    c1x = x + stack.shift();\n                    c1y = y + stack.shift();\n                    c2x = c1x + stack.shift();\n                    c2y = c1y + stack.shift();\n                    x = c2x + stack.shift();\n                    y = c2y + stack.shift();\n                    p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    break;\n                case 26:\n                    if (stack.length % 2) {\n                        x += stack.shift();\n                    }\n                    while(stack.length > 0){\n                        c1x = x;\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x;\n                        y = c2y + stack.shift();\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n                    break;\n                case 27:\n                    if (stack.length % 2) {\n                        y += stack.shift();\n                    }\n                    while(stack.length > 0){\n                        c1x = x + stack.shift();\n                        c1y = y;\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y;\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n                    break;\n                case 28:\n                    b1 = code2[i];\n                    b2 = code2[i + 1];\n                    stack.push((b1 << 24 | b2 << 16) >> 16);\n                    i += 2;\n                    break;\n                case 29:\n                    codeIndex = stack.pop() + font.gsubrsBias;\n                    subrCode = font.gsubrs[codeIndex];\n                    if (subrCode) {\n                        parse2(subrCode);\n                    }\n                    break;\n                case 30:\n                    while(stack.length > 0){\n                        c1x = x;\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        if (stack.length === 0) {\n                            break;\n                        }\n                        c1x = x + stack.shift();\n                        c1y = y;\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        y = c2y + stack.shift();\n                        x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n                    break;\n                case 31:\n                    while(stack.length > 0){\n                        c1x = x + stack.shift();\n                        c1y = y;\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        y = c2y + stack.shift();\n                        x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        if (stack.length === 0) {\n                            break;\n                        }\n                        c1x = x;\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n                    break;\n                default:\n                    if (v < 32) {\n                        console.log(\"Glyph \" + glyph.index + \": unknown operator \" + v);\n                    } else if (v < 247) {\n                        stack.push(v - 139);\n                    } else if (v < 251) {\n                        b1 = code2[i];\n                        i += 1;\n                        stack.push((v - 247) * 256 + b1 + 108);\n                    } else if (v < 255) {\n                        b1 = code2[i];\n                        i += 1;\n                        stack.push(-(v - 251) * 256 - b1 - 108);\n                    } else {\n                        b1 = code2[i];\n                        b2 = code2[i + 1];\n                        b3 = code2[i + 2];\n                        b4 = code2[i + 3];\n                        i += 4;\n                        stack.push((b1 << 24 | b2 << 16 | b3 << 8 | b4) / 65536);\n                    }\n            }\n        }\n    }\n    parse2(code);\n    glyph.advanceWidth = width;\n    return p;\n}\nfunction parseCFFFDSelect(data, start, nGlyphs, fdArrayCount) {\n    var fdSelect = [];\n    var fdIndex;\n    var parser = new parse.Parser(data, start);\n    var format = parser.parseCard8();\n    if (format === 0) {\n        for(var iGid = 0; iGid < nGlyphs; iGid++){\n            fdIndex = parser.parseCard8();\n            if (fdIndex >= fdArrayCount) {\n                throw new Error(\"CFF table CID Font FDSelect has bad FD index value \" + fdIndex + \" (FD count \" + fdArrayCount + \")\");\n            }\n            fdSelect.push(fdIndex);\n        }\n    } else if (format === 3) {\n        var nRanges = parser.parseCard16();\n        var first = parser.parseCard16();\n        if (first !== 0) {\n            throw new Error(\"CFF Table CID Font FDSelect format 3 range has bad initial GID \" + first);\n        }\n        var next;\n        for(var iRange = 0; iRange < nRanges; iRange++){\n            fdIndex = parser.parseCard8();\n            next = parser.parseCard16();\n            if (fdIndex >= fdArrayCount) {\n                throw new Error(\"CFF table CID Font FDSelect has bad FD index value \" + fdIndex + \" (FD count \" + fdArrayCount + \")\");\n            }\n            if (next > nGlyphs) {\n                throw new Error(\"CFF Table CID Font FDSelect format 3 range has bad GID \" + next);\n            }\n            for(; first < next; first++){\n                fdSelect.push(fdIndex);\n            }\n            first = next;\n        }\n        if (next !== nGlyphs) {\n            throw new Error(\"CFF Table CID Font FDSelect format 3 range has bad final GID \" + next);\n        }\n    } else {\n        throw new Error(\"CFF Table CID Font FDSelect table has unsupported format \" + format);\n    }\n    return fdSelect;\n}\nfunction parseCFFTable(data, start, font, opt) {\n    font.tables.cff = {};\n    var header = parseCFFHeader(data, start);\n    var nameIndex = parseCFFIndex(data, header.endOffset, parse.bytesToString);\n    var topDictIndex = parseCFFIndex(data, nameIndex.endOffset);\n    var stringIndex = parseCFFIndex(data, topDictIndex.endOffset, parse.bytesToString);\n    var globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);\n    font.gsubrs = globalSubrIndex.objects;\n    font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);\n    var topDictArray = gatherCFFTopDicts(data, start, topDictIndex.objects, stringIndex.objects);\n    if (topDictArray.length !== 1) {\n        throw new Error(\"CFF table has too many fonts in 'FontSet' - count of fonts NameIndex.length = \" + topDictArray.length);\n    }\n    var topDict = topDictArray[0];\n    font.tables.cff.topDict = topDict;\n    if (topDict._privateDict) {\n        font.defaultWidthX = topDict._privateDict.defaultWidthX;\n        font.nominalWidthX = topDict._privateDict.nominalWidthX;\n    }\n    if (topDict.ros[0] !== void 0 && topDict.ros[1] !== void 0) {\n        font.isCIDFont = true;\n    }\n    if (font.isCIDFont) {\n        var fdArrayOffset = topDict.fdArray;\n        var fdSelectOffset = topDict.fdSelect;\n        if (fdArrayOffset === 0 || fdSelectOffset === 0) {\n            throw new Error(\"Font is marked as a CID font, but FDArray and/or FDSelect information is missing\");\n        }\n        fdArrayOffset += start;\n        var fdArrayIndex = parseCFFIndex(data, fdArrayOffset);\n        var fdArray = gatherCFFTopDicts(data, start, fdArrayIndex.objects, stringIndex.objects);\n        topDict._fdArray = fdArray;\n        fdSelectOffset += start;\n        topDict._fdSelect = parseCFFFDSelect(data, fdSelectOffset, font.numGlyphs, fdArray.length);\n    }\n    var privateDictOffset = start + topDict.private[1];\n    var privateDict = parseCFFPrivateDict(data, privateDictOffset, topDict.private[0], stringIndex.objects);\n    font.defaultWidthX = privateDict.defaultWidthX;\n    font.nominalWidthX = privateDict.nominalWidthX;\n    if (privateDict.subrs !== 0) {\n        var subrOffset = privateDictOffset + privateDict.subrs;\n        var subrIndex = parseCFFIndex(data, subrOffset);\n        font.subrs = subrIndex.objects;\n        font.subrsBias = calcCFFSubroutineBias(font.subrs);\n    } else {\n        font.subrs = [];\n        font.subrsBias = 0;\n    }\n    var charStringsIndex;\n    if (opt.lowMemory) {\n        charStringsIndex = parseCFFIndexLowMemory(data, start + topDict.charStrings);\n        font.nGlyphs = charStringsIndex.offsets.length;\n    } else {\n        charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);\n        font.nGlyphs = charStringsIndex.objects.length;\n    }\n    var charset = parseCFFCharset(data, start + topDict.charset, font.nGlyphs, stringIndex.objects);\n    if (topDict.encoding === 0) {\n        font.cffEncoding = new CffEncoding(cffStandardEncoding, charset);\n    } else if (topDict.encoding === 1) {\n        font.cffEncoding = new CffEncoding(cffExpertEncoding, charset);\n    } else {\n        font.cffEncoding = parseCFFEncoding(data, start + topDict.encoding, charset);\n    }\n    font.encoding = font.encoding || font.cffEncoding;\n    font.glyphs = new glyphset.GlyphSet(font);\n    if (opt.lowMemory) {\n        font._push = function(i2) {\n            var charString2 = getCffIndexObject(i2, charStringsIndex.offsets, data, start + topDict.charStrings);\n            font.glyphs.push(i2, glyphset.cffGlyphLoader(font, i2, parseCFFCharstring, charString2));\n        };\n    } else {\n        for(var i = 0; i < font.nGlyphs; i += 1){\n            var charString = charStringsIndex.objects[i];\n            font.glyphs.push(i, glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString));\n        }\n    }\n}\nvar cff = {\n    parse: parseCFFTable\n};\nfunction parseFvarAxis(data, start, names) {\n    var axis = {};\n    var p = new parse.Parser(data, start);\n    axis.tag = p.parseTag();\n    axis.minValue = p.parseFixed();\n    axis.defaultValue = p.parseFixed();\n    axis.maxValue = p.parseFixed();\n    p.skip(\"uShort\", 1);\n    axis.name = names[p.parseUShort()] || {};\n    return axis;\n}\nfunction parseFvarInstance(data, start, axes, names) {\n    var inst = {};\n    var p = new parse.Parser(data, start);\n    inst.name = names[p.parseUShort()] || {};\n    p.skip(\"uShort\", 1);\n    inst.coordinates = {};\n    for(var i = 0; i < axes.length; ++i){\n        inst.coordinates[axes[i].tag] = p.parseFixed();\n    }\n    return inst;\n}\nfunction parseFvarTable(data, start, names) {\n    var p = new parse.Parser(data, start);\n    var tableVersion = p.parseULong();\n    check.argument(tableVersion === 65536, \"Unsupported fvar table version.\");\n    var offsetToData = p.parseOffset16();\n    p.skip(\"uShort\", 1);\n    var axisCount = p.parseUShort();\n    var axisSize = p.parseUShort();\n    var instanceCount = p.parseUShort();\n    var instanceSize = p.parseUShort();\n    var axes = [];\n    for(var i = 0; i < axisCount; i++){\n        axes.push(parseFvarAxis(data, start + offsetToData + i * axisSize, names));\n    }\n    var instances = [];\n    var instanceStart = start + offsetToData + axisCount * axisSize;\n    for(var j = 0; j < instanceCount; j++){\n        instances.push(parseFvarInstance(data, instanceStart + j * instanceSize, axes, names));\n    }\n    return {\n        axes,\n        instances\n    };\n}\nvar fvar = {\n    parse: parseFvarTable\n};\nvar attachList = function() {\n    return {\n        coverage: this.parsePointer(Parser.coverage),\n        attachPoints: this.parseList(Parser.pointer(Parser.uShortList))\n    };\n};\nvar caretValue = function() {\n    var format = this.parseUShort();\n    check.argument(format === 1 || format === 2 || format === 3, \"Unsupported CaretValue table version.\");\n    if (format === 1) {\n        return {\n            coordinate: this.parseShort()\n        };\n    } else if (format === 2) {\n        return {\n            pointindex: this.parseShort()\n        };\n    } else if (format === 3) {\n        return {\n            coordinate: this.parseShort()\n        };\n    }\n};\nvar ligGlyph = function() {\n    return this.parseList(Parser.pointer(caretValue));\n};\nvar ligCaretList = function() {\n    return {\n        coverage: this.parsePointer(Parser.coverage),\n        ligGlyphs: this.parseList(Parser.pointer(ligGlyph))\n    };\n};\nvar markGlyphSets = function() {\n    this.parseUShort();\n    return this.parseList(Parser.pointer(Parser.coverage));\n};\nfunction parseGDEFTable(data, start) {\n    start = start || 0;\n    var p = new Parser(data, start);\n    var tableVersion = p.parseVersion(1);\n    check.argument(tableVersion === 1 || tableVersion === 1.2 || tableVersion === 1.3, \"Unsupported GDEF table version.\");\n    var gdef2 = {\n        version: tableVersion,\n        classDef: p.parsePointer(Parser.classDef),\n        attachList: p.parsePointer(attachList),\n        ligCaretList: p.parsePointer(ligCaretList),\n        markAttachClassDef: p.parsePointer(Parser.classDef)\n    };\n    if (tableVersion >= 1.2) {\n        gdef2.markGlyphSets = p.parsePointer(markGlyphSets);\n    }\n    return gdef2;\n}\nvar gdef = {\n    parse: parseGDEFTable\n};\nvar subtableParsers = new Array(10);\nsubtableParsers[1] = function parseLookup1() {\n    var start = this.offset + this.relativeOffset;\n    var posformat = this.parseUShort();\n    if (posformat === 1) {\n        return {\n            posFormat: 1,\n            coverage: this.parsePointer(Parser.coverage),\n            value: this.parseValueRecord()\n        };\n    } else if (posformat === 2) {\n        return {\n            posFormat: 2,\n            coverage: this.parsePointer(Parser.coverage),\n            values: this.parseValueRecordList()\n        };\n    }\n    check.assert(false, \"0x\" + start.toString(16) + \": GPOS lookup type 1 format must be 1 or 2.\");\n};\nsubtableParsers[2] = function parseLookup2() {\n    var start = this.offset + this.relativeOffset;\n    var posFormat = this.parseUShort();\n    check.assert(posFormat === 1 || posFormat === 2, \"0x\" + start.toString(16) + \": GPOS lookup type 2 format must be 1 or 2.\");\n    var coverage = this.parsePointer(Parser.coverage);\n    var valueFormat1 = this.parseUShort();\n    var valueFormat2 = this.parseUShort();\n    if (posFormat === 1) {\n        return {\n            posFormat,\n            coverage,\n            valueFormat1,\n            valueFormat2,\n            pairSets: this.parseList(Parser.pointer(Parser.list(function() {\n                return {\n                    secondGlyph: this.parseUShort(),\n                    value1: this.parseValueRecord(valueFormat1),\n                    value2: this.parseValueRecord(valueFormat2)\n                };\n            })))\n        };\n    } else if (posFormat === 2) {\n        var classDef1 = this.parsePointer(Parser.classDef);\n        var classDef2 = this.parsePointer(Parser.classDef);\n        var class1Count = this.parseUShort();\n        var class2Count = this.parseUShort();\n        return {\n            posFormat,\n            coverage,\n            valueFormat1,\n            valueFormat2,\n            classDef1,\n            classDef2,\n            class1Count,\n            class2Count,\n            classRecords: this.parseList(class1Count, Parser.list(class2Count, function() {\n                return {\n                    value1: this.parseValueRecord(valueFormat1),\n                    value2: this.parseValueRecord(valueFormat2)\n                };\n            }))\n        };\n    }\n};\nsubtableParsers[3] = function parseLookup3() {\n    return {\n        error: \"GPOS Lookup 3 not supported\"\n    };\n};\nsubtableParsers[4] = function parseLookup4() {\n    return {\n        error: \"GPOS Lookup 4 not supported\"\n    };\n};\nsubtableParsers[5] = function parseLookup5() {\n    return {\n        error: \"GPOS Lookup 5 not supported\"\n    };\n};\nsubtableParsers[6] = function parseLookup6() {\n    return {\n        error: \"GPOS Lookup 6 not supported\"\n    };\n};\nsubtableParsers[7] = function parseLookup7() {\n    return {\n        error: \"GPOS Lookup 7 not supported\"\n    };\n};\nsubtableParsers[8] = function parseLookup8() {\n    return {\n        error: \"GPOS Lookup 8 not supported\"\n    };\n};\nsubtableParsers[9] = function parseLookup9() {\n    return {\n        error: \"GPOS Lookup 9 not supported\"\n    };\n};\nfunction parseGposTable(data, start) {\n    start = start || 0;\n    var p = new Parser(data, start);\n    var tableVersion = p.parseVersion(1);\n    check.argument(tableVersion === 1 || tableVersion === 1.1, \"Unsupported GPOS table version \" + tableVersion);\n    if (tableVersion === 1) {\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers)\n        };\n    } else {\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers),\n            variations: p.parseFeatureVariationsList()\n        };\n    }\n}\nvar gpos = {\n    parse: parseGposTable\n};\nvar subtableParsers$1 = new Array(9);\nsubtableParsers$1[1] = function parseLookup12() {\n    var start = this.offset + this.relativeOffset;\n    var substFormat = this.parseUShort();\n    if (substFormat === 1) {\n        return {\n            substFormat: 1,\n            coverage: this.parsePointer(Parser.coverage),\n            deltaGlyphId: this.parseUShort()\n        };\n    } else if (substFormat === 2) {\n        return {\n            substFormat: 2,\n            coverage: this.parsePointer(Parser.coverage),\n            substitute: this.parseOffset16List()\n        };\n    }\n    check.assert(false, \"0x\" + start.toString(16) + \": lookup type 1 format must be 1 or 2.\");\n};\nsubtableParsers$1[2] = function parseLookup22() {\n    var substFormat = this.parseUShort();\n    check.argument(substFormat === 1, \"GSUB Multiple Substitution Subtable identifier-format must be 1\");\n    return {\n        substFormat,\n        coverage: this.parsePointer(Parser.coverage),\n        sequences: this.parseListOfLists()\n    };\n};\nsubtableParsers$1[3] = function parseLookup32() {\n    var substFormat = this.parseUShort();\n    check.argument(substFormat === 1, \"GSUB Alternate Substitution Subtable identifier-format must be 1\");\n    return {\n        substFormat,\n        coverage: this.parsePointer(Parser.coverage),\n        alternateSets: this.parseListOfLists()\n    };\n};\nsubtableParsers$1[4] = function parseLookup42() {\n    var substFormat = this.parseUShort();\n    check.argument(substFormat === 1, \"GSUB ligature table identifier-format must be 1\");\n    return {\n        substFormat,\n        coverage: this.parsePointer(Parser.coverage),\n        ligatureSets: this.parseListOfLists(function() {\n            return {\n                ligGlyph: this.parseUShort(),\n                components: this.parseUShortList(this.parseUShort() - 1)\n            };\n        })\n    };\n};\nvar lookupRecordDesc = {\n    sequenceIndex: Parser.uShort,\n    lookupListIndex: Parser.uShort\n};\nsubtableParsers$1[5] = function parseLookup52() {\n    var start = this.offset + this.relativeOffset;\n    var substFormat = this.parseUShort();\n    if (substFormat === 1) {\n        return {\n            substFormat,\n            coverage: this.parsePointer(Parser.coverage),\n            ruleSets: this.parseListOfLists(function() {\n                var glyphCount2 = this.parseUShort();\n                var substCount2 = this.parseUShort();\n                return {\n                    input: this.parseUShortList(glyphCount2 - 1),\n                    lookupRecords: this.parseRecordList(substCount2, lookupRecordDesc)\n                };\n            })\n        };\n    } else if (substFormat === 2) {\n        return {\n            substFormat,\n            coverage: this.parsePointer(Parser.coverage),\n            classDef: this.parsePointer(Parser.classDef),\n            classSets: this.parseListOfLists(function() {\n                var glyphCount2 = this.parseUShort();\n                var substCount2 = this.parseUShort();\n                return {\n                    classes: this.parseUShortList(glyphCount2 - 1),\n                    lookupRecords: this.parseRecordList(substCount2, lookupRecordDesc)\n                };\n            })\n        };\n    } else if (substFormat === 3) {\n        var glyphCount = this.parseUShort();\n        var substCount = this.parseUShort();\n        return {\n            substFormat,\n            coverages: this.parseList(glyphCount, Parser.pointer(Parser.coverage)),\n            lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n        };\n    }\n    check.assert(false, \"0x\" + start.toString(16) + \": lookup type 5 format must be 1, 2 or 3.\");\n};\nsubtableParsers$1[6] = function parseLookup62() {\n    var start = this.offset + this.relativeOffset;\n    var substFormat = this.parseUShort();\n    if (substFormat === 1) {\n        return {\n            substFormat: 1,\n            coverage: this.parsePointer(Parser.coverage),\n            chainRuleSets: this.parseListOfLists(function() {\n                return {\n                    backtrack: this.parseUShortList(),\n                    input: this.parseUShortList(this.parseShort() - 1),\n                    lookahead: this.parseUShortList(),\n                    lookupRecords: this.parseRecordList(lookupRecordDesc)\n                };\n            })\n        };\n    } else if (substFormat === 2) {\n        return {\n            substFormat: 2,\n            coverage: this.parsePointer(Parser.coverage),\n            backtrackClassDef: this.parsePointer(Parser.classDef),\n            inputClassDef: this.parsePointer(Parser.classDef),\n            lookaheadClassDef: this.parsePointer(Parser.classDef),\n            chainClassSet: this.parseListOfLists(function() {\n                return {\n                    backtrack: this.parseUShortList(),\n                    input: this.parseUShortList(this.parseShort() - 1),\n                    lookahead: this.parseUShortList(),\n                    lookupRecords: this.parseRecordList(lookupRecordDesc)\n                };\n            })\n        };\n    } else if (substFormat === 3) {\n        return {\n            substFormat: 3,\n            backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n            inputCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n            lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n            lookupRecords: this.parseRecordList(lookupRecordDesc)\n        };\n    }\n    check.assert(false, \"0x\" + start.toString(16) + \": lookup type 6 format must be 1, 2 or 3.\");\n};\nsubtableParsers$1[7] = function parseLookup72() {\n    var substFormat = this.parseUShort();\n    check.argument(substFormat === 1, \"GSUB Extension Substitution subtable identifier-format must be 1\");\n    var extensionLookupType = this.parseUShort();\n    var extensionParser = new Parser(this.data, this.offset + this.parseULong());\n    return {\n        substFormat: 1,\n        lookupType: extensionLookupType,\n        extension: subtableParsers$1[extensionLookupType].call(extensionParser)\n    };\n};\nsubtableParsers$1[8] = function parseLookup82() {\n    var substFormat = this.parseUShort();\n    check.argument(substFormat === 1, \"GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1\");\n    return {\n        substFormat,\n        coverage: this.parsePointer(Parser.coverage),\n        backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n        lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n        substitutes: this.parseUShortList()\n    };\n};\nfunction parseGsubTable(data, start) {\n    start = start || 0;\n    var p = new Parser(data, start);\n    var tableVersion = p.parseVersion(1);\n    check.argument(tableVersion === 1 || tableVersion === 1.1, \"Unsupported GSUB table version.\");\n    if (tableVersion === 1) {\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers$1)\n        };\n    } else {\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers$1),\n            variations: p.parseFeatureVariationsList()\n        };\n    }\n}\nvar gsub = {\n    parse: parseGsubTable\n};\nfunction parseHeadTable(data, start) {\n    var head2 = {};\n    var p = new parse.Parser(data, start);\n    head2.version = p.parseVersion();\n    head2.fontRevision = Math.round(p.parseFixed() * 1e3) / 1e3;\n    head2.checkSumAdjustment = p.parseULong();\n    head2.magicNumber = p.parseULong();\n    check.argument(head2.magicNumber === 1594834165, \"Font header has wrong magic number.\");\n    head2.flags = p.parseUShort();\n    head2.unitsPerEm = p.parseUShort();\n    head2.created = p.parseLongDateTime();\n    head2.modified = p.parseLongDateTime();\n    head2.xMin = p.parseShort();\n    head2.yMin = p.parseShort();\n    head2.xMax = p.parseShort();\n    head2.yMax = p.parseShort();\n    head2.macStyle = p.parseUShort();\n    head2.lowestRecPPEM = p.parseUShort();\n    head2.fontDirectionHint = p.parseShort();\n    head2.indexToLocFormat = p.parseShort();\n    head2.glyphDataFormat = p.parseShort();\n    return head2;\n}\nvar head = {\n    parse: parseHeadTable\n};\nfunction parseHheaTable(data, start) {\n    var hhea2 = {};\n    var p = new parse.Parser(data, start);\n    hhea2.version = p.parseVersion();\n    hhea2.ascender = p.parseShort();\n    hhea2.descender = p.parseShort();\n    hhea2.lineGap = p.parseShort();\n    hhea2.advanceWidthMax = p.parseUShort();\n    hhea2.minLeftSideBearing = p.parseShort();\n    hhea2.minRightSideBearing = p.parseShort();\n    hhea2.xMaxExtent = p.parseShort();\n    hhea2.caretSlopeRise = p.parseShort();\n    hhea2.caretSlopeRun = p.parseShort();\n    hhea2.caretOffset = p.parseShort();\n    p.relativeOffset += 8;\n    hhea2.metricDataFormat = p.parseShort();\n    hhea2.numberOfHMetrics = p.parseUShort();\n    return hhea2;\n}\nvar hhea = {\n    parse: parseHheaTable\n};\nfunction parseHmtxTableAll(data, start, numMetrics, numGlyphs, glyphs) {\n    var advanceWidth;\n    var leftSideBearing;\n    var p = new parse.Parser(data, start);\n    for(var i = 0; i < numGlyphs; i += 1){\n        if (i < numMetrics) {\n            advanceWidth = p.parseUShort();\n            leftSideBearing = p.parseShort();\n        }\n        var glyph = glyphs.get(i);\n        glyph.advanceWidth = advanceWidth;\n        glyph.leftSideBearing = leftSideBearing;\n    }\n}\nfunction parseHmtxTableOnLowMemory(font, data, start, numMetrics, numGlyphs) {\n    font._hmtxTableData = {};\n    var advanceWidth;\n    var leftSideBearing;\n    var p = new parse.Parser(data, start);\n    for(var i = 0; i < numGlyphs; i += 1){\n        if (i < numMetrics) {\n            advanceWidth = p.parseUShort();\n            leftSideBearing = p.parseShort();\n        }\n        font._hmtxTableData[i] = {\n            advanceWidth,\n            leftSideBearing\n        };\n    }\n}\nfunction parseHmtxTable(font, data, start, numMetrics, numGlyphs, glyphs, opt) {\n    if (opt.lowMemory) {\n        parseHmtxTableOnLowMemory(font, data, start, numMetrics, numGlyphs);\n    } else {\n        parseHmtxTableAll(data, start, numMetrics, numGlyphs, glyphs);\n    }\n}\nvar hmtx = {\n    parse: parseHmtxTable\n};\nfunction parseWindowsKernTable(p) {\n    var pairs = {};\n    p.skip(\"uShort\");\n    var subtableVersion = p.parseUShort();\n    check.argument(subtableVersion === 0, \"Unsupported kern sub-table version.\");\n    p.skip(\"uShort\", 2);\n    var nPairs = p.parseUShort();\n    p.skip(\"uShort\", 3);\n    for(var i = 0; i < nPairs; i += 1){\n        var leftIndex = p.parseUShort();\n        var rightIndex = p.parseUShort();\n        var value = p.parseShort();\n        pairs[leftIndex + \",\" + rightIndex] = value;\n    }\n    return pairs;\n}\nfunction parseMacKernTable(p) {\n    var pairs = {};\n    p.skip(\"uShort\");\n    var nTables = p.parseULong();\n    if (nTables > 1) {\n        console.warn(\"Only the first kern subtable is supported.\");\n    }\n    p.skip(\"uLong\");\n    var coverage = p.parseUShort();\n    var subtableVersion = coverage & 255;\n    p.skip(\"uShort\");\n    if (subtableVersion === 0) {\n        var nPairs = p.parseUShort();\n        p.skip(\"uShort\", 3);\n        for(var i = 0; i < nPairs; i += 1){\n            var leftIndex = p.parseUShort();\n            var rightIndex = p.parseUShort();\n            var value = p.parseShort();\n            pairs[leftIndex + \",\" + rightIndex] = value;\n        }\n    }\n    return pairs;\n}\nfunction parseKernTable(data, start) {\n    var p = new parse.Parser(data, start);\n    var tableVersion = p.parseUShort();\n    if (tableVersion === 0) {\n        return parseWindowsKernTable(p);\n    } else if (tableVersion === 1) {\n        return parseMacKernTable(p);\n    } else {\n        throw new Error(\"Unsupported kern table version (\" + tableVersion + \").\");\n    }\n}\nvar kern = {\n    parse: parseKernTable\n};\nfunction parseLtagTable(data, start) {\n    var p = new parse.Parser(data, start);\n    var tableVersion = p.parseULong();\n    check.argument(tableVersion === 1, \"Unsupported ltag table version.\");\n    p.skip(\"uLong\", 1);\n    var numTags = p.parseULong();\n    var tags = [];\n    for(var i = 0; i < numTags; i++){\n        var tag = \"\";\n        var offset = start + p.parseUShort();\n        var length = p.parseUShort();\n        for(var j = offset; j < offset + length; ++j){\n            tag += String.fromCharCode(data.getInt8(j));\n        }\n        tags.push(tag);\n    }\n    return tags;\n}\nvar ltag = {\n    parse: parseLtagTable\n};\nfunction parseLocaTable(data, start, numGlyphs, shortVersion) {\n    var p = new parse.Parser(data, start);\n    var parseFn = shortVersion ? p.parseUShort : p.parseULong;\n    var glyphOffsets = [];\n    for(var i = 0; i < numGlyphs + 1; i += 1){\n        var glyphOffset = parseFn.call(p);\n        if (shortVersion) {\n            glyphOffset *= 2;\n        }\n        glyphOffsets.push(glyphOffset);\n    }\n    return glyphOffsets;\n}\nvar loca = {\n    parse: parseLocaTable\n};\nfunction parseMaxpTable(data, start) {\n    var maxp2 = {};\n    var p = new parse.Parser(data, start);\n    maxp2.version = p.parseVersion();\n    maxp2.numGlyphs = p.parseUShort();\n    if (maxp2.version === 1) {\n        maxp2.maxPoints = p.parseUShort();\n        maxp2.maxContours = p.parseUShort();\n        maxp2.maxCompositePoints = p.parseUShort();\n        maxp2.maxCompositeContours = p.parseUShort();\n        maxp2.maxZones = p.parseUShort();\n        maxp2.maxTwilightPoints = p.parseUShort();\n        maxp2.maxStorage = p.parseUShort();\n        maxp2.maxFunctionDefs = p.parseUShort();\n        maxp2.maxInstructionDefs = p.parseUShort();\n        maxp2.maxStackElements = p.parseUShort();\n        maxp2.maxSizeOfInstructions = p.parseUShort();\n        maxp2.maxComponentElements = p.parseUShort();\n        maxp2.maxComponentDepth = p.parseUShort();\n    }\n    return maxp2;\n}\nvar maxp = {\n    parse: parseMaxpTable\n};\nfunction parseOS2Table(data, start) {\n    var os22 = {};\n    var p = new parse.Parser(data, start);\n    os22.version = p.parseUShort();\n    os22.xAvgCharWidth = p.parseShort();\n    os22.usWeightClass = p.parseUShort();\n    os22.usWidthClass = p.parseUShort();\n    os22.fsType = p.parseUShort();\n    os22.ySubscriptXSize = p.parseShort();\n    os22.ySubscriptYSize = p.parseShort();\n    os22.ySubscriptXOffset = p.parseShort();\n    os22.ySubscriptYOffset = p.parseShort();\n    os22.ySuperscriptXSize = p.parseShort();\n    os22.ySuperscriptYSize = p.parseShort();\n    os22.ySuperscriptXOffset = p.parseShort();\n    os22.ySuperscriptYOffset = p.parseShort();\n    os22.yStrikeoutSize = p.parseShort();\n    os22.yStrikeoutPosition = p.parseShort();\n    os22.sFamilyClass = p.parseShort();\n    os22.panose = [];\n    for(var i = 0; i < 10; i++){\n        os22.panose[i] = p.parseByte();\n    }\n    os22.ulUnicodeRange1 = p.parseULong();\n    os22.ulUnicodeRange2 = p.parseULong();\n    os22.ulUnicodeRange3 = p.parseULong();\n    os22.ulUnicodeRange4 = p.parseULong();\n    os22.achVendID = String.fromCharCode(p.parseByte(), p.parseByte(), p.parseByte(), p.parseByte());\n    os22.fsSelection = p.parseUShort();\n    os22.usFirstCharIndex = p.parseUShort();\n    os22.usLastCharIndex = p.parseUShort();\n    os22.sTypoAscender = p.parseShort();\n    os22.sTypoDescender = p.parseShort();\n    os22.sTypoLineGap = p.parseShort();\n    os22.usWinAscent = p.parseUShort();\n    os22.usWinDescent = p.parseUShort();\n    if (os22.version >= 1) {\n        os22.ulCodePageRange1 = p.parseULong();\n        os22.ulCodePageRange2 = p.parseULong();\n    }\n    if (os22.version >= 2) {\n        os22.sxHeight = p.parseShort();\n        os22.sCapHeight = p.parseShort();\n        os22.usDefaultChar = p.parseUShort();\n        os22.usBreakChar = p.parseUShort();\n        os22.usMaxContent = p.parseUShort();\n    }\n    return os22;\n}\nvar os2 = {\n    parse: parseOS2Table\n};\nfunction parsePostTable(data, start) {\n    var post2 = {};\n    var p = new parse.Parser(data, start);\n    post2.version = p.parseVersion();\n    post2.italicAngle = p.parseFixed();\n    post2.underlinePosition = p.parseShort();\n    post2.underlineThickness = p.parseShort();\n    post2.isFixedPitch = p.parseULong();\n    post2.minMemType42 = p.parseULong();\n    post2.maxMemType42 = p.parseULong();\n    post2.minMemType1 = p.parseULong();\n    post2.maxMemType1 = p.parseULong();\n    post2.names = [];\n    switch(post2.version){\n        case 1:\n            break;\n        case 2:\n            post2.numberOfGlyphs = p.parseUShort();\n            post2.glyphNameIndex = new Array(post2.numberOfGlyphs);\n            for(var i = 0; i < post2.numberOfGlyphs; i++){\n                post2.glyphNameIndex[i] = p.parseUShort();\n            }\n            break;\n        case 2.5:\n            post2.numberOfGlyphs = p.parseUShort();\n            post2.offset = new Array(post2.numberOfGlyphs);\n            for(var i$1 = 0; i$1 < post2.numberOfGlyphs; i$1++){\n                post2.offset[i$1] = p.parseChar();\n            }\n            break;\n    }\n    return post2;\n}\nvar post = {\n    parse: parsePostTable\n};\nvar decode = {};\ndecode.UTF8 = function(data, offset, numBytes) {\n    var codePoints = [];\n    var numChars = numBytes;\n    for(var j = 0; j < numChars; j++, offset += 1){\n        codePoints[j] = data.getUint8(offset);\n    }\n    return String.fromCharCode.apply(null, codePoints);\n};\ndecode.UTF16 = function(data, offset, numBytes) {\n    var codePoints = [];\n    var numChars = numBytes / 2;\n    for(var j = 0; j < numChars; j++, offset += 2){\n        codePoints[j] = data.getUint16(offset);\n    }\n    return String.fromCharCode.apply(null, codePoints);\n};\nvar eightBitMacEncodings = {\n    \"x-mac-croatian\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc†\\xb0\\xa2\\xa3\\xa7•\\xb6\\xdf\\xaeŠ™\\xb4\\xa8≠Ž\\xd8∞\\xb1≤≥∆\\xb5∂∑∏š∫\\xaa\\xbaΩž\\xf8\\xbf\\xa1\\xac√ƒ≈Ć\\xabČ…\\xa0\\xc0\\xc3\\xd5ŒœĐ—“”‘’\\xf7◊\\xa9⁄€‹›\\xc6\\xbb–\\xb7‚„‰\\xc2ć\\xc1č\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4đ\\xd2\\xda\\xdb\\xd9ıˆ˜\\xafπ\\xcb˚\\xb8\\xca\\xe6ˇ\",\n    \"x-mac-cyrillic\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†\\xb0Ґ\\xa3\\xa7•\\xb6І\\xae\\xa9™Ђђ≠Ѓѓ∞\\xb1≤≥і\\xb5ґЈЄєЇїЉљЊњјЅ\\xac√ƒ≈∆\\xab\\xbb…\\xa0ЋћЌќѕ–—“”‘’\\xf7„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю\",\n    \"x-mac-gaelic\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc†\\xb0\\xa2\\xa3\\xa7•\\xb6\\xdf\\xae\\xa9™\\xb4\\xa8≠\\xc6\\xd8Ḃ\\xb1≤≥ḃĊċḊḋḞḟĠġṀ\\xe6\\xf8ṁṖṗɼƒſṠ\\xab\\xbb…\\xa0\\xc0\\xc3\\xd5Œœ–—“”‘’ṡẛ\\xffŸṪ€‹›Ŷŷṫ\\xb7Ỳỳ⁊\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4♣\\xd2\\xda\\xdb\\xd9ı\\xdd\\xfdŴŵẄẅẀẁẂẃ\",\n    \"x-mac-greek\": \"\\xc4\\xb9\\xb2\\xc9\\xb3\\xd6\\xdc΅\\xe0\\xe2\\xe4΄\\xa8\\xe7\\xe9\\xe8\\xea\\xeb\\xa3™\\xee\\xef•\\xbd‰\\xf4\\xf6\\xa6€\\xf9\\xfb\\xfc†ΓΔΘΛΞΠ\\xdf\\xae\\xa9ΣΪ\\xa7≠\\xb0\\xb7Α\\xb1≤≥\\xa5ΒΕΖΗΙΚΜΦΫΨΩάΝ\\xacΟΡ≈Τ\\xab\\xbb…\\xa0ΥΧΆΈœ–―“”‘’\\xf7ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\\xad\",\n    \"x-mac-icelandic\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc\\xdd\\xb0\\xa2\\xa3\\xa7•\\xb6\\xdf\\xae\\xa9™\\xb4\\xa8≠\\xc6\\xd8∞\\xb1≤≥\\xa5\\xb5∂∑∏π∫\\xaa\\xbaΩ\\xe6\\xf8\\xbf\\xa1\\xac√ƒ≈∆\\xab\\xbb…\\xa0\\xc0\\xc3\\xd5Œœ–—“”‘’\\xf7◊\\xffŸ⁄€\\xd0\\xf0\\xde\\xfe\\xfd\\xb7‚„‰\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\xd2\\xda\\xdb\\xd9ıˆ˜\\xaf˘˙˚\\xb8˝˛ˇ\",\n    \"x-mac-inuit\": \"ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ\\xb0ᒡᒥᒦ•\\xb6ᒧ\\xae\\xa9™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗᓘᓚᓛᓪᔨᔩᔪᔫᔭ…\\xa0ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł\",\n    \"x-mac-ce\": \"\\xc4Āā\\xc9Ą\\xd6\\xdc\\xe1ąČ\\xe4čĆć\\xe9ŹźĎ\\xedďĒēĖ\\xf3ė\\xf4\\xf6\\xf5\\xfaĚě\\xfc†\\xb0Ę\\xa3\\xa7•\\xb6\\xdf\\xae\\xa9™ę\\xa8≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ\\xac√ńŇ∆\\xab\\xbb…\\xa0ňŐ\\xd5őŌ–—“”‘’\\xf7◊ōŔŕŘ‹›řŖŗŠ‚„šŚś\\xc1Ťť\\xcdŽžŪ\\xd3\\xd4ūŮ\\xdaůŰűŲų\\xdd\\xfdķŻŁżĢˇ\",\n    macintosh: \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc†\\xb0\\xa2\\xa3\\xa7•\\xb6\\xdf\\xae\\xa9™\\xb4\\xa8≠\\xc6\\xd8∞\\xb1≤≥\\xa5\\xb5∂∑∏π∫\\xaa\\xbaΩ\\xe6\\xf8\\xbf\\xa1\\xac√ƒ≈∆\\xab\\xbb…\\xa0\\xc0\\xc3\\xd5Œœ–—“”‘’\\xf7◊\\xffŸ⁄€‹›ﬁﬂ‡\\xb7‚„‰\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\xd2\\xda\\xdb\\xd9ıˆ˜\\xaf˘˙˚\\xb8˝˛ˇ\",\n    \"x-mac-romanian\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc†\\xb0\\xa2\\xa3\\xa7•\\xb6\\xdf\\xae\\xa9™\\xb4\\xa8≠ĂȘ∞\\xb1≤≥\\xa5\\xb5∂∑∏π∫\\xaa\\xbaΩăș\\xbf\\xa1\\xac√ƒ≈∆\\xab\\xbb…\\xa0\\xc0\\xc3\\xd5Œœ–—“”‘’\\xf7◊\\xffŸ⁄€‹›Țț‡\\xb7‚„‰\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\xd2\\xda\\xdb\\xd9ıˆ˜\\xaf˘˙˚\\xb8˝˛ˇ\",\n    \"x-mac-turkish\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc†\\xb0\\xa2\\xa3\\xa7•\\xb6\\xdf\\xae\\xa9™\\xb4\\xa8≠\\xc6\\xd8∞\\xb1≤≥\\xa5\\xb5∂∑∏π∫\\xaa\\xbaΩ\\xe6\\xf8\\xbf\\xa1\\xac√ƒ≈∆\\xab\\xbb…\\xa0\\xc0\\xc3\\xd5Œœ–—“”‘’\\xf7◊\\xffŸĞğİıŞş‡\\xb7‚„‰\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\xd2\\xda\\xdb\\xd9ˆ˜\\xaf˘˙˚\\xb8˝˛ˇ\"\n};\ndecode.MACSTRING = function(dataView, offset, dataLength, encoding) {\n    var table = eightBitMacEncodings[encoding];\n    if (table === void 0) {\n        return void 0;\n    }\n    var result = \"\";\n    for(var i = 0; i < dataLength; i++){\n        var c = dataView.getUint8(offset + i);\n        if (c <= 127) {\n            result += String.fromCharCode(c);\n        } else {\n            result += table[c & 127];\n        }\n    }\n    return result;\n};\nfunction parseMetaTable(data, start) {\n    var p = new parse.Parser(data, start);\n    var tableVersion = p.parseULong();\n    check.argument(tableVersion === 1, \"Unsupported META table version.\");\n    p.parseULong();\n    p.parseULong();\n    var numDataMaps = p.parseULong();\n    var tags = {};\n    for(var i = 0; i < numDataMaps; i++){\n        var tag = p.parseTag();\n        var dataOffset = p.parseULong();\n        var dataLength = p.parseULong();\n        var text = decode.UTF8(data, start + dataOffset, dataLength);\n        tags[tag] = text;\n    }\n    return tags;\n}\nvar meta = {\n    parse: parseMetaTable\n};\nfunction parseOpenTypeTableEntries(data, numTables) {\n    var tableEntries = [];\n    var p = 12;\n    for(var i = 0; i < numTables; i += 1){\n        var tag = parse.getTag(data, p);\n        var checksum = parse.getULong(data, p + 4);\n        var offset = parse.getULong(data, p + 8);\n        var length = parse.getULong(data, p + 12);\n        tableEntries.push({\n            tag,\n            checksum,\n            offset,\n            length,\n            compression: false\n        });\n        p += 16;\n    }\n    return tableEntries;\n}\nfunction parseWOFFTableEntries(data, numTables) {\n    var tableEntries = [];\n    var p = 44;\n    for(var i = 0; i < numTables; i += 1){\n        var tag = parse.getTag(data, p);\n        var offset = parse.getULong(data, p + 4);\n        var compLength = parse.getULong(data, p + 8);\n        var origLength = parse.getULong(data, p + 12);\n        var compression = void 0;\n        if (compLength < origLength) {\n            compression = \"WOFF\";\n        } else {\n            compression = false;\n        }\n        tableEntries.push({\n            tag,\n            offset,\n            compression,\n            compressedLength: compLength,\n            length: origLength\n        });\n        p += 20;\n    }\n    return tableEntries;\n}\nfunction uncompressTable(data, tableEntry) {\n    if (tableEntry.compression === \"WOFF\") {\n        var inBuffer = new Uint8Array(data.buffer, tableEntry.offset + 2, tableEntry.compressedLength - 2);\n        var outBuffer = new Uint8Array(tableEntry.length);\n        inflateSync(inBuffer, outBuffer);\n        if (outBuffer.byteLength !== tableEntry.length) {\n            throw new Error(\"Decompression error: \" + tableEntry.tag + \" decompressed length doesn't match recorded length\");\n        }\n        var view = new DataView(outBuffer.buffer, 0);\n        return {\n            data: view,\n            offset: 0\n        };\n    } else {\n        return {\n            data,\n            offset: tableEntry.offset\n        };\n    }\n}\nfunction parseBuffer(buffer, opt) {\n    opt = opt === void 0 || opt === null ? {} : opt;\n    var indexToLocFormat;\n    var font = new Font({\n        empty: true\n    });\n    var data = new DataView(buffer, 0);\n    var numTables;\n    var tableEntries = [];\n    var signature = parse.getTag(data, 0);\n    if (signature === String.fromCharCode(0, 1, 0, 0) || signature === \"true\" || signature === \"typ1\") {\n        font.outlinesFormat = \"truetype\";\n        numTables = parse.getUShort(data, 4);\n        tableEntries = parseOpenTypeTableEntries(data, numTables);\n    } else if (signature === \"OTTO\") {\n        font.outlinesFormat = \"cff\";\n        numTables = parse.getUShort(data, 4);\n        tableEntries = parseOpenTypeTableEntries(data, numTables);\n    } else if (signature === \"wOFF\") {\n        var flavor = parse.getTag(data, 4);\n        if (flavor === String.fromCharCode(0, 1, 0, 0)) {\n            font.outlinesFormat = \"truetype\";\n        } else if (flavor === \"OTTO\") {\n            font.outlinesFormat = \"cff\";\n        } else {\n            throw new Error(\"Unsupported OpenType flavor \" + signature);\n        }\n        numTables = parse.getUShort(data, 12);\n        tableEntries = parseWOFFTableEntries(data, numTables);\n    } else {\n        throw new Error(\"Unsupported OpenType signature \" + signature);\n    }\n    var cffTableEntry;\n    var fvarTableEntry;\n    var glyfTableEntry;\n    var gdefTableEntry;\n    var gposTableEntry;\n    var gsubTableEntry;\n    var hmtxTableEntry;\n    var kernTableEntry;\n    var locaTableEntry;\n    var metaTableEntry;\n    var p;\n    for(var i = 0; i < numTables; i += 1){\n        var tableEntry = tableEntries[i];\n        var table = void 0;\n        switch(tableEntry.tag){\n            case \"cmap\":\n                table = uncompressTable(data, tableEntry);\n                font.tables.cmap = cmap.parse(table.data, table.offset);\n                font.encoding = new CmapEncoding(font.tables.cmap);\n                break;\n            case \"cvt \":\n                table = uncompressTable(data, tableEntry);\n                p = new parse.Parser(table.data, table.offset);\n                font.tables.cvt = p.parseShortList(tableEntry.length / 2);\n                break;\n            case \"fvar\":\n                fvarTableEntry = tableEntry;\n                break;\n            case \"fpgm\":\n                table = uncompressTable(data, tableEntry);\n                p = new parse.Parser(table.data, table.offset);\n                font.tables.fpgm = p.parseByteList(tableEntry.length);\n                break;\n            case \"head\":\n                table = uncompressTable(data, tableEntry);\n                font.tables.head = head.parse(table.data, table.offset);\n                font.unitsPerEm = font.tables.head.unitsPerEm;\n                indexToLocFormat = font.tables.head.indexToLocFormat;\n                break;\n            case \"hhea\":\n                table = uncompressTable(data, tableEntry);\n                font.tables.hhea = hhea.parse(table.data, table.offset);\n                font.ascender = font.tables.hhea.ascender;\n                font.descender = font.tables.hhea.descender;\n                font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;\n                break;\n            case \"hmtx\":\n                hmtxTableEntry = tableEntry;\n                break;\n            case \"ltag\":\n                table = uncompressTable(data, tableEntry);\n                ltagTable = ltag.parse(table.data, table.offset);\n                break;\n            case \"maxp\":\n                table = uncompressTable(data, tableEntry);\n                font.tables.maxp = maxp.parse(table.data, table.offset);\n                font.numGlyphs = font.tables.maxp.numGlyphs;\n                break;\n            case \"OS/2\":\n                table = uncompressTable(data, tableEntry);\n                font.tables.os2 = os2.parse(table.data, table.offset);\n                break;\n            case \"post\":\n                table = uncompressTable(data, tableEntry);\n                font.tables.post = post.parse(table.data, table.offset);\n                break;\n            case \"prep\":\n                table = uncompressTable(data, tableEntry);\n                p = new parse.Parser(table.data, table.offset);\n                font.tables.prep = p.parseByteList(tableEntry.length);\n                break;\n            case \"glyf\":\n                glyfTableEntry = tableEntry;\n                break;\n            case \"loca\":\n                locaTableEntry = tableEntry;\n                break;\n            case \"CFF \":\n                cffTableEntry = tableEntry;\n                break;\n            case \"kern\":\n                kernTableEntry = tableEntry;\n                break;\n            case \"GDEF\":\n                gdefTableEntry = tableEntry;\n                break;\n            case \"GPOS\":\n                gposTableEntry = tableEntry;\n                break;\n            case \"GSUB\":\n                gsubTableEntry = tableEntry;\n                break;\n            case \"meta\":\n                metaTableEntry = tableEntry;\n                break;\n        }\n    }\n    if (glyfTableEntry && locaTableEntry) {\n        var shortVersion = indexToLocFormat === 0;\n        var locaTable = uncompressTable(data, locaTableEntry);\n        var locaOffsets = loca.parse(locaTable.data, locaTable.offset, font.numGlyphs, shortVersion);\n        var glyfTable = uncompressTable(data, glyfTableEntry);\n        font.glyphs = glyf.parse(glyfTable.data, glyfTable.offset, locaOffsets, font, opt);\n    } else if (cffTableEntry) {\n        var cffTable = uncompressTable(data, cffTableEntry);\n        cff.parse(cffTable.data, cffTable.offset, font, opt);\n    } else {\n        throw new Error(\"Font doesn't contain TrueType or CFF outlines.\");\n    }\n    var hmtxTable = uncompressTable(data, hmtxTableEntry);\n    hmtx.parse(font, hmtxTable.data, hmtxTable.offset, font.numberOfHMetrics, font.numGlyphs, font.glyphs, opt);\n    addGlyphNames(font, opt);\n    if (kernTableEntry) {\n        var kernTable = uncompressTable(data, kernTableEntry);\n        font.kerningPairs = kern.parse(kernTable.data, kernTable.offset);\n    } else {\n        font.kerningPairs = {};\n    }\n    if (gdefTableEntry) {\n        var gdefTable = uncompressTable(data, gdefTableEntry);\n        font.tables.gdef = gdef.parse(gdefTable.data, gdefTable.offset);\n    }\n    if (gposTableEntry) {\n        var gposTable = uncompressTable(data, gposTableEntry);\n        font.tables.gpos = gpos.parse(gposTable.data, gposTable.offset);\n        font.position.init();\n    }\n    if (gsubTableEntry) {\n        var gsubTable = uncompressTable(data, gsubTableEntry);\n        font.tables.gsub = gsub.parse(gsubTable.data, gsubTable.offset);\n    }\n    if (fvarTableEntry) {\n        var fvarTable = uncompressTable(data, fvarTableEntry);\n        font.tables.fvar = fvar.parse(fvarTable.data, fvarTable.offset, font.names);\n    }\n    if (metaTableEntry) {\n        var metaTable = uncompressTable(data, metaTableEntry);\n        font.tables.meta = meta.parse(metaTable.data, metaTable.offset);\n        font.metas = font.tables.meta;\n    }\n    return font;\n}\nfunction load() {}\nfunction loadSync() {}\nvar opentype = /* @__PURE__ */ Object.freeze({\n    __proto__: null,\n    Font,\n    Glyph,\n    Path,\n    _parse: parse,\n    parse: parseBuffer,\n    load,\n    loadSync\n});\nvar opentype_module_default = opentype;\n// node_modules/.pnpm/satori@0.10.9/node_modules/satori/dist/index.wasm.js\nvar kl = Object.create;\nvar Pr = Object.defineProperty;\nvar Tl = Object.getOwnPropertyDescriptor;\nvar Al = Object.getOwnPropertyNames;\nvar Ol = Object.getPrototypeOf;\nvar Pl = Object.prototype.hasOwnProperty;\nvar vn = (e, t)=>()=>(e && (t = e(e = 0)), t);\nvar T = (e, t)=>()=>(t || e((t = {\n            exports: {}\n        }).exports, t), t.exports);\nvar yn = (e, t)=>{\n    for(var n in t)Pr(e, n, {\n        get: t[n],\n        enumerable: true\n    });\n};\nvar Go = (e, t, n, r)=>{\n    if (t && typeof t == \"object\" || typeof t == \"function\") for (let i of Al(t))!Pl.call(e, i) && i !== n && Pr(e, i, {\n        get: ()=>t[i],\n        enumerable: !(r = Tl(t, i)) || r.enumerable\n    });\n    return e;\n};\nvar Bl = (e, t, n)=>(n = e != null ? kl(Ol(e)) : {}, Go(t || !e || !e.__esModule ? Pr(n, \"default\", {\n        value: e,\n        enumerable: true\n    }) : n, e));\nvar Br = (e)=>Go(Pr({}, \"__esModule\", {\n        value: true\n    }), e);\nvar jo = {};\nyn(jo, {\n    getYogaModule: ()=>Il\n});\nasync function Il() {\n    return {};\n}\nvar Ho = vn(()=>{});\nvar Xn = T((Yn)=>{\n    \"use strict\";\n    Object.defineProperty(Yn, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(Yn, \"default\", {\n        enumerable: true,\n        get: ()=>zf\n    });\n    function zf(e) {\n        if (e = `${e}`, e === \"0\") return \"0\";\n        if (/^[+-]?(\\d+|\\d*\\.\\d+)(e[+-]?\\d+)?(%|\\w+)?$/.test(e)) return e.replace(/^[+-]?/, (t)=>t === \"-\" ? \"\" : \"-\");\n        if (e.includes(\"var(\") || e.includes(\"calc(\")) return `calc(${e} * -1)`;\n    }\n});\nvar zu = T((Qn)=>{\n    \"use strict\";\n    Object.defineProperty(Qn, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(Qn, \"default\", {\n        enumerable: true,\n        get: ()=>Uf\n    });\n    var Uf = [\n        \"preflight\",\n        \"container\",\n        \"accessibility\",\n        \"pointerEvents\",\n        \"visibility\",\n        \"position\",\n        \"inset\",\n        \"isolation\",\n        \"zIndex\",\n        \"order\",\n        \"gridColumn\",\n        \"gridColumnStart\",\n        \"gridColumnEnd\",\n        \"gridRow\",\n        \"gridRowStart\",\n        \"gridRowEnd\",\n        \"float\",\n        \"clear\",\n        \"margin\",\n        \"boxSizing\",\n        \"display\",\n        \"aspectRatio\",\n        \"height\",\n        \"maxHeight\",\n        \"minHeight\",\n        \"width\",\n        \"minWidth\",\n        \"maxWidth\",\n        \"flex\",\n        \"flexShrink\",\n        \"flexGrow\",\n        \"flexBasis\",\n        \"tableLayout\",\n        \"borderCollapse\",\n        \"borderSpacing\",\n        \"transformOrigin\",\n        \"translate\",\n        \"rotate\",\n        \"skew\",\n        \"scale\",\n        \"transform\",\n        \"animation\",\n        \"cursor\",\n        \"touchAction\",\n        \"userSelect\",\n        \"resize\",\n        \"scrollSnapType\",\n        \"scrollSnapAlign\",\n        \"scrollSnapStop\",\n        \"scrollMargin\",\n        \"scrollPadding\",\n        \"listStylePosition\",\n        \"listStyleType\",\n        \"appearance\",\n        \"columns\",\n        \"breakBefore\",\n        \"breakInside\",\n        \"breakAfter\",\n        \"gridAutoColumns\",\n        \"gridAutoFlow\",\n        \"gridAutoRows\",\n        \"gridTemplateColumns\",\n        \"gridTemplateRows\",\n        \"flexDirection\",\n        \"flexWrap\",\n        \"placeContent\",\n        \"placeItems\",\n        \"alignContent\",\n        \"alignItems\",\n        \"justifyContent\",\n        \"justifyItems\",\n        \"gap\",\n        \"space\",\n        \"divideWidth\",\n        \"divideStyle\",\n        \"divideColor\",\n        \"divideOpacity\",\n        \"placeSelf\",\n        \"alignSelf\",\n        \"justifySelf\",\n        \"overflow\",\n        \"overscrollBehavior\",\n        \"scrollBehavior\",\n        \"textOverflow\",\n        \"whitespace\",\n        \"wordBreak\",\n        \"borderRadius\",\n        \"borderWidth\",\n        \"borderStyle\",\n        \"borderColor\",\n        \"borderOpacity\",\n        \"backgroundColor\",\n        \"backgroundOpacity\",\n        \"backgroundImage\",\n        \"gradientColorStops\",\n        \"boxDecorationBreak\",\n        \"backgroundSize\",\n        \"backgroundAttachment\",\n        \"backgroundClip\",\n        \"backgroundPosition\",\n        \"backgroundRepeat\",\n        \"backgroundOrigin\",\n        \"fill\",\n        \"stroke\",\n        \"strokeWidth\",\n        \"objectFit\",\n        \"objectPosition\",\n        \"padding\",\n        \"textAlign\",\n        \"textIndent\",\n        \"verticalAlign\",\n        \"fontFamily\",\n        \"fontSize\",\n        \"fontWeight\",\n        \"textTransform\",\n        \"fontStyle\",\n        \"fontVariantNumeric\",\n        \"lineHeight\",\n        \"letterSpacing\",\n        \"textColor\",\n        \"textOpacity\",\n        \"textDecoration\",\n        \"textDecorationColor\",\n        \"textDecorationStyle\",\n        \"textDecorationThickness\",\n        \"textUnderlineOffset\",\n        \"fontSmoothing\",\n        \"placeholderColor\",\n        \"placeholderOpacity\",\n        \"caretColor\",\n        \"accentColor\",\n        \"opacity\",\n        \"backgroundBlendMode\",\n        \"mixBlendMode\",\n        \"boxShadow\",\n        \"boxShadowColor\",\n        \"outlineStyle\",\n        \"outlineWidth\",\n        \"outlineOffset\",\n        \"outlineColor\",\n        \"ringWidth\",\n        \"ringColor\",\n        \"ringOpacity\",\n        \"ringOffsetWidth\",\n        \"ringOffsetColor\",\n        \"blur\",\n        \"brightness\",\n        \"contrast\",\n        \"dropShadow\",\n        \"grayscale\",\n        \"hueRotate\",\n        \"invert\",\n        \"saturate\",\n        \"sepia\",\n        \"filter\",\n        \"backdropBlur\",\n        \"backdropBrightness\",\n        \"backdropContrast\",\n        \"backdropGrayscale\",\n        \"backdropHueRotate\",\n        \"backdropInvert\",\n        \"backdropOpacity\",\n        \"backdropSaturate\",\n        \"backdropSepia\",\n        \"backdropFilter\",\n        \"transitionProperty\",\n        \"transitionDelay\",\n        \"transitionDuration\",\n        \"transitionTimingFunction\",\n        \"willChange\",\n        \"content\"\n    ];\n});\nvar Uu = T((Kn)=>{\n    \"use strict\";\n    Object.defineProperty(Kn, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(Kn, \"default\", {\n        enumerable: true,\n        get: ()=>Gf\n    });\n    function Gf(e, t) {\n        return e === void 0 ? t : Array.isArray(e) ? e : [\n            ...new Set(t.filter((r)=>e !== false && e[r] !== false).concat(Object.keys(e).filter((r)=>e[r] !== false)))\n        ];\n    }\n});\nvar Jn = T((sb, Gu)=>{\n    Gu.exports = {\n        content: [],\n        presets: [],\n        darkMode: \"media\",\n        theme: {\n            screens: {\n                sm: \"640px\",\n                md: \"768px\",\n                lg: \"1024px\",\n                xl: \"1280px\",\n                \"2xl\": \"1536px\"\n            },\n            colors: ({ colors: e })=>({\n                    inherit: e.inherit,\n                    current: e.current,\n                    transparent: e.transparent,\n                    black: e.black,\n                    white: e.white,\n                    slate: e.slate,\n                    gray: e.gray,\n                    zinc: e.zinc,\n                    neutral: e.neutral,\n                    stone: e.stone,\n                    red: e.red,\n                    orange: e.orange,\n                    amber: e.amber,\n                    yellow: e.yellow,\n                    lime: e.lime,\n                    green: e.green,\n                    emerald: e.emerald,\n                    teal: e.teal,\n                    cyan: e.cyan,\n                    sky: e.sky,\n                    blue: e.blue,\n                    indigo: e.indigo,\n                    violet: e.violet,\n                    purple: e.purple,\n                    fuchsia: e.fuchsia,\n                    pink: e.pink,\n                    rose: e.rose\n                }),\n            columns: {\n                auto: \"auto\",\n                1: \"1\",\n                2: \"2\",\n                3: \"3\",\n                4: \"4\",\n                5: \"5\",\n                6: \"6\",\n                7: \"7\",\n                8: \"8\",\n                9: \"9\",\n                10: \"10\",\n                11: \"11\",\n                12: \"12\",\n                \"3xs\": \"16rem\",\n                \"2xs\": \"18rem\",\n                xs: \"20rem\",\n                sm: \"24rem\",\n                md: \"28rem\",\n                lg: \"32rem\",\n                xl: \"36rem\",\n                \"2xl\": \"42rem\",\n                \"3xl\": \"48rem\",\n                \"4xl\": \"56rem\",\n                \"5xl\": \"64rem\",\n                \"6xl\": \"72rem\",\n                \"7xl\": \"80rem\"\n            },\n            spacing: {\n                px: \"1px\",\n                0: \"0px\",\n                0.5: \"0.125rem\",\n                1: \"0.25rem\",\n                1.5: \"0.375rem\",\n                2: \"0.5rem\",\n                2.5: \"0.625rem\",\n                3: \"0.75rem\",\n                3.5: \"0.875rem\",\n                4: \"1rem\",\n                5: \"1.25rem\",\n                6: \"1.5rem\",\n                7: \"1.75rem\",\n                8: \"2rem\",\n                9: \"2.25rem\",\n                10: \"2.5rem\",\n                11: \"2.75rem\",\n                12: \"3rem\",\n                14: \"3.5rem\",\n                16: \"4rem\",\n                20: \"5rem\",\n                24: \"6rem\",\n                28: \"7rem\",\n                32: \"8rem\",\n                36: \"9rem\",\n                40: \"10rem\",\n                44: \"11rem\",\n                48: \"12rem\",\n                52: \"13rem\",\n                56: \"14rem\",\n                60: \"15rem\",\n                64: \"16rem\",\n                72: \"18rem\",\n                80: \"20rem\",\n                96: \"24rem\"\n            },\n            animation: {\n                none: \"none\",\n                spin: \"spin 1s linear infinite\",\n                ping: \"ping 1s cubic-bezier(0, 0, 0.2, 1) infinite\",\n                pulse: \"pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n                bounce: \"bounce 1s infinite\"\n            },\n            aspectRatio: {\n                auto: \"auto\",\n                square: \"1 / 1\",\n                video: \"16 / 9\"\n            },\n            backdropBlur: ({ theme: e })=>e(\"blur\"),\n            backdropBrightness: ({ theme: e })=>e(\"brightness\"),\n            backdropContrast: ({ theme: e })=>e(\"contrast\"),\n            backdropGrayscale: ({ theme: e })=>e(\"grayscale\"),\n            backdropHueRotate: ({ theme: e })=>e(\"hueRotate\"),\n            backdropInvert: ({ theme: e })=>e(\"invert\"),\n            backdropOpacity: ({ theme: e })=>e(\"opacity\"),\n            backdropSaturate: ({ theme: e })=>e(\"saturate\"),\n            backdropSepia: ({ theme: e })=>e(\"sepia\"),\n            backgroundColor: ({ theme: e })=>e(\"colors\"),\n            backgroundImage: {\n                none: \"none\",\n                \"gradient-to-t\": \"linear-gradient(to top, var(--tw-gradient-stops))\",\n                \"gradient-to-tr\": \"linear-gradient(to top right, var(--tw-gradient-stops))\",\n                \"gradient-to-r\": \"linear-gradient(to right, var(--tw-gradient-stops))\",\n                \"gradient-to-br\": \"linear-gradient(to bottom right, var(--tw-gradient-stops))\",\n                \"gradient-to-b\": \"linear-gradient(to bottom, var(--tw-gradient-stops))\",\n                \"gradient-to-bl\": \"linear-gradient(to bottom left, var(--tw-gradient-stops))\",\n                \"gradient-to-l\": \"linear-gradient(to left, var(--tw-gradient-stops))\",\n                \"gradient-to-tl\": \"linear-gradient(to top left, var(--tw-gradient-stops))\"\n            },\n            backgroundOpacity: ({ theme: e })=>e(\"opacity\"),\n            backgroundPosition: {\n                bottom: \"bottom\",\n                center: \"center\",\n                left: \"left\",\n                \"left-bottom\": \"left bottom\",\n                \"left-top\": \"left top\",\n                right: \"right\",\n                \"right-bottom\": \"right bottom\",\n                \"right-top\": \"right top\",\n                top: \"top\"\n            },\n            backgroundSize: {\n                auto: \"auto\",\n                cover: \"cover\",\n                contain: \"contain\"\n            },\n            blur: {\n                0: \"0\",\n                none: \"0\",\n                sm: \"4px\",\n                DEFAULT: \"8px\",\n                md: \"12px\",\n                lg: \"16px\",\n                xl: \"24px\",\n                \"2xl\": \"40px\",\n                \"3xl\": \"64px\"\n            },\n            brightness: {\n                0: \"0\",\n                50: \".5\",\n                75: \".75\",\n                90: \".9\",\n                95: \".95\",\n                100: \"1\",\n                105: \"1.05\",\n                110: \"1.1\",\n                125: \"1.25\",\n                150: \"1.5\",\n                200: \"2\"\n            },\n            borderColor: ({ theme: e })=>({\n                    ...e(\"colors\"),\n                    DEFAULT: e(\"colors.gray.200\", \"currentColor\")\n                }),\n            borderOpacity: ({ theme: e })=>e(\"opacity\"),\n            borderRadius: {\n                none: \"0px\",\n                sm: \"0.125rem\",\n                DEFAULT: \"0.25rem\",\n                md: \"0.375rem\",\n                lg: \"0.5rem\",\n                xl: \"0.75rem\",\n                \"2xl\": \"1rem\",\n                \"3xl\": \"1.5rem\",\n                full: \"9999px\"\n            },\n            borderSpacing: ({ theme: e })=>({\n                    ...e(\"spacing\")\n                }),\n            borderWidth: {\n                DEFAULT: \"1px\",\n                0: \"0px\",\n                2: \"2px\",\n                4: \"4px\",\n                8: \"8px\"\n            },\n            boxShadow: {\n                sm: \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n                DEFAULT: \"0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)\",\n                md: \"0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)\",\n                lg: \"0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)\",\n                xl: \"0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)\",\n                \"2xl\": \"0 25px 50px -12px rgb(0 0 0 / 0.25)\",\n                inner: \"inset 0 2px 4px 0 rgb(0 0 0 / 0.05)\",\n                none: \"none\"\n            },\n            boxShadowColor: ({ theme: e })=>e(\"colors\"),\n            caretColor: ({ theme: e })=>e(\"colors\"),\n            accentColor: ({ theme: e })=>({\n                    ...e(\"colors\"),\n                    auto: \"auto\"\n                }),\n            contrast: {\n                0: \"0\",\n                50: \".5\",\n                75: \".75\",\n                100: \"1\",\n                125: \"1.25\",\n                150: \"1.5\",\n                200: \"2\"\n            },\n            container: {},\n            content: {\n                none: \"none\"\n            },\n            cursor: {\n                auto: \"auto\",\n                default: \"default\",\n                pointer: \"pointer\",\n                wait: \"wait\",\n                text: \"text\",\n                move: \"move\",\n                help: \"help\",\n                \"not-allowed\": \"not-allowed\",\n                none: \"none\",\n                \"context-menu\": \"context-menu\",\n                progress: \"progress\",\n                cell: \"cell\",\n                crosshair: \"crosshair\",\n                \"vertical-text\": \"vertical-text\",\n                alias: \"alias\",\n                copy: \"copy\",\n                \"no-drop\": \"no-drop\",\n                grab: \"grab\",\n                grabbing: \"grabbing\",\n                \"all-scroll\": \"all-scroll\",\n                \"col-resize\": \"col-resize\",\n                \"row-resize\": \"row-resize\",\n                \"n-resize\": \"n-resize\",\n                \"e-resize\": \"e-resize\",\n                \"s-resize\": \"s-resize\",\n                \"w-resize\": \"w-resize\",\n                \"ne-resize\": \"ne-resize\",\n                \"nw-resize\": \"nw-resize\",\n                \"se-resize\": \"se-resize\",\n                \"sw-resize\": \"sw-resize\",\n                \"ew-resize\": \"ew-resize\",\n                \"ns-resize\": \"ns-resize\",\n                \"nesw-resize\": \"nesw-resize\",\n                \"nwse-resize\": \"nwse-resize\",\n                \"zoom-in\": \"zoom-in\",\n                \"zoom-out\": \"zoom-out\"\n            },\n            divideColor: ({ theme: e })=>e(\"borderColor\"),\n            divideOpacity: ({ theme: e })=>e(\"borderOpacity\"),\n            divideWidth: ({ theme: e })=>e(\"borderWidth\"),\n            dropShadow: {\n                sm: \"0 1px 1px rgb(0 0 0 / 0.05)\",\n                DEFAULT: [\n                    \"0 1px 2px rgb(0 0 0 / 0.1)\",\n                    \"0 1px 1px rgb(0 0 0 / 0.06)\"\n                ],\n                md: [\n                    \"0 4px 3px rgb(0 0 0 / 0.07)\",\n                    \"0 2px 2px rgb(0 0 0 / 0.06)\"\n                ],\n                lg: [\n                    \"0 10px 8px rgb(0 0 0 / 0.04)\",\n                    \"0 4px 3px rgb(0 0 0 / 0.1)\"\n                ],\n                xl: [\n                    \"0 20px 13px rgb(0 0 0 / 0.03)\",\n                    \"0 8px 5px rgb(0 0 0 / 0.08)\"\n                ],\n                \"2xl\": \"0 25px 25px rgb(0 0 0 / 0.15)\",\n                none: \"0 0 #0000\"\n            },\n            fill: ({ theme: e })=>e(\"colors\"),\n            grayscale: {\n                0: \"0\",\n                DEFAULT: \"100%\"\n            },\n            hueRotate: {\n                0: \"0deg\",\n                15: \"15deg\",\n                30: \"30deg\",\n                60: \"60deg\",\n                90: \"90deg\",\n                180: \"180deg\"\n            },\n            invert: {\n                0: \"0\",\n                DEFAULT: \"100%\"\n            },\n            flex: {\n                1: \"1 1 0%\",\n                auto: \"1 1 auto\",\n                initial: \"0 1 auto\",\n                none: \"none\"\n            },\n            flexBasis: ({ theme: e })=>({\n                    auto: \"auto\",\n                    ...e(\"spacing\"),\n                    \"1/2\": \"50%\",\n                    \"1/3\": \"33.333333%\",\n                    \"2/3\": \"66.666667%\",\n                    \"1/4\": \"25%\",\n                    \"2/4\": \"50%\",\n                    \"3/4\": \"75%\",\n                    \"1/5\": \"20%\",\n                    \"2/5\": \"40%\",\n                    \"3/5\": \"60%\",\n                    \"4/5\": \"80%\",\n                    \"1/6\": \"16.666667%\",\n                    \"2/6\": \"33.333333%\",\n                    \"3/6\": \"50%\",\n                    \"4/6\": \"66.666667%\",\n                    \"5/6\": \"83.333333%\",\n                    \"1/12\": \"8.333333%\",\n                    \"2/12\": \"16.666667%\",\n                    \"3/12\": \"25%\",\n                    \"4/12\": \"33.333333%\",\n                    \"5/12\": \"41.666667%\",\n                    \"6/12\": \"50%\",\n                    \"7/12\": \"58.333333%\",\n                    \"8/12\": \"66.666667%\",\n                    \"9/12\": \"75%\",\n                    \"10/12\": \"83.333333%\",\n                    \"11/12\": \"91.666667%\",\n                    full: \"100%\"\n                }),\n            flexGrow: {\n                0: \"0\",\n                DEFAULT: \"1\"\n            },\n            flexShrink: {\n                0: \"0\",\n                DEFAULT: \"1\"\n            },\n            fontFamily: {\n                sans: [\n                    \"ui-sans-serif\",\n                    \"system-ui\",\n                    \"-apple-system\",\n                    \"BlinkMacSystemFont\",\n                    '\"Segoe UI\"',\n                    \"Roboto\",\n                    '\"Helvetica Neue\"',\n                    \"Arial\",\n                    '\"Noto Sans\"',\n                    \"sans-serif\",\n                    '\"Apple Color Emoji\"',\n                    '\"Segoe UI Emoji\"',\n                    '\"Segoe UI Symbol\"',\n                    '\"Noto Color Emoji\"'\n                ],\n                serif: [\n                    \"ui-serif\",\n                    \"Georgia\",\n                    \"Cambria\",\n                    '\"Times New Roman\"',\n                    \"Times\",\n                    \"serif\"\n                ],\n                mono: [\n                    \"ui-monospace\",\n                    \"SFMono-Regular\",\n                    \"Menlo\",\n                    \"Monaco\",\n                    \"Consolas\",\n                    '\"Liberation Mono\"',\n                    '\"Courier New\"',\n                    \"monospace\"\n                ]\n            },\n            fontSize: {\n                xs: [\n                    \"0.75rem\",\n                    {\n                        lineHeight: \"1rem\"\n                    }\n                ],\n                sm: [\n                    \"0.875rem\",\n                    {\n                        lineHeight: \"1.25rem\"\n                    }\n                ],\n                base: [\n                    \"1rem\",\n                    {\n                        lineHeight: \"1.5rem\"\n                    }\n                ],\n                lg: [\n                    \"1.125rem\",\n                    {\n                        lineHeight: \"1.75rem\"\n                    }\n                ],\n                xl: [\n                    \"1.25rem\",\n                    {\n                        lineHeight: \"1.75rem\"\n                    }\n                ],\n                \"2xl\": [\n                    \"1.5rem\",\n                    {\n                        lineHeight: \"2rem\"\n                    }\n                ],\n                \"3xl\": [\n                    \"1.875rem\",\n                    {\n                        lineHeight: \"2.25rem\"\n                    }\n                ],\n                \"4xl\": [\n                    \"2.25rem\",\n                    {\n                        lineHeight: \"2.5rem\"\n                    }\n                ],\n                \"5xl\": [\n                    \"3rem\",\n                    {\n                        lineHeight: \"1\"\n                    }\n                ],\n                \"6xl\": [\n                    \"3.75rem\",\n                    {\n                        lineHeight: \"1\"\n                    }\n                ],\n                \"7xl\": [\n                    \"4.5rem\",\n                    {\n                        lineHeight: \"1\"\n                    }\n                ],\n                \"8xl\": [\n                    \"6rem\",\n                    {\n                        lineHeight: \"1\"\n                    }\n                ],\n                \"9xl\": [\n                    \"8rem\",\n                    {\n                        lineHeight: \"1\"\n                    }\n                ]\n            },\n            fontWeight: {\n                thin: \"100\",\n                extralight: \"200\",\n                light: \"300\",\n                normal: \"400\",\n                medium: \"500\",\n                semibold: \"600\",\n                bold: \"700\",\n                extrabold: \"800\",\n                black: \"900\"\n            },\n            gap: ({ theme: e })=>e(\"spacing\"),\n            gradientColorStops: ({ theme: e })=>e(\"colors\"),\n            gridAutoColumns: {\n                auto: \"auto\",\n                min: \"min-content\",\n                max: \"max-content\",\n                fr: \"minmax(0, 1fr)\"\n            },\n            gridAutoRows: {\n                auto: \"auto\",\n                min: \"min-content\",\n                max: \"max-content\",\n                fr: \"minmax(0, 1fr)\"\n            },\n            gridColumn: {\n                auto: \"auto\",\n                \"span-1\": \"span 1 / span 1\",\n                \"span-2\": \"span 2 / span 2\",\n                \"span-3\": \"span 3 / span 3\",\n                \"span-4\": \"span 4 / span 4\",\n                \"span-5\": \"span 5 / span 5\",\n                \"span-6\": \"span 6 / span 6\",\n                \"span-7\": \"span 7 / span 7\",\n                \"span-8\": \"span 8 / span 8\",\n                \"span-9\": \"span 9 / span 9\",\n                \"span-10\": \"span 10 / span 10\",\n                \"span-11\": \"span 11 / span 11\",\n                \"span-12\": \"span 12 / span 12\",\n                \"span-full\": \"1 / -1\"\n            },\n            gridColumnEnd: {\n                auto: \"auto\",\n                1: \"1\",\n                2: \"2\",\n                3: \"3\",\n                4: \"4\",\n                5: \"5\",\n                6: \"6\",\n                7: \"7\",\n                8: \"8\",\n                9: \"9\",\n                10: \"10\",\n                11: \"11\",\n                12: \"12\",\n                13: \"13\"\n            },\n            gridColumnStart: {\n                auto: \"auto\",\n                1: \"1\",\n                2: \"2\",\n                3: \"3\",\n                4: \"4\",\n                5: \"5\",\n                6: \"6\",\n                7: \"7\",\n                8: \"8\",\n                9: \"9\",\n                10: \"10\",\n                11: \"11\",\n                12: \"12\",\n                13: \"13\"\n            },\n            gridRow: {\n                auto: \"auto\",\n                \"span-1\": \"span 1 / span 1\",\n                \"span-2\": \"span 2 / span 2\",\n                \"span-3\": \"span 3 / span 3\",\n                \"span-4\": \"span 4 / span 4\",\n                \"span-5\": \"span 5 / span 5\",\n                \"span-6\": \"span 6 / span 6\",\n                \"span-full\": \"1 / -1\"\n            },\n            gridRowStart: {\n                auto: \"auto\",\n                1: \"1\",\n                2: \"2\",\n                3: \"3\",\n                4: \"4\",\n                5: \"5\",\n                6: \"6\",\n                7: \"7\"\n            },\n            gridRowEnd: {\n                auto: \"auto\",\n                1: \"1\",\n                2: \"2\",\n                3: \"3\",\n                4: \"4\",\n                5: \"5\",\n                6: \"6\",\n                7: \"7\"\n            },\n            gridTemplateColumns: {\n                none: \"none\",\n                1: \"repeat(1, minmax(0, 1fr))\",\n                2: \"repeat(2, minmax(0, 1fr))\",\n                3: \"repeat(3, minmax(0, 1fr))\",\n                4: \"repeat(4, minmax(0, 1fr))\",\n                5: \"repeat(5, minmax(0, 1fr))\",\n                6: \"repeat(6, minmax(0, 1fr))\",\n                7: \"repeat(7, minmax(0, 1fr))\",\n                8: \"repeat(8, minmax(0, 1fr))\",\n                9: \"repeat(9, minmax(0, 1fr))\",\n                10: \"repeat(10, minmax(0, 1fr))\",\n                11: \"repeat(11, minmax(0, 1fr))\",\n                12: \"repeat(12, minmax(0, 1fr))\"\n            },\n            gridTemplateRows: {\n                none: \"none\",\n                1: \"repeat(1, minmax(0, 1fr))\",\n                2: \"repeat(2, minmax(0, 1fr))\",\n                3: \"repeat(3, minmax(0, 1fr))\",\n                4: \"repeat(4, minmax(0, 1fr))\",\n                5: \"repeat(5, minmax(0, 1fr))\",\n                6: \"repeat(6, minmax(0, 1fr))\"\n            },\n            height: ({ theme: e })=>({\n                    auto: \"auto\",\n                    ...e(\"spacing\"),\n                    \"1/2\": \"50%\",\n                    \"1/3\": \"33.333333%\",\n                    \"2/3\": \"66.666667%\",\n                    \"1/4\": \"25%\",\n                    \"2/4\": \"50%\",\n                    \"3/4\": \"75%\",\n                    \"1/5\": \"20%\",\n                    \"2/5\": \"40%\",\n                    \"3/5\": \"60%\",\n                    \"4/5\": \"80%\",\n                    \"1/6\": \"16.666667%\",\n                    \"2/6\": \"33.333333%\",\n                    \"3/6\": \"50%\",\n                    \"4/6\": \"66.666667%\",\n                    \"5/6\": \"83.333333%\",\n                    full: \"100%\",\n                    screen: \"100vh\",\n                    min: \"min-content\",\n                    max: \"max-content\",\n                    fit: \"fit-content\"\n                }),\n            inset: ({ theme: e })=>({\n                    auto: \"auto\",\n                    ...e(\"spacing\"),\n                    \"1/2\": \"50%\",\n                    \"1/3\": \"33.333333%\",\n                    \"2/3\": \"66.666667%\",\n                    \"1/4\": \"25%\",\n                    \"2/4\": \"50%\",\n                    \"3/4\": \"75%\",\n                    full: \"100%\"\n                }),\n            keyframes: {\n                spin: {\n                    to: {\n                        transform: \"rotate(360deg)\"\n                    }\n                },\n                ping: {\n                    \"75%, 100%\": {\n                        transform: \"scale(2)\",\n                        opacity: \"0\"\n                    }\n                },\n                pulse: {\n                    \"50%\": {\n                        opacity: \".5\"\n                    }\n                },\n                bounce: {\n                    \"0%, 100%\": {\n                        transform: \"translateY(-25%)\",\n                        animationTimingFunction: \"cubic-bezier(0.8,0,1,1)\"\n                    },\n                    \"50%\": {\n                        transform: \"none\",\n                        animationTimingFunction: \"cubic-bezier(0,0,0.2,1)\"\n                    }\n                }\n            },\n            letterSpacing: {\n                tighter: \"-0.05em\",\n                tight: \"-0.025em\",\n                normal: \"0em\",\n                wide: \"0.025em\",\n                wider: \"0.05em\",\n                widest: \"0.1em\"\n            },\n            lineHeight: {\n                none: \"1\",\n                tight: \"1.25\",\n                snug: \"1.375\",\n                normal: \"1.5\",\n                relaxed: \"1.625\",\n                loose: \"2\",\n                3: \".75rem\",\n                4: \"1rem\",\n                5: \"1.25rem\",\n                6: \"1.5rem\",\n                7: \"1.75rem\",\n                8: \"2rem\",\n                9: \"2.25rem\",\n                10: \"2.5rem\"\n            },\n            listStyleType: {\n                none: \"none\",\n                disc: \"disc\",\n                decimal: \"decimal\"\n            },\n            margin: ({ theme: e })=>({\n                    auto: \"auto\",\n                    ...e(\"spacing\")\n                }),\n            maxHeight: ({ theme: e })=>({\n                    ...e(\"spacing\"),\n                    full: \"100%\",\n                    screen: \"100vh\",\n                    min: \"min-content\",\n                    max: \"max-content\",\n                    fit: \"fit-content\"\n                }),\n            maxWidth: ({ theme: e, breakpoints: t })=>({\n                    none: \"none\",\n                    0: \"0rem\",\n                    xs: \"20rem\",\n                    sm: \"24rem\",\n                    md: \"28rem\",\n                    lg: \"32rem\",\n                    xl: \"36rem\",\n                    \"2xl\": \"42rem\",\n                    \"3xl\": \"48rem\",\n                    \"4xl\": \"56rem\",\n                    \"5xl\": \"64rem\",\n                    \"6xl\": \"72rem\",\n                    \"7xl\": \"80rem\",\n                    full: \"100%\",\n                    min: \"min-content\",\n                    max: \"max-content\",\n                    fit: \"fit-content\",\n                    prose: \"65ch\",\n                    ...t(e(\"screens\"))\n                }),\n            minHeight: {\n                0: \"0px\",\n                full: \"100%\",\n                screen: \"100vh\",\n                min: \"min-content\",\n                max: \"max-content\",\n                fit: \"fit-content\"\n            },\n            minWidth: {\n                0: \"0px\",\n                full: \"100%\",\n                min: \"min-content\",\n                max: \"max-content\",\n                fit: \"fit-content\"\n            },\n            objectPosition: {\n                bottom: \"bottom\",\n                center: \"center\",\n                left: \"left\",\n                \"left-bottom\": \"left bottom\",\n                \"left-top\": \"left top\",\n                right: \"right\",\n                \"right-bottom\": \"right bottom\",\n                \"right-top\": \"right top\",\n                top: \"top\"\n            },\n            opacity: {\n                0: \"0\",\n                5: \"0.05\",\n                10: \"0.1\",\n                20: \"0.2\",\n                25: \"0.25\",\n                30: \"0.3\",\n                40: \"0.4\",\n                50: \"0.5\",\n                60: \"0.6\",\n                70: \"0.7\",\n                75: \"0.75\",\n                80: \"0.8\",\n                90: \"0.9\",\n                95: \"0.95\",\n                100: \"1\"\n            },\n            order: {\n                first: \"-9999\",\n                last: \"9999\",\n                none: \"0\",\n                1: \"1\",\n                2: \"2\",\n                3: \"3\",\n                4: \"4\",\n                5: \"5\",\n                6: \"6\",\n                7: \"7\",\n                8: \"8\",\n                9: \"9\",\n                10: \"10\",\n                11: \"11\",\n                12: \"12\"\n            },\n            padding: ({ theme: e })=>e(\"spacing\"),\n            placeholderColor: ({ theme: e })=>e(\"colors\"),\n            placeholderOpacity: ({ theme: e })=>e(\"opacity\"),\n            outlineColor: ({ theme: e })=>e(\"colors\"),\n            outlineOffset: {\n                0: \"0px\",\n                1: \"1px\",\n                2: \"2px\",\n                4: \"4px\",\n                8: \"8px\"\n            },\n            outlineWidth: {\n                0: \"0px\",\n                1: \"1px\",\n                2: \"2px\",\n                4: \"4px\",\n                8: \"8px\"\n            },\n            ringColor: ({ theme: e })=>({\n                    DEFAULT: e(\"colors.blue.500\", \"#3b82f6\"),\n                    ...e(\"colors\")\n                }),\n            ringOffsetColor: ({ theme: e })=>e(\"colors\"),\n            ringOffsetWidth: {\n                0: \"0px\",\n                1: \"1px\",\n                2: \"2px\",\n                4: \"4px\",\n                8: \"8px\"\n            },\n            ringOpacity: ({ theme: e })=>({\n                    DEFAULT: \"0.5\",\n                    ...e(\"opacity\")\n                }),\n            ringWidth: {\n                DEFAULT: \"3px\",\n                0: \"0px\",\n                1: \"1px\",\n                2: \"2px\",\n                4: \"4px\",\n                8: \"8px\"\n            },\n            rotate: {\n                0: \"0deg\",\n                1: \"1deg\",\n                2: \"2deg\",\n                3: \"3deg\",\n                6: \"6deg\",\n                12: \"12deg\",\n                45: \"45deg\",\n                90: \"90deg\",\n                180: \"180deg\"\n            },\n            saturate: {\n                0: \"0\",\n                50: \".5\",\n                100: \"1\",\n                150: \"1.5\",\n                200: \"2\"\n            },\n            scale: {\n                0: \"0\",\n                50: \".5\",\n                75: \".75\",\n                90: \".9\",\n                95: \".95\",\n                100: \"1\",\n                105: \"1.05\",\n                110: \"1.1\",\n                125: \"1.25\",\n                150: \"1.5\"\n            },\n            scrollMargin: ({ theme: e })=>({\n                    ...e(\"spacing\")\n                }),\n            scrollPadding: ({ theme: e })=>e(\"spacing\"),\n            sepia: {\n                0: \"0\",\n                DEFAULT: \"100%\"\n            },\n            skew: {\n                0: \"0deg\",\n                1: \"1deg\",\n                2: \"2deg\",\n                3: \"3deg\",\n                6: \"6deg\",\n                12: \"12deg\"\n            },\n            space: ({ theme: e })=>({\n                    ...e(\"spacing\")\n                }),\n            stroke: ({ theme: e })=>e(\"colors\"),\n            strokeWidth: {\n                0: \"0\",\n                1: \"1\",\n                2: \"2\"\n            },\n            textColor: ({ theme: e })=>e(\"colors\"),\n            textDecorationColor: ({ theme: e })=>e(\"colors\"),\n            textDecorationThickness: {\n                auto: \"auto\",\n                \"from-font\": \"from-font\",\n                0: \"0px\",\n                1: \"1px\",\n                2: \"2px\",\n                4: \"4px\",\n                8: \"8px\"\n            },\n            textUnderlineOffset: {\n                auto: \"auto\",\n                0: \"0px\",\n                1: \"1px\",\n                2: \"2px\",\n                4: \"4px\",\n                8: \"8px\"\n            },\n            textIndent: ({ theme: e })=>({\n                    ...e(\"spacing\")\n                }),\n            textOpacity: ({ theme: e })=>e(\"opacity\"),\n            transformOrigin: {\n                center: \"center\",\n                top: \"top\",\n                \"top-right\": \"top right\",\n                right: \"right\",\n                \"bottom-right\": \"bottom right\",\n                bottom: \"bottom\",\n                \"bottom-left\": \"bottom left\",\n                left: \"left\",\n                \"top-left\": \"top left\"\n            },\n            transitionDelay: {\n                75: \"75ms\",\n                100: \"100ms\",\n                150: \"150ms\",\n                200: \"200ms\",\n                300: \"300ms\",\n                500: \"500ms\",\n                700: \"700ms\",\n                1e3: \"1000ms\"\n            },\n            transitionDuration: {\n                DEFAULT: \"150ms\",\n                75: \"75ms\",\n                100: \"100ms\",\n                150: \"150ms\",\n                200: \"200ms\",\n                300: \"300ms\",\n                500: \"500ms\",\n                700: \"700ms\",\n                1e3: \"1000ms\"\n            },\n            transitionProperty: {\n                none: \"none\",\n                all: \"all\",\n                DEFAULT: \"color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter\",\n                colors: \"color, background-color, border-color, text-decoration-color, fill, stroke\",\n                opacity: \"opacity\",\n                shadow: \"box-shadow\",\n                transform: \"transform\"\n            },\n            transitionTimingFunction: {\n                DEFAULT: \"cubic-bezier(0.4, 0, 0.2, 1)\",\n                linear: \"linear\",\n                in: \"cubic-bezier(0.4, 0, 1, 1)\",\n                out: \"cubic-bezier(0, 0, 0.2, 1)\",\n                \"in-out\": \"cubic-bezier(0.4, 0, 0.2, 1)\"\n            },\n            translate: ({ theme: e })=>({\n                    ...e(\"spacing\"),\n                    \"1/2\": \"50%\",\n                    \"1/3\": \"33.333333%\",\n                    \"2/3\": \"66.666667%\",\n                    \"1/4\": \"25%\",\n                    \"2/4\": \"50%\",\n                    \"3/4\": \"75%\",\n                    full: \"100%\"\n                }),\n            width: ({ theme: e })=>({\n                    auto: \"auto\",\n                    ...e(\"spacing\"),\n                    \"1/2\": \"50%\",\n                    \"1/3\": \"33.333333%\",\n                    \"2/3\": \"66.666667%\",\n                    \"1/4\": \"25%\",\n                    \"2/4\": \"50%\",\n                    \"3/4\": \"75%\",\n                    \"1/5\": \"20%\",\n                    \"2/5\": \"40%\",\n                    \"3/5\": \"60%\",\n                    \"4/5\": \"80%\",\n                    \"1/6\": \"16.666667%\",\n                    \"2/6\": \"33.333333%\",\n                    \"3/6\": \"50%\",\n                    \"4/6\": \"66.666667%\",\n                    \"5/6\": \"83.333333%\",\n                    \"1/12\": \"8.333333%\",\n                    \"2/12\": \"16.666667%\",\n                    \"3/12\": \"25%\",\n                    \"4/12\": \"33.333333%\",\n                    \"5/12\": \"41.666667%\",\n                    \"6/12\": \"50%\",\n                    \"7/12\": \"58.333333%\",\n                    \"8/12\": \"66.666667%\",\n                    \"9/12\": \"75%\",\n                    \"10/12\": \"83.333333%\",\n                    \"11/12\": \"91.666667%\",\n                    full: \"100%\",\n                    screen: \"100vw\",\n                    min: \"min-content\",\n                    max: \"max-content\",\n                    fit: \"fit-content\"\n                }),\n            willChange: {\n                auto: \"auto\",\n                scroll: \"scroll-position\",\n                contents: \"contents\",\n                transform: \"transform\"\n            },\n            zIndex: {\n                auto: \"auto\",\n                0: \"0\",\n                10: \"10\",\n                20: \"20\",\n                30: \"30\",\n                40: \"40\",\n                50: \"50\"\n            }\n        },\n        variantOrder: [\n            \"first\",\n            \"last\",\n            \"odd\",\n            \"even\",\n            \"visited\",\n            \"checked\",\n            \"empty\",\n            \"read-only\",\n            \"group-hover\",\n            \"group-focus\",\n            \"focus-within\",\n            \"hover\",\n            \"focus\",\n            \"focus-visible\",\n            \"active\",\n            \"disabled\"\n        ],\n        plugins: []\n    };\n});\nvar Xr = {};\nyn(Xr, {\n    default: ()=>jf\n});\nvar jf;\nvar Qr = vn(()=>{\n    jf = {\n        info (e, t) {\n            console.info(...Array.isArray(e) ? [\n                e\n            ] : [\n                t,\n                e\n            ]);\n        },\n        warn (e, t) {\n            console.warn(...Array.isArray(e) ? [\n                e\n            ] : [\n                t,\n                e\n            ]);\n        },\n        risk (e, t) {\n            console.error(...Array.isArray(e) ? [\n                e\n            ] : [\n                t,\n                e\n            ]);\n        }\n    };\n});\nvar ju = T((Zn)=>{\n    \"use strict\";\n    Object.defineProperty(Zn, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(Zn, \"default\", {\n        enumerable: true,\n        get: ()=>Yf\n    });\n    var Hf = Vf((Qr(), Br(Xr)));\n    function Vf(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function Ut({ version: e, from: t, to: n }) {\n        Hf.default.warn(`${t}-color-renamed`, [\n            `As of Tailwind CSS ${e}, \\`${t}\\` has been renamed to \\`${n}\\`.`,\n            \"Update your configuration file to silence this warning.\"\n        ]);\n    }\n    var Yf = {\n        inherit: \"inherit\",\n        current: \"currentColor\",\n        transparent: \"transparent\",\n        black: \"#000\",\n        white: \"#fff\",\n        slate: {\n            50: \"#f8fafc\",\n            100: \"#f1f5f9\",\n            200: \"#e2e8f0\",\n            300: \"#cbd5e1\",\n            400: \"#94a3b8\",\n            500: \"#64748b\",\n            600: \"#475569\",\n            700: \"#334155\",\n            800: \"#1e293b\",\n            900: \"#0f172a\"\n        },\n        gray: {\n            50: \"#f9fafb\",\n            100: \"#f3f4f6\",\n            200: \"#e5e7eb\",\n            300: \"#d1d5db\",\n            400: \"#9ca3af\",\n            500: \"#6b7280\",\n            600: \"#4b5563\",\n            700: \"#374151\",\n            800: \"#1f2937\",\n            900: \"#111827\"\n        },\n        zinc: {\n            50: \"#fafafa\",\n            100: \"#f4f4f5\",\n            200: \"#e4e4e7\",\n            300: \"#d4d4d8\",\n            400: \"#a1a1aa\",\n            500: \"#71717a\",\n            600: \"#52525b\",\n            700: \"#3f3f46\",\n            800: \"#27272a\",\n            900: \"#18181b\"\n        },\n        neutral: {\n            50: \"#fafafa\",\n            100: \"#f5f5f5\",\n            200: \"#e5e5e5\",\n            300: \"#d4d4d4\",\n            400: \"#a3a3a3\",\n            500: \"#737373\",\n            600: \"#525252\",\n            700: \"#404040\",\n            800: \"#262626\",\n            900: \"#171717\"\n        },\n        stone: {\n            50: \"#fafaf9\",\n            100: \"#f5f5f4\",\n            200: \"#e7e5e4\",\n            300: \"#d6d3d1\",\n            400: \"#a8a29e\",\n            500: \"#78716c\",\n            600: \"#57534e\",\n            700: \"#44403c\",\n            800: \"#292524\",\n            900: \"#1c1917\"\n        },\n        red: {\n            50: \"#fef2f2\",\n            100: \"#fee2e2\",\n            200: \"#fecaca\",\n            300: \"#fca5a5\",\n            400: \"#f87171\",\n            500: \"#ef4444\",\n            600: \"#dc2626\",\n            700: \"#b91c1c\",\n            800: \"#991b1b\",\n            900: \"#7f1d1d\"\n        },\n        orange: {\n            50: \"#fff7ed\",\n            100: \"#ffedd5\",\n            200: \"#fed7aa\",\n            300: \"#fdba74\",\n            400: \"#fb923c\",\n            500: \"#f97316\",\n            600: \"#ea580c\",\n            700: \"#c2410c\",\n            800: \"#9a3412\",\n            900: \"#7c2d12\"\n        },\n        amber: {\n            50: \"#fffbeb\",\n            100: \"#fef3c7\",\n            200: \"#fde68a\",\n            300: \"#fcd34d\",\n            400: \"#fbbf24\",\n            500: \"#f59e0b\",\n            600: \"#d97706\",\n            700: \"#b45309\",\n            800: \"#92400e\",\n            900: \"#78350f\"\n        },\n        yellow: {\n            50: \"#fefce8\",\n            100: \"#fef9c3\",\n            200: \"#fef08a\",\n            300: \"#fde047\",\n            400: \"#facc15\",\n            500: \"#eab308\",\n            600: \"#ca8a04\",\n            700: \"#a16207\",\n            800: \"#854d0e\",\n            900: \"#713f12\"\n        },\n        lime: {\n            50: \"#f7fee7\",\n            100: \"#ecfccb\",\n            200: \"#d9f99d\",\n            300: \"#bef264\",\n            400: \"#a3e635\",\n            500: \"#84cc16\",\n            600: \"#65a30d\",\n            700: \"#4d7c0f\",\n            800: \"#3f6212\",\n            900: \"#365314\"\n        },\n        green: {\n            50: \"#f0fdf4\",\n            100: \"#dcfce7\",\n            200: \"#bbf7d0\",\n            300: \"#86efac\",\n            400: \"#4ade80\",\n            500: \"#22c55e\",\n            600: \"#16a34a\",\n            700: \"#15803d\",\n            800: \"#166534\",\n            900: \"#14532d\"\n        },\n        emerald: {\n            50: \"#ecfdf5\",\n            100: \"#d1fae5\",\n            200: \"#a7f3d0\",\n            300: \"#6ee7b7\",\n            400: \"#34d399\",\n            500: \"#10b981\",\n            600: \"#059669\",\n            700: \"#047857\",\n            800: \"#065f46\",\n            900: \"#064e3b\"\n        },\n        teal: {\n            50: \"#f0fdfa\",\n            100: \"#ccfbf1\",\n            200: \"#99f6e4\",\n            300: \"#5eead4\",\n            400: \"#2dd4bf\",\n            500: \"#14b8a6\",\n            600: \"#0d9488\",\n            700: \"#0f766e\",\n            800: \"#115e59\",\n            900: \"#134e4a\"\n        },\n        cyan: {\n            50: \"#ecfeff\",\n            100: \"#cffafe\",\n            200: \"#a5f3fc\",\n            300: \"#67e8f9\",\n            400: \"#22d3ee\",\n            500: \"#06b6d4\",\n            600: \"#0891b2\",\n            700: \"#0e7490\",\n            800: \"#155e75\",\n            900: \"#164e63\"\n        },\n        sky: {\n            50: \"#f0f9ff\",\n            100: \"#e0f2fe\",\n            200: \"#bae6fd\",\n            300: \"#7dd3fc\",\n            400: \"#38bdf8\",\n            500: \"#0ea5e9\",\n            600: \"#0284c7\",\n            700: \"#0369a1\",\n            800: \"#075985\",\n            900: \"#0c4a6e\"\n        },\n        blue: {\n            50: \"#eff6ff\",\n            100: \"#dbeafe\",\n            200: \"#bfdbfe\",\n            300: \"#93c5fd\",\n            400: \"#60a5fa\",\n            500: \"#3b82f6\",\n            600: \"#2563eb\",\n            700: \"#1d4ed8\",\n            800: \"#1e40af\",\n            900: \"#1e3a8a\"\n        },\n        indigo: {\n            50: \"#eef2ff\",\n            100: \"#e0e7ff\",\n            200: \"#c7d2fe\",\n            300: \"#a5b4fc\",\n            400: \"#818cf8\",\n            500: \"#6366f1\",\n            600: \"#4f46e5\",\n            700: \"#4338ca\",\n            800: \"#3730a3\",\n            900: \"#312e81\"\n        },\n        violet: {\n            50: \"#f5f3ff\",\n            100: \"#ede9fe\",\n            200: \"#ddd6fe\",\n            300: \"#c4b5fd\",\n            400: \"#a78bfa\",\n            500: \"#8b5cf6\",\n            600: \"#7c3aed\",\n            700: \"#6d28d9\",\n            800: \"#5b21b6\",\n            900: \"#4c1d95\"\n        },\n        purple: {\n            50: \"#faf5ff\",\n            100: \"#f3e8ff\",\n            200: \"#e9d5ff\",\n            300: \"#d8b4fe\",\n            400: \"#c084fc\",\n            500: \"#a855f7\",\n            600: \"#9333ea\",\n            700: \"#7e22ce\",\n            800: \"#6b21a8\",\n            900: \"#581c87\"\n        },\n        fuchsia: {\n            50: \"#fdf4ff\",\n            100: \"#fae8ff\",\n            200: \"#f5d0fe\",\n            300: \"#f0abfc\",\n            400: \"#e879f9\",\n            500: \"#d946ef\",\n            600: \"#c026d3\",\n            700: \"#a21caf\",\n            800: \"#86198f\",\n            900: \"#701a75\"\n        },\n        pink: {\n            50: \"#fdf2f8\",\n            100: \"#fce7f3\",\n            200: \"#fbcfe8\",\n            300: \"#f9a8d4\",\n            400: \"#f472b6\",\n            500: \"#ec4899\",\n            600: \"#db2777\",\n            700: \"#be185d\",\n            800: \"#9d174d\",\n            900: \"#831843\"\n        },\n        rose: {\n            50: \"#fff1f2\",\n            100: \"#ffe4e6\",\n            200: \"#fecdd3\",\n            300: \"#fda4af\",\n            400: \"#fb7185\",\n            500: \"#f43f5e\",\n            600: \"#e11d48\",\n            700: \"#be123c\",\n            800: \"#9f1239\",\n            900: \"#881337\"\n        },\n        get lightBlue () {\n            return Ut({\n                version: \"v2.2\",\n                from: \"lightBlue\",\n                to: \"sky\"\n            }), this.sky;\n        },\n        get warmGray () {\n            return Ut({\n                version: \"v3.0\",\n                from: \"warmGray\",\n                to: \"stone\"\n            }), this.stone;\n        },\n        get trueGray () {\n            return Ut({\n                version: \"v3.0\",\n                from: \"trueGray\",\n                to: \"neutral\"\n            }), this.neutral;\n        },\n        get coolGray () {\n            return Ut({\n                version: \"v3.0\",\n                from: \"coolGray\",\n                to: \"gray\"\n            }), this.gray;\n        },\n        get blueGray () {\n            return Ut({\n                version: \"v3.0\",\n                from: \"blueGray\",\n                to: \"slate\"\n            }), this.slate;\n        }\n    };\n});\nvar Hu = T((ei)=>{\n    \"use strict\";\n    Object.defineProperty(ei, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(ei, \"defaults\", {\n        enumerable: true,\n        get: ()=>Xf\n    });\n    function Xf(e, ...t) {\n        for (let i of t){\n            for(let o in i){\n                var n;\n                !(e == null || (n = e.hasOwnProperty) === null || n === void 0) && n.call(e, o) || (e[o] = i[o]);\n            }\n            for (let o of Object.getOwnPropertySymbols(i)){\n                var r;\n                !(e == null || (r = e.hasOwnProperty) === null || r === void 0) && r.call(e, o) || (e[o] = i[o]);\n            }\n        }\n        return e;\n    }\n});\nvar Vu = T((ti)=>{\n    \"use strict\";\n    Object.defineProperty(ti, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(ti, \"toPath\", {\n        enumerable: true,\n        get: ()=>Qf\n    });\n    function Qf(e) {\n        if (Array.isArray(e)) return e;\n        let t = e.split(\"[\").length - 1, n = e.split(\"]\").length - 1;\n        if (t !== n) throw new Error(`Path is invalid. Has unbalanced brackets: ${e}`);\n        return e.split(/\\.(?![^\\[]*\\])|[\\[\\]]/g).filter(Boolean);\n    }\n});\nvar Xu = T((ri)=>{\n    \"use strict\";\n    Object.defineProperty(ri, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(ri, \"normalizeConfig\", {\n        enumerable: true,\n        get: ()=>Jf\n    });\n    var Gt = Kf((Qr(), Br(Xr)));\n    function Yu(e) {\n        if (typeof WeakMap != \"function\") return null;\n        var t = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap();\n        return (Yu = function(r) {\n            return r ? n : t;\n        })(e);\n    }\n    function Kf(e, t) {\n        if (!t && e && e.__esModule) return e;\n        if (e === null || typeof e != \"object\" && typeof e != \"function\") return {\n            default: e\n        };\n        var n = Yu(t);\n        if (n && n.has(e)) return n.get(e);\n        var r = {}, i = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for(var o in e)if (o !== \"default\" && Object.prototype.hasOwnProperty.call(e, o)) {\n            var u = i ? Object.getOwnPropertyDescriptor(e, o) : null;\n            u && (u.get || u.set) ? Object.defineProperty(r, o, u) : r[o] = e[o];\n        }\n        return r.default = e, n && n.set(e, r), r;\n    }\n    function Jf(e) {\n        if ((()=>{\n            if (e.purge || !e.content || !Array.isArray(e.content) && !(typeof e.content == \"object\" && e.content !== null)) return false;\n            if (Array.isArray(e.content)) return e.content.every((r)=>typeof r == \"string\" ? true : !(typeof (r == null ? void 0 : r.raw) != \"string\" || r != null && r.extension && typeof (r == null ? void 0 : r.extension) != \"string\"));\n            if (typeof e.content == \"object\" && e.content !== null) {\n                if (Object.keys(e.content).some((r)=>![\n                        \"files\",\n                        \"extract\",\n                        \"transform\"\n                    ].includes(r))) return false;\n                if (Array.isArray(e.content.files)) {\n                    if (!e.content.files.every((r)=>typeof r == \"string\" ? true : !(typeof (r == null ? void 0 : r.raw) != \"string\" || r != null && r.extension && typeof (r == null ? void 0 : r.extension) != \"string\"))) return false;\n                    if (typeof e.content.extract == \"object\") {\n                        for (let r of Object.values(e.content.extract))if (typeof r != \"function\") return false;\n                    } else if (!(e.content.extract === void 0 || typeof e.content.extract == \"function\")) return false;\n                    if (typeof e.content.transform == \"object\") {\n                        for (let r of Object.values(e.content.transform))if (typeof r != \"function\") return false;\n                    } else if (!(e.content.transform === void 0 || typeof e.content.transform == \"function\")) return false;\n                }\n                return true;\n            }\n            return false;\n        })() || Gt.default.warn(\"purge-deprecation\", [\n            \"The `purge`/`content` options have changed in Tailwind CSS v3.0.\",\n            \"Update your configuration file to eliminate this warning.\",\n            \"https://tailwindcss.com/docs/upgrade-guide#configure-content-sources\"\n        ]), e.safelist = (()=>{\n            var r;\n            let { content: i, purge: o, safelist: u } = e;\n            return Array.isArray(u) ? u : Array.isArray(i == null ? void 0 : i.safelist) ? i.safelist : Array.isArray(o == null ? void 0 : o.safelist) ? o.safelist : Array.isArray(o == null || (r = o.options) === null || r === void 0 ? void 0 : r.safelist) ? o.options.safelist : [];\n        })(), typeof e.prefix == \"function\") Gt.default.warn(\"prefix-function\", [\n            \"As of Tailwind CSS v3.0, `prefix` cannot be a function.\",\n            \"Update `prefix` in your configuration to be a string to eliminate this warning.\",\n            \"https://tailwindcss.com/docs/upgrade-guide#prefix-cannot-be-a-function\"\n        ]), e.prefix = \"\";\n        else {\n            var n;\n            e.prefix = (n = e.prefix) !== null && n !== void 0 ? n : \"\";\n        }\n        e.content = {\n            files: (()=>{\n                let { content: r, purge: i } = e;\n                return Array.isArray(i) ? i : Array.isArray(i == null ? void 0 : i.content) ? i.content : Array.isArray(r) ? r : Array.isArray(r == null ? void 0 : r.content) ? r.content : Array.isArray(r == null ? void 0 : r.files) ? r.files : [];\n            })(),\n            extract: (()=>{\n                let r = (()=>{\n                    var u, s, a, l, f, c, d, h, p, m;\n                    return !((u = e.purge) === null || u === void 0) && u.extract ? e.purge.extract : !((s = e.content) === null || s === void 0) && s.extract ? e.content.extract : !((a = e.purge) === null || a === void 0 || (l = a.extract) === null || l === void 0) && l.DEFAULT ? e.purge.extract.DEFAULT : !((f = e.content) === null || f === void 0 || (c = f.extract) === null || c === void 0) && c.DEFAULT ? e.content.extract.DEFAULT : !((d = e.purge) === null || d === void 0 || (h = d.options) === null || h === void 0) && h.extractors ? e.purge.options.extractors : !((p = e.content) === null || p === void 0 || (m = p.options) === null || m === void 0) && m.extractors ? e.content.options.extractors : {};\n                })(), i = {}, o = (()=>{\n                    var u, s, a, l;\n                    if (!((u = e.purge) === null || u === void 0 || (s = u.options) === null || s === void 0) && s.defaultExtractor) return e.purge.options.defaultExtractor;\n                    if (!((a = e.content) === null || a === void 0 || (l = a.options) === null || l === void 0) && l.defaultExtractor) return e.content.options.defaultExtractor;\n                })();\n                if (o !== void 0 && (i.DEFAULT = o), typeof r == \"function\") i.DEFAULT = r;\n                else if (Array.isArray(r)) for (let { extensions: u, extractor: s } of r ?? [])for (let a of u)i[a] = s;\n                else typeof r == \"object\" && r !== null && Object.assign(i, r);\n                return i;\n            })(),\n            transform: (()=>{\n                let r = (()=>{\n                    var o, u, s, a, l, f;\n                    return !((o = e.purge) === null || o === void 0) && o.transform ? e.purge.transform : !((u = e.content) === null || u === void 0) && u.transform ? e.content.transform : !((s = e.purge) === null || s === void 0 || (a = s.transform) === null || a === void 0) && a.DEFAULT ? e.purge.transform.DEFAULT : !((l = e.content) === null || l === void 0 || (f = l.transform) === null || f === void 0) && f.DEFAULT ? e.content.transform.DEFAULT : {};\n                })(), i = {};\n                return typeof r == \"function\" && (i.DEFAULT = r), typeof r == \"object\" && r !== null && Object.assign(i, r), i;\n            })()\n        };\n        for (let r of e.content.files)if (typeof r == \"string\" && /{([^,]*?)}/g.test(r)) {\n            Gt.default.warn(\"invalid-glob-braces\", [\n                `The glob pattern ${(0, Gt.dim)(r)} in your Tailwind CSS configuration is invalid.`,\n                `Update it to ${(0, Gt.dim)(r.replace(/{([^,]*?)}/g, \"$1\"))} to silence this warning.`\n            ]);\n            break;\n        }\n        return e;\n    }\n});\nvar Qu = T((ni)=>{\n    \"use strict\";\n    Object.defineProperty(ni, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(ni, \"default\", {\n        enumerable: true,\n        get: ()=>Zf\n    });\n    function Zf(e) {\n        if (Object.prototype.toString.call(e) !== \"[object Object]\") return false;\n        let t = Object.getPrototypeOf(e);\n        return t === null || t === Object.prototype;\n    }\n});\nvar Ku = T((oi)=>{\n    \"use strict\";\n    Object.defineProperty(oi, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(oi, \"cloneDeep\", {\n        enumerable: true,\n        get: ()=>ii\n    });\n    function ii(e) {\n        return Array.isArray(e) ? e.map((t)=>ii(t)) : typeof e == \"object\" && e !== null ? Object.fromEntries(Object.entries(e).map(([t, n])=>[\n                t,\n                ii(n)\n            ])) : e;\n    }\n});\nvar ui = T((Kr, Ju)=>{\n    \"use strict\";\n    Kr.__esModule = true;\n    Kr.default = rc;\n    function ec2(e) {\n        for(var t = e.toLowerCase(), n = \"\", r = false, i = 0; i < 6 && t[i] !== void 0; i++){\n            var o = t.charCodeAt(i), u = o >= 97 && o <= 102 || o >= 48 && o <= 57;\n            if (r = o === 32, !u) break;\n            n += t[i];\n        }\n        if (n.length !== 0) {\n            var s = parseInt(n, 16), a = s >= 55296 && s <= 57343;\n            return a || s === 0 || s > 1114111 ? [\n                \"�\",\n                n.length + (r ? 1 : 0)\n            ] : [\n                String.fromCodePoint(s),\n                n.length + (r ? 1 : 0)\n            ];\n        }\n    }\n    var tc = /\\\\/;\n    function rc(e) {\n        var t = tc.test(e);\n        if (!t) return e;\n        for(var n = \"\", r = 0; r < e.length; r++){\n            if (e[r] === \"\\\\\") {\n                var i = ec2(e.slice(r + 1, r + 7));\n                if (i !== void 0) {\n                    n += i[0], r += i[1];\n                    continue;\n                }\n                if (e[r + 1] === \"\\\\\") {\n                    n += \"\\\\\", r++;\n                    continue;\n                }\n                e.length === r + 1 && (n += e[r]);\n                continue;\n            }\n            n += e[r];\n        }\n        return n;\n    }\n    Ju.exports = Kr.default;\n});\nvar es = T((Jr, Zu)=>{\n    \"use strict\";\n    Jr.__esModule = true;\n    Jr.default = nc;\n    function nc(e) {\n        for(var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++)n[r - 1] = arguments[r];\n        for(; n.length > 0;){\n            var i = n.shift();\n            if (!e[i]) return;\n            e = e[i];\n        }\n        return e;\n    }\n    Zu.exports = Jr.default;\n});\nvar rs = T((Zr, ts)=>{\n    \"use strict\";\n    Zr.__esModule = true;\n    Zr.default = ic;\n    function ic(e) {\n        for(var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++)n[r - 1] = arguments[r];\n        for(; n.length > 0;){\n            var i = n.shift();\n            e[i] || (e[i] = {}), e = e[i];\n        }\n    }\n    ts.exports = Zr.default;\n});\nvar is = T((en, ns)=>{\n    \"use strict\";\n    en.__esModule = true;\n    en.default = oc;\n    function oc(e) {\n        for(var t = \"\", n = e.indexOf(\"/*\"), r = 0; n >= 0;){\n            t = t + e.slice(r, n);\n            var i = e.indexOf(\"*/\", n + 2);\n            if (i < 0) return t;\n            r = i + 2, n = e.indexOf(\"/*\", r);\n        }\n        return t = t + e.slice(r), t;\n    }\n    ns.exports = en.default;\n});\nvar jt = T((Le)=>{\n    \"use strict\";\n    Le.__esModule = true;\n    Le.stripComments = Le.ensureObject = Le.getProp = Le.unesc = void 0;\n    var uc = tn(ui());\n    Le.unesc = uc.default;\n    var sc = tn(es());\n    Le.getProp = sc.default;\n    var ac = tn(rs());\n    Le.ensureObject = ac.default;\n    var lc = tn(is());\n    Le.stripComments = lc.default;\n    function tn(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n});\nvar ze = T((Ht, ss)=>{\n    \"use strict\";\n    Ht.__esModule = true;\n    Ht.default = void 0;\n    var os = jt();\n    function us(e, t) {\n        for(var n = 0; n < t.length; n++){\n            var r = t[n];\n            r.enumerable = r.enumerable || false, r.configurable = true, \"value\" in r && (r.writable = true), Object.defineProperty(e, r.key, r);\n        }\n    }\n    function fc(e, t, n) {\n        return t && us(e.prototype, t), n && us(e, n), e;\n    }\n    var cc = function e(t, n) {\n        if (typeof t != \"object\" || t === null) return t;\n        var r = new t.constructor();\n        for(var i in t)if (t.hasOwnProperty(i)) {\n            var o = t[i], u = typeof o;\n            i === \"parent\" && u === \"object\" ? n && (r[i] = n) : o instanceof Array ? r[i] = o.map(function(s) {\n                return e(s, r);\n            }) : r[i] = e(o, r);\n        }\n        return r;\n    }, dc = function() {\n        function e(n) {\n            n === void 0 && (n = {}), Object.assign(this, n), this.spaces = this.spaces || {}, this.spaces.before = this.spaces.before || \"\", this.spaces.after = this.spaces.after || \"\";\n        }\n        var t = e.prototype;\n        return t.remove = function() {\n            return this.parent && this.parent.removeChild(this), this.parent = void 0, this;\n        }, t.replaceWith = function() {\n            if (this.parent) {\n                for(var r in arguments)this.parent.insertBefore(this, arguments[r]);\n                this.remove();\n            }\n            return this;\n        }, t.next = function() {\n            return this.parent.at(this.parent.index(this) + 1);\n        }, t.prev = function() {\n            return this.parent.at(this.parent.index(this) - 1);\n        }, t.clone = function(r) {\n            r === void 0 && (r = {});\n            var i = cc(this);\n            for(var o in r)i[o] = r[o];\n            return i;\n        }, t.appendToPropertyAndEscape = function(r, i, o) {\n            this.raws || (this.raws = {});\n            var u = this[r], s = this.raws[r];\n            this[r] = u + i, s || o !== i ? this.raws[r] = (s || u) + o : delete this.raws[r];\n        }, t.setPropertyAndEscape = function(r, i, o) {\n            this.raws || (this.raws = {}), this[r] = i, this.raws[r] = o;\n        }, t.setPropertyWithoutEscape = function(r, i) {\n            this[r] = i, this.raws && delete this.raws[r];\n        }, t.isAtPosition = function(r, i) {\n            if (this.source && this.source.start && this.source.end) return !(this.source.start.line > r || this.source.end.line < r || this.source.start.line === r && this.source.start.column > i || this.source.end.line === r && this.source.end.column < i);\n        }, t.stringifyProperty = function(r) {\n            return this.raws && this.raws[r] || this[r];\n        }, t.valueToString = function() {\n            return String(this.stringifyProperty(\"value\"));\n        }, t.toString = function() {\n            return [\n                this.rawSpaceBefore,\n                this.valueToString(),\n                this.rawSpaceAfter\n            ].join(\"\");\n        }, fc(e, [\n            {\n                key: \"rawSpaceBefore\",\n                get: function() {\n                    var r = this.raws && this.raws.spaces && this.raws.spaces.before;\n                    return r === void 0 && (r = this.spaces && this.spaces.before), r || \"\";\n                },\n                set: function(r) {\n                    (0, os.ensureObject)(this, \"raws\", \"spaces\"), this.raws.spaces.before = r;\n                }\n            },\n            {\n                key: \"rawSpaceAfter\",\n                get: function() {\n                    var r = this.raws && this.raws.spaces && this.raws.spaces.after;\n                    return r === void 0 && (r = this.spaces.after), r || \"\";\n                },\n                set: function(r) {\n                    (0, os.ensureObject)(this, \"raws\", \"spaces\"), this.raws.spaces.after = r;\n                }\n            }\n        ]), e;\n    }();\n    Ht.default = dc;\n    ss.exports = Ht.default;\n});\nvar pe = T((X)=>{\n    \"use strict\";\n    X.__esModule = true;\n    X.UNIVERSAL = X.ATTRIBUTE = X.CLASS = X.COMBINATOR = X.COMMENT = X.ID = X.NESTING = X.PSEUDO = X.ROOT = X.SELECTOR = X.STRING = X.TAG = void 0;\n    var pc = \"tag\";\n    X.TAG = pc;\n    var hc = \"string\";\n    X.STRING = hc;\n    var mc = \"selector\";\n    X.SELECTOR = mc;\n    var Dc = \"root\";\n    X.ROOT = Dc;\n    var gc = \"pseudo\";\n    X.PSEUDO = gc;\n    var bc = \"nesting\";\n    X.NESTING = bc;\n    var vc = \"id\";\n    X.ID = vc;\n    var yc = \"comment\";\n    X.COMMENT = yc;\n    var xc = \"combinator\";\n    X.COMBINATOR = xc;\n    var Fc = \"class\";\n    X.CLASS = Fc;\n    var wc = \"attribute\";\n    X.ATTRIBUTE = wc;\n    var Ec = \"universal\";\n    X.UNIVERSAL = Ec;\n});\nvar rn = T((Vt, cs)=>{\n    \"use strict\";\n    Vt.__esModule = true;\n    Vt.default = void 0;\n    var Sc = _c(ze()), Ue = Cc(pe());\n    function fs() {\n        if (typeof WeakMap != \"function\") return null;\n        var e = /* @__PURE__ */ new WeakMap();\n        return fs = function() {\n            return e;\n        }, e;\n    }\n    function Cc(e) {\n        if (e && e.__esModule) return e;\n        if (e === null || typeof e != \"object\" && typeof e != \"function\") return {\n            default: e\n        };\n        var t = fs();\n        if (t && t.has(e)) return t.get(e);\n        var n = {}, r = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for(var i in e)if (Object.prototype.hasOwnProperty.call(e, i)) {\n            var o = r ? Object.getOwnPropertyDescriptor(e, i) : null;\n            o && (o.get || o.set) ? Object.defineProperty(n, i, o) : n[i] = e[i];\n        }\n        return n.default = e, t && t.set(e, n), n;\n    }\n    function _c(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function kc(e, t) {\n        var n;\n        if (typeof Symbol > \"u\" || e[Symbol.iterator] == null) {\n            if (Array.isArray(e) || (n = Tc(e)) || t && e && typeof e.length == \"number\") {\n                n && (e = n);\n                var r = 0;\n                return function() {\n                    return r >= e.length ? {\n                        done: true\n                    } : {\n                        done: false,\n                        value: e[r++]\n                    };\n                };\n            }\n            throw new TypeError(`Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);\n        }\n        return n = e[Symbol.iterator](), n.next.bind(n);\n    }\n    function Tc(e, t) {\n        if (e) {\n            if (typeof e == \"string\") return as(e, t);\n            var n = Object.prototype.toString.call(e).slice(8, -1);\n            if (n === \"Object\" && e.constructor && (n = e.constructor.name), n === \"Map\" || n === \"Set\") return Array.from(e);\n            if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return as(e, t);\n        }\n    }\n    function as(e, t) {\n        (t == null || t > e.length) && (t = e.length);\n        for(var n = 0, r = new Array(t); n < t; n++)r[n] = e[n];\n        return r;\n    }\n    function ls(e, t) {\n        for(var n = 0; n < t.length; n++){\n            var r = t[n];\n            r.enumerable = r.enumerable || false, r.configurable = true, \"value\" in r && (r.writable = true), Object.defineProperty(e, r.key, r);\n        }\n    }\n    function Ac(e, t, n) {\n        return t && ls(e.prototype, t), n && ls(e, n), e;\n    }\n    function Oc(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, si(e, t);\n    }\n    function si(e, t) {\n        return si = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, si(e, t);\n    }\n    var Pc = function(e) {\n        Oc(t, e);\n        function t(r) {\n            var i;\n            return i = e.call(this, r) || this, i.nodes || (i.nodes = []), i;\n        }\n        var n = t.prototype;\n        return n.append = function(i) {\n            return i.parent = this, this.nodes.push(i), this;\n        }, n.prepend = function(i) {\n            return i.parent = this, this.nodes.unshift(i), this;\n        }, n.at = function(i) {\n            return this.nodes[i];\n        }, n.index = function(i) {\n            return typeof i == \"number\" ? i : this.nodes.indexOf(i);\n        }, n.removeChild = function(i) {\n            i = this.index(i), this.at(i).parent = void 0, this.nodes.splice(i, 1);\n            var o;\n            for(var u in this.indexes)o = this.indexes[u], o >= i && (this.indexes[u] = o - 1);\n            return this;\n        }, n.removeAll = function() {\n            for(var i = kc(this.nodes), o; !(o = i()).done;){\n                var u = o.value;\n                u.parent = void 0;\n            }\n            return this.nodes = [], this;\n        }, n.empty = function() {\n            return this.removeAll();\n        }, n.insertAfter = function(i, o) {\n            o.parent = this;\n            var u = this.index(i);\n            this.nodes.splice(u + 1, 0, o), o.parent = this;\n            var s;\n            for(var a in this.indexes)s = this.indexes[a], u <= s && (this.indexes[a] = s + 1);\n            return this;\n        }, n.insertBefore = function(i, o) {\n            o.parent = this;\n            var u = this.index(i);\n            this.nodes.splice(u, 0, o), o.parent = this;\n            var s;\n            for(var a in this.indexes)s = this.indexes[a], s <= u && (this.indexes[a] = s + 1);\n            return this;\n        }, n._findChildAtPosition = function(i, o) {\n            var u = void 0;\n            return this.each(function(s) {\n                if (s.atPosition) {\n                    var a = s.atPosition(i, o);\n                    if (a) return u = a, false;\n                } else if (s.isAtPosition(i, o)) return u = s, false;\n            }), u;\n        }, n.atPosition = function(i, o) {\n            if (this.isAtPosition(i, o)) return this._findChildAtPosition(i, o) || this;\n        }, n._inferEndPosition = function() {\n            this.last && this.last.source && this.last.source.end && (this.source = this.source || {}, this.source.end = this.source.end || {}, Object.assign(this.source.end, this.last.source.end));\n        }, n.each = function(i) {\n            this.lastEach || (this.lastEach = 0), this.indexes || (this.indexes = {}), this.lastEach++;\n            var o = this.lastEach;\n            if (this.indexes[o] = 0, !!this.length) {\n                for(var u, s; this.indexes[o] < this.length && (u = this.indexes[o], s = i(this.at(u), u), s !== false);)this.indexes[o] += 1;\n                if (delete this.indexes[o], s === false) return false;\n            }\n        }, n.walk = function(i) {\n            return this.each(function(o, u) {\n                var s = i(o, u);\n                if (s !== false && o.length && (s = o.walk(i)), s === false) return false;\n            });\n        }, n.walkAttributes = function(i) {\n            var o = this;\n            return this.walk(function(u) {\n                if (u.type === Ue.ATTRIBUTE) return i.call(o, u);\n            });\n        }, n.walkClasses = function(i) {\n            var o = this;\n            return this.walk(function(u) {\n                if (u.type === Ue.CLASS) return i.call(o, u);\n            });\n        }, n.walkCombinators = function(i) {\n            var o = this;\n            return this.walk(function(u) {\n                if (u.type === Ue.COMBINATOR) return i.call(o, u);\n            });\n        }, n.walkComments = function(i) {\n            var o = this;\n            return this.walk(function(u) {\n                if (u.type === Ue.COMMENT) return i.call(o, u);\n            });\n        }, n.walkIds = function(i) {\n            var o = this;\n            return this.walk(function(u) {\n                if (u.type === Ue.ID) return i.call(o, u);\n            });\n        }, n.walkNesting = function(i) {\n            var o = this;\n            return this.walk(function(u) {\n                if (u.type === Ue.NESTING) return i.call(o, u);\n            });\n        }, n.walkPseudos = function(i) {\n            var o = this;\n            return this.walk(function(u) {\n                if (u.type === Ue.PSEUDO) return i.call(o, u);\n            });\n        }, n.walkTags = function(i) {\n            var o = this;\n            return this.walk(function(u) {\n                if (u.type === Ue.TAG) return i.call(o, u);\n            });\n        }, n.walkUniversals = function(i) {\n            var o = this;\n            return this.walk(function(u) {\n                if (u.type === Ue.UNIVERSAL) return i.call(o, u);\n            });\n        }, n.split = function(i) {\n            var o = this, u = [];\n            return this.reduce(function(s, a, l) {\n                var f = i.call(o, a);\n                return u.push(a), f ? (s.push(u), u = []) : l === o.length - 1 && s.push(u), s;\n            }, []);\n        }, n.map = function(i) {\n            return this.nodes.map(i);\n        }, n.reduce = function(i, o) {\n            return this.nodes.reduce(i, o);\n        }, n.every = function(i) {\n            return this.nodes.every(i);\n        }, n.some = function(i) {\n            return this.nodes.some(i);\n        }, n.filter = function(i) {\n            return this.nodes.filter(i);\n        }, n.sort = function(i) {\n            return this.nodes.sort(i);\n        }, n.toString = function() {\n            return this.map(String).join(\"\");\n        }, Ac(t, [\n            {\n                key: \"first\",\n                get: function() {\n                    return this.at(0);\n                }\n            },\n            {\n                key: \"last\",\n                get: function() {\n                    return this.at(this.length - 1);\n                }\n            },\n            {\n                key: \"length\",\n                get: function() {\n                    return this.nodes.length;\n                }\n            }\n        ]), t;\n    }(Sc.default);\n    Vt.default = Pc;\n    cs.exports = Vt.default;\n});\nvar li = T((Yt, ps)=>{\n    \"use strict\";\n    Yt.__esModule = true;\n    Yt.default = void 0;\n    var Bc = Rc(rn()), Ic = pe();\n    function Rc(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function ds(e, t) {\n        for(var n = 0; n < t.length; n++){\n            var r = t[n];\n            r.enumerable = r.enumerable || false, r.configurable = true, \"value\" in r && (r.writable = true), Object.defineProperty(e, r.key, r);\n        }\n    }\n    function Lc(e, t, n) {\n        return t && ds(e.prototype, t), n && ds(e, n), e;\n    }\n    function Mc(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, ai(e, t);\n    }\n    function ai(e, t) {\n        return ai = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, ai(e, t);\n    }\n    var Nc = function(e) {\n        Mc(t, e);\n        function t(r) {\n            var i;\n            return i = e.call(this, r) || this, i.type = Ic.ROOT, i;\n        }\n        var n = t.prototype;\n        return n.toString = function() {\n            var i = this.reduce(function(o, u) {\n                return o.push(String(u)), o;\n            }, []).join(\",\");\n            return this.trailingComma ? i + \",\" : i;\n        }, n.error = function(i, o) {\n            return this._error ? this._error(i, o) : new Error(i);\n        }, Lc(t, [\n            {\n                key: \"errorGenerator\",\n                set: function(i) {\n                    this._error = i;\n                }\n            }\n        ]), t;\n    }(Bc.default);\n    Yt.default = Nc;\n    ps.exports = Yt.default;\n});\nvar ci = T((Xt, hs)=>{\n    \"use strict\";\n    Xt.__esModule = true;\n    Xt.default = void 0;\n    var Wc = qc(rn()), $c = pe();\n    function qc(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function zc(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, fi(e, t);\n    }\n    function fi(e, t) {\n        return fi = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, fi(e, t);\n    }\n    var Uc = function(e) {\n        zc(t, e);\n        function t(n) {\n            var r;\n            return r = e.call(this, n) || this, r.type = $c.SELECTOR, r;\n        }\n        return t;\n    }(Wc.default);\n    Xt.default = Uc;\n    hs.exports = Xt.default;\n});\nvar nn = T((Db, ms)=>{\n    \"use strict\";\n    var Gc = {}, jc = Gc.hasOwnProperty, Hc = function(t, n) {\n        if (!t) return n;\n        var r = {};\n        for(var i in n)r[i] = jc.call(t, i) ? t[i] : n[i];\n        return r;\n    }, Vc = /[ -,\\.\\/:-@\\[-\\^`\\{-~]/, Yc = /[ -,\\.\\/:-@\\[\\]\\^`\\{-~]/, Xc = /(^|\\\\+)?(\\\\[A-F0-9]{1,6})\\x20(?![a-fA-F0-9\\x20])/g, di = function e(t, n) {\n        n = Hc(n, e.options), n.quotes != \"single\" && n.quotes != \"double\" && (n.quotes = \"single\");\n        for(var r = n.quotes == \"double\" ? '\"' : \"'\", i = n.isIdentifier, o = t.charAt(0), u = \"\", s = 0, a = t.length; s < a;){\n            var l = t.charAt(s++), f = l.charCodeAt(), c = void 0;\n            if (f < 32 || f > 126) {\n                if (f >= 55296 && f <= 56319 && s < a) {\n                    var d = t.charCodeAt(s++);\n                    (d & 64512) == 56320 ? f = ((f & 1023) << 10) + (d & 1023) + 65536 : s--;\n                }\n                c = \"\\\\\" + f.toString(16).toUpperCase() + \" \";\n            } else n.escapeEverything ? Vc.test(l) ? c = \"\\\\\" + l : c = \"\\\\\" + f.toString(16).toUpperCase() + \" \" : /[\\t\\n\\f\\r\\x0B]/.test(l) ? c = \"\\\\\" + f.toString(16).toUpperCase() + \" \" : l == \"\\\\\" || !i && (l == '\"' && r == l || l == \"'\" && r == l) || i && Yc.test(l) ? c = \"\\\\\" + l : c = l;\n            u += c;\n        }\n        return i && (/^-[-\\d]/.test(u) ? u = \"\\\\-\" + u.slice(1) : /\\d/.test(o) && (u = \"\\\\3\" + o + \" \" + u.slice(1))), u = u.replace(Xc, function(h, p, m) {\n            return p && p.length % 2 ? h : (p || \"\") + m;\n        }), !i && n.wrap ? r + u + r : u;\n    };\n    di.options = {\n        escapeEverything: false,\n        isIdentifier: false,\n        quotes: \"single\",\n        wrap: false\n    };\n    di.version = \"3.0.0\";\n    ms.exports = di;\n});\nvar hi = T((Qt, bs)=>{\n    \"use strict\";\n    Qt.__esModule = true;\n    Qt.default = void 0;\n    var Qc = gs(nn()), Kc = jt(), Jc = gs(ze()), Zc = pe();\n    function gs(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function Ds(e, t) {\n        for(var n = 0; n < t.length; n++){\n            var r = t[n];\n            r.enumerable = r.enumerable || false, r.configurable = true, \"value\" in r && (r.writable = true), Object.defineProperty(e, r.key, r);\n        }\n    }\n    function ed(e, t, n) {\n        return t && Ds(e.prototype, t), n && Ds(e, n), e;\n    }\n    function td2(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, pi(e, t);\n    }\n    function pi(e, t) {\n        return pi = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, pi(e, t);\n    }\n    var rd = function(e) {\n        td2(t, e);\n        function t(r) {\n            var i;\n            return i = e.call(this, r) || this, i.type = Zc.CLASS, i._constructed = true, i;\n        }\n        var n = t.prototype;\n        return n.valueToString = function() {\n            return \".\" + e.prototype.valueToString.call(this);\n        }, ed(t, [\n            {\n                key: \"value\",\n                get: function() {\n                    return this._value;\n                },\n                set: function(i) {\n                    if (this._constructed) {\n                        var o = (0, Qc.default)(i, {\n                            isIdentifier: true\n                        });\n                        o !== i ? ((0, Kc.ensureObject)(this, \"raws\"), this.raws.value = o) : this.raws && delete this.raws.value;\n                    }\n                    this._value = i;\n                }\n            }\n        ]), t;\n    }(Jc.default);\n    Qt.default = rd;\n    bs.exports = Qt.default;\n});\nvar Di = T((Kt, vs)=>{\n    \"use strict\";\n    Kt.__esModule = true;\n    Kt.default = void 0;\n    var nd = od(ze()), id = pe();\n    function od(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function ud(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, mi(e, t);\n    }\n    function mi(e, t) {\n        return mi = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, mi(e, t);\n    }\n    var sd = function(e) {\n        ud(t, e);\n        function t(n) {\n            var r;\n            return r = e.call(this, n) || this, r.type = id.COMMENT, r;\n        }\n        return t;\n    }(nd.default);\n    Kt.default = sd;\n    vs.exports = Kt.default;\n});\nvar bi = T((Jt, ys)=>{\n    \"use strict\";\n    Jt.__esModule = true;\n    Jt.default = void 0;\n    var ad = fd2(ze()), ld = pe();\n    function fd2(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function cd(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, gi(e, t);\n    }\n    function gi(e, t) {\n        return gi = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, gi(e, t);\n    }\n    var dd = function(e) {\n        cd(t, e);\n        function t(r) {\n            var i;\n            return i = e.call(this, r) || this, i.type = ld.ID, i;\n        }\n        var n = t.prototype;\n        return n.valueToString = function() {\n            return \"#\" + e.prototype.valueToString.call(this);\n        }, t;\n    }(ad.default);\n    Jt.default = dd;\n    ys.exports = Jt.default;\n});\nvar on = T((Zt, ws)=>{\n    \"use strict\";\n    Zt.__esModule = true;\n    Zt.default = void 0;\n    var pd = Fs(nn()), hd = jt(), md = Fs(ze());\n    function Fs(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function xs(e, t) {\n        for(var n = 0; n < t.length; n++){\n            var r = t[n];\n            r.enumerable = r.enumerable || false, r.configurable = true, \"value\" in r && (r.writable = true), Object.defineProperty(e, r.key, r);\n        }\n    }\n    function Dd(e, t, n) {\n        return t && xs(e.prototype, t), n && xs(e, n), e;\n    }\n    function gd(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, vi(e, t);\n    }\n    function vi(e, t) {\n        return vi = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, vi(e, t);\n    }\n    var bd = function(e) {\n        gd(t, e);\n        function t() {\n            return e.apply(this, arguments) || this;\n        }\n        var n = t.prototype;\n        return n.qualifiedName = function(i) {\n            return this.namespace ? this.namespaceString + \"|\" + i : i;\n        }, n.valueToString = function() {\n            return this.qualifiedName(e.prototype.valueToString.call(this));\n        }, Dd(t, [\n            {\n                key: \"namespace\",\n                get: function() {\n                    return this._namespace;\n                },\n                set: function(i) {\n                    if (i === true || i === \"*\" || i === \"&\") {\n                        this._namespace = i, this.raws && delete this.raws.namespace;\n                        return;\n                    }\n                    var o = (0, pd.default)(i, {\n                        isIdentifier: true\n                    });\n                    this._namespace = i, o !== i ? ((0, hd.ensureObject)(this, \"raws\"), this.raws.namespace = o) : this.raws && delete this.raws.namespace;\n                }\n            },\n            {\n                key: \"ns\",\n                get: function() {\n                    return this._namespace;\n                },\n                set: function(i) {\n                    this.namespace = i;\n                }\n            },\n            {\n                key: \"namespaceString\",\n                get: function() {\n                    if (this.namespace) {\n                        var i = this.stringifyProperty(\"namespace\");\n                        return i === true ? \"\" : i;\n                    } else return \"\";\n                }\n            }\n        ]), t;\n    }(md.default);\n    Zt.default = bd;\n    ws.exports = Zt.default;\n});\nvar xi = T((er, Es)=>{\n    \"use strict\";\n    er.__esModule = true;\n    er.default = void 0;\n    var vd = xd(on()), yd = pe();\n    function xd(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function Fd(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, yi(e, t);\n    }\n    function yi(e, t) {\n        return yi = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, yi(e, t);\n    }\n    var wd = function(e) {\n        Fd(t, e);\n        function t(n) {\n            var r;\n            return r = e.call(this, n) || this, r.type = yd.TAG, r;\n        }\n        return t;\n    }(vd.default);\n    er.default = wd;\n    Es.exports = er.default;\n});\nvar wi = T((tr, Ss)=>{\n    \"use strict\";\n    tr.__esModule = true;\n    tr.default = void 0;\n    var Ed = Cd(ze()), Sd = pe();\n    function Cd(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function _d(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, Fi(e, t);\n    }\n    function Fi(e, t) {\n        return Fi = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, Fi(e, t);\n    }\n    var kd = function(e) {\n        _d(t, e);\n        function t(n) {\n            var r;\n            return r = e.call(this, n) || this, r.type = Sd.STRING, r;\n        }\n        return t;\n    }(Ed.default);\n    tr.default = kd;\n    Ss.exports = tr.default;\n});\nvar Si = T((rr, Cs)=>{\n    \"use strict\";\n    rr.__esModule = true;\n    rr.default = void 0;\n    var Td = Od(rn()), Ad = pe();\n    function Od(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function Pd(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, Ei(e, t);\n    }\n    function Ei(e, t) {\n        return Ei = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, Ei(e, t);\n    }\n    var Bd = function(e) {\n        Pd(t, e);\n        function t(r) {\n            var i;\n            return i = e.call(this, r) || this, i.type = Ad.PSEUDO, i;\n        }\n        var n = t.prototype;\n        return n.toString = function() {\n            var i = this.length ? \"(\" + this.map(String).join(\",\") + \")\" : \"\";\n            return [\n                this.rawSpaceBefore,\n                this.stringifyProperty(\"value\"),\n                i,\n                this.rawSpaceAfter\n            ].join(\"\");\n        }, t;\n    }(Td.default);\n    rr.default = Bd;\n    Cs.exports = rr.default;\n});\nvar ks = T((gb, _s)=>{\n    _s.exports = function(t, n) {\n        return function(...r) {\n            return console.warn(n), t(...r);\n        };\n    };\n});\nvar Oi = T((or)=>{\n    \"use strict\";\n    or.__esModule = true;\n    or.unescapeValue = Ai;\n    or.default = void 0;\n    var nr = Ti(nn()), Id = Ti(ui()), Rd = Ti(on()), Ld = pe(), Ci;\n    function Ti(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function Ts(e, t) {\n        for(var n = 0; n < t.length; n++){\n            var r = t[n];\n            r.enumerable = r.enumerable || false, r.configurable = true, \"value\" in r && (r.writable = true), Object.defineProperty(e, r.key, r);\n        }\n    }\n    function Md(e, t, n) {\n        return t && Ts(e.prototype, t), n && Ts(e, n), e;\n    }\n    function Nd(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, ki(e, t);\n    }\n    function ki(e, t) {\n        return ki = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, ki(e, t);\n    }\n    var ir = ks(), Wd = /^('|\")([^]*)\\1$/, $d = ir(function() {}, \"Assigning an attribute a value containing characters that might need to be escaped is deprecated. Call attribute.setValue() instead.\"), qd = ir(function() {}, \"Assigning attr.quoted is deprecated and has no effect. Assign to attr.quoteMark instead.\"), zd = ir(function() {}, \"Constructing an Attribute selector with a value without specifying quoteMark is deprecated. Note: The value should be unescaped now.\");\n    function Ai(e) {\n        var t = false, n = null, r = e, i = r.match(Wd);\n        return i && (n = i[1], r = i[2]), r = (0, Id.default)(r), r !== e && (t = true), {\n            deprecatedUsage: t,\n            unescaped: r,\n            quoteMark: n\n        };\n    }\n    function Ud(e) {\n        if (e.quoteMark !== void 0 || e.value === void 0) return e;\n        zd();\n        var t = Ai(e.value), n = t.quoteMark, r = t.unescaped;\n        return e.raws || (e.raws = {}), e.raws.value === void 0 && (e.raws.value = e.value), e.value = r, e.quoteMark = n, e;\n    }\n    var un = function(e) {\n        Nd(t, e);\n        function t(r) {\n            var i;\n            return r === void 0 && (r = {}), i = e.call(this, Ud(r)) || this, i.type = Ld.ATTRIBUTE, i.raws = i.raws || {}, Object.defineProperty(i.raws, \"unquoted\", {\n                get: ir(function() {\n                    return i.value;\n                }, \"attr.raws.unquoted is deprecated. Call attr.value instead.\"),\n                set: ir(function() {\n                    return i.value;\n                }, \"Setting attr.raws.unquoted is deprecated and has no effect. attr.value is unescaped by default now.\")\n            }), i._constructed = true, i;\n        }\n        var n = t.prototype;\n        return n.getQuotedValue = function(i) {\n            i === void 0 && (i = {});\n            var o = this._determineQuoteMark(i), u = _i[o], s = (0, nr.default)(this._value, u);\n            return s;\n        }, n._determineQuoteMark = function(i) {\n            return i.smart ? this.smartQuoteMark(i) : this.preferredQuoteMark(i);\n        }, n.setValue = function(i, o) {\n            o === void 0 && (o = {}), this._value = i, this._quoteMark = this._determineQuoteMark(o), this._syncRawValue();\n        }, n.smartQuoteMark = function(i) {\n            var o = this.value, u = o.replace(/[^']/g, \"\").length, s = o.replace(/[^\"]/g, \"\").length;\n            if (u + s === 0) {\n                var a = (0, nr.default)(o, {\n                    isIdentifier: true\n                });\n                if (a === o) return t.NO_QUOTE;\n                var l = this.preferredQuoteMark(i);\n                if (l === t.NO_QUOTE) {\n                    var f = this.quoteMark || i.quoteMark || t.DOUBLE_QUOTE, c = _i[f], d = (0, nr.default)(o, c);\n                    if (d.length < a.length) return f;\n                }\n                return l;\n            } else return s === u ? this.preferredQuoteMark(i) : s < u ? t.DOUBLE_QUOTE : t.SINGLE_QUOTE;\n        }, n.preferredQuoteMark = function(i) {\n            var o = i.preferCurrentQuoteMark ? this.quoteMark : i.quoteMark;\n            return o === void 0 && (o = i.preferCurrentQuoteMark ? i.quoteMark : this.quoteMark), o === void 0 && (o = t.DOUBLE_QUOTE), o;\n        }, n._syncRawValue = function() {\n            var i = (0, nr.default)(this._value, _i[this.quoteMark]);\n            i === this._value ? this.raws && delete this.raws.value : this.raws.value = i;\n        }, n._handleEscapes = function(i, o) {\n            if (this._constructed) {\n                var u = (0, nr.default)(o, {\n                    isIdentifier: true\n                });\n                u !== o ? this.raws[i] = u : delete this.raws[i];\n            }\n        }, n._spacesFor = function(i) {\n            var o = {\n                before: \"\",\n                after: \"\"\n            }, u = this.spaces[i] || {}, s = this.raws.spaces && this.raws.spaces[i] || {};\n            return Object.assign(o, u, s);\n        }, n._stringFor = function(i, o, u) {\n            o === void 0 && (o = i), u === void 0 && (u = As);\n            var s = this._spacesFor(o);\n            return u(this.stringifyProperty(i), s);\n        }, n.offsetOf = function(i) {\n            var o = 1, u = this._spacesFor(\"attribute\");\n            if (o += u.before.length, i === \"namespace\" || i === \"ns\") return this.namespace ? o : -1;\n            if (i === \"attributeNS\" || (o += this.namespaceString.length, this.namespace && (o += 1), i === \"attribute\")) return o;\n            o += this.stringifyProperty(\"attribute\").length, o += u.after.length;\n            var s = this._spacesFor(\"operator\");\n            o += s.before.length;\n            var a = this.stringifyProperty(\"operator\");\n            if (i === \"operator\") return a ? o : -1;\n            o += a.length, o += s.after.length;\n            var l = this._spacesFor(\"value\");\n            o += l.before.length;\n            var f = this.stringifyProperty(\"value\");\n            if (i === \"value\") return f ? o : -1;\n            o += f.length, o += l.after.length;\n            var c = this._spacesFor(\"insensitive\");\n            return o += c.before.length, i === \"insensitive\" && this.insensitive ? o : -1;\n        }, n.toString = function() {\n            var i = this, o = [\n                this.rawSpaceBefore,\n                \"[\"\n            ];\n            return o.push(this._stringFor(\"qualifiedAttribute\", \"attribute\")), this.operator && (this.value || this.value === \"\") && (o.push(this._stringFor(\"operator\")), o.push(this._stringFor(\"value\")), o.push(this._stringFor(\"insensitiveFlag\", \"insensitive\", function(u, s) {\n                return u.length > 0 && !i.quoted && s.before.length === 0 && !(i.spaces.value && i.spaces.value.after) && (s.before = \" \"), As(u, s);\n            }))), o.push(\"]\"), o.push(this.rawSpaceAfter), o.join(\"\");\n        }, Md(t, [\n            {\n                key: \"quoted\",\n                get: function() {\n                    var i = this.quoteMark;\n                    return i === \"'\" || i === '\"';\n                },\n                set: function(i) {\n                    qd();\n                }\n            },\n            {\n                key: \"quoteMark\",\n                get: function() {\n                    return this._quoteMark;\n                },\n                set: function(i) {\n                    if (!this._constructed) {\n                        this._quoteMark = i;\n                        return;\n                    }\n                    this._quoteMark !== i && (this._quoteMark = i, this._syncRawValue());\n                }\n            },\n            {\n                key: \"qualifiedAttribute\",\n                get: function() {\n                    return this.qualifiedName(this.raws.attribute || this.attribute);\n                }\n            },\n            {\n                key: \"insensitiveFlag\",\n                get: function() {\n                    return this.insensitive ? \"i\" : \"\";\n                }\n            },\n            {\n                key: \"value\",\n                get: function() {\n                    return this._value;\n                },\n                set: function(i) {\n                    if (this._constructed) {\n                        var o = Ai(i), u = o.deprecatedUsage, s = o.unescaped, a = o.quoteMark;\n                        if (u && $d(), s === this._value && a === this._quoteMark) return;\n                        this._value = s, this._quoteMark = a, this._syncRawValue();\n                    } else this._value = i;\n                }\n            },\n            {\n                key: \"attribute\",\n                get: function() {\n                    return this._attribute;\n                },\n                set: function(i) {\n                    this._handleEscapes(\"attribute\", i), this._attribute = i;\n                }\n            }\n        ]), t;\n    }(Rd.default);\n    or.default = un;\n    un.NO_QUOTE = null;\n    un.SINGLE_QUOTE = \"'\";\n    un.DOUBLE_QUOTE = '\"';\n    var _i = (Ci = {\n        \"'\": {\n            quotes: \"single\",\n            wrap: true\n        },\n        '\"': {\n            quotes: \"double\",\n            wrap: true\n        }\n    }, Ci[null] = {\n        isIdentifier: true\n    }, Ci);\n    function As(e, t) {\n        return \"\" + t.before + e + t.after;\n    }\n});\nvar Bi = T((ur, Os)=>{\n    \"use strict\";\n    ur.__esModule = true;\n    ur.default = void 0;\n    var Gd = Hd(on()), jd = pe();\n    function Hd(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function Vd(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, Pi(e, t);\n    }\n    function Pi(e, t) {\n        return Pi = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, Pi(e, t);\n    }\n    var Yd = function(e) {\n        Vd(t, e);\n        function t(n) {\n            var r;\n            return r = e.call(this, n) || this, r.type = jd.UNIVERSAL, r.value = \"*\", r;\n        }\n        return t;\n    }(Gd.default);\n    ur.default = Yd;\n    Os.exports = ur.default;\n});\nvar Ri = T((sr, Ps)=>{\n    \"use strict\";\n    sr.__esModule = true;\n    sr.default = void 0;\n    var Xd = Kd(ze()), Qd = pe();\n    function Kd(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function Jd(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, Ii(e, t);\n    }\n    function Ii(e, t) {\n        return Ii = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, Ii(e, t);\n    }\n    var Zd = function(e) {\n        Jd(t, e);\n        function t(n) {\n            var r;\n            return r = e.call(this, n) || this, r.type = Qd.COMBINATOR, r;\n        }\n        return t;\n    }(Xd.default);\n    sr.default = Zd;\n    Ps.exports = sr.default;\n});\nvar Mi = T((ar, Bs)=>{\n    \"use strict\";\n    ar.__esModule = true;\n    ar.default = void 0;\n    var ep = rp(ze()), tp = pe();\n    function rp(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function np(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, Li(e, t);\n    }\n    function Li(e, t) {\n        return Li = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, Li(e, t);\n    }\n    var ip = function(e) {\n        np(t, e);\n        function t(n) {\n            var r;\n            return r = e.call(this, n) || this, r.type = tp.NESTING, r.value = \"&\", r;\n        }\n        return t;\n    }(ep.default);\n    ar.default = ip;\n    Bs.exports = ar.default;\n});\nvar Rs = T((sn, Is)=>{\n    \"use strict\";\n    sn.__esModule = true;\n    sn.default = op;\n    function op(e) {\n        return e.sort(function(t, n) {\n            return t - n;\n        });\n    }\n    Is.exports = sn.default;\n});\nvar Ni = T((_)=>{\n    \"use strict\";\n    _.__esModule = true;\n    _.combinator = _.word = _.comment = _.str = _.tab = _.newline = _.feed = _.cr = _.backslash = _.bang = _.slash = _.doubleQuote = _.singleQuote = _.space = _.greaterThan = _.pipe = _.equals = _.plus = _.caret = _.tilde = _.dollar = _.closeSquare = _.openSquare = _.closeParenthesis = _.openParenthesis = _.semicolon = _.colon = _.comma = _.at = _.asterisk = _.ampersand = void 0;\n    var up = 38;\n    _.ampersand = up;\n    var sp = 42;\n    _.asterisk = sp;\n    var ap = 64;\n    _.at = ap;\n    var lp = 44;\n    _.comma = lp;\n    var fp = 58;\n    _.colon = fp;\n    var cp = 59;\n    _.semicolon = cp;\n    var dp = 40;\n    _.openParenthesis = dp;\n    var pp = 41;\n    _.closeParenthesis = pp;\n    var hp = 91;\n    _.openSquare = hp;\n    var mp = 93;\n    _.closeSquare = mp;\n    var Dp = 36;\n    _.dollar = Dp;\n    var gp = 126;\n    _.tilde = gp;\n    var bp = 94;\n    _.caret = bp;\n    var vp = 43;\n    _.plus = vp;\n    var yp = 61;\n    _.equals = yp;\n    var xp = 124;\n    _.pipe = xp;\n    var Fp = 62;\n    _.greaterThan = Fp;\n    var wp = 32;\n    _.space = wp;\n    var Ls = 39;\n    _.singleQuote = Ls;\n    var Ep = 34;\n    _.doubleQuote = Ep;\n    var Sp = 47;\n    _.slash = Sp;\n    var Cp = 33;\n    _.bang = Cp;\n    var _p = 92;\n    _.backslash = _p;\n    var kp = 13;\n    _.cr = kp;\n    var Tp = 12;\n    _.feed = Tp;\n    var Ap = 10;\n    _.newline = Ap;\n    var Op = 9;\n    _.tab = Op;\n    var Pp = Ls;\n    _.str = Pp;\n    var Bp = -1;\n    _.comment = Bp;\n    var Ip = -2;\n    _.word = Ip;\n    var Rp = -3;\n    _.combinator = Rp;\n});\nvar Ws = T((lr)=>{\n    \"use strict\";\n    lr.__esModule = true;\n    lr.default = zp;\n    lr.FIELDS = void 0;\n    var E = Lp(Ni()), Ft, V;\n    function Ns() {\n        if (typeof WeakMap != \"function\") return null;\n        var e = /* @__PURE__ */ new WeakMap();\n        return Ns = function() {\n            return e;\n        }, e;\n    }\n    function Lp(e) {\n        if (e && e.__esModule) return e;\n        if (e === null || typeof e != \"object\" && typeof e != \"function\") return {\n            default: e\n        };\n        var t = Ns();\n        if (t && t.has(e)) return t.get(e);\n        var n = {}, r = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for(var i in e)if (Object.prototype.hasOwnProperty.call(e, i)) {\n            var o = r ? Object.getOwnPropertyDescriptor(e, i) : null;\n            o && (o.get || o.set) ? Object.defineProperty(n, i, o) : n[i] = e[i];\n        }\n        return n.default = e, t && t.set(e, n), n;\n    }\n    var Mp = (Ft = {}, Ft[E.tab] = true, Ft[E.newline] = true, Ft[E.cr] = true, Ft[E.feed] = true, Ft), Np = (V = {}, V[E.space] = true, V[E.tab] = true, V[E.newline] = true, V[E.cr] = true, V[E.feed] = true, V[E.ampersand] = true, V[E.asterisk] = true, V[E.bang] = true, V[E.comma] = true, V[E.colon] = true, V[E.semicolon] = true, V[E.openParenthesis] = true, V[E.closeParenthesis] = true, V[E.openSquare] = true, V[E.closeSquare] = true, V[E.singleQuote] = true, V[E.doubleQuote] = true, V[E.plus] = true, V[E.pipe] = true, V[E.tilde] = true, V[E.greaterThan] = true, V[E.equals] = true, V[E.dollar] = true, V[E.caret] = true, V[E.slash] = true, V), Wi = {}, Ms = \"0123456789abcdefABCDEF\";\n    for(an = 0; an < Ms.length; an++)Wi[Ms.charCodeAt(an)] = true;\n    var an;\n    function Wp(e, t) {\n        var n = t, r;\n        do {\n            if (r = e.charCodeAt(n), Np[r]) return n - 1;\n            r === E.backslash ? n = $p(e, n) + 1 : n++;\n        }while (n < e.length);\n        return n - 1;\n    }\n    function $p(e, t) {\n        var n = t, r = e.charCodeAt(n + 1);\n        if (!Mp[r]) if (Wi[r]) {\n            var i = 0;\n            do n++, i++, r = e.charCodeAt(n + 1);\n            while (Wi[r] && i < 6);\n            i < 6 && r === E.space && n++;\n        } else n++;\n        return n;\n    }\n    var qp = {\n        TYPE: 0,\n        START_LINE: 1,\n        START_COL: 2,\n        END_LINE: 3,\n        END_COL: 4,\n        START_POS: 5,\n        END_POS: 6\n    };\n    lr.FIELDS = qp;\n    function zp(e) {\n        var t = [], n = e.css.valueOf(), r = n, i = r.length, o = -1, u = 1, s = 0, a = 0, l, f, c, d, h, p, m, v, D, b, y, F, x;\n        function k(B, I) {\n            if (e.safe) n += I, D = n.length - 1;\n            else throw e.error(\"Unclosed \" + B, u, s - o, s);\n        }\n        for(; s < i;){\n            switch(l = n.charCodeAt(s), l === E.newline && (o = s, u += 1), l){\n                case E.space:\n                case E.tab:\n                case E.newline:\n                case E.cr:\n                case E.feed:\n                    D = s;\n                    do D += 1, l = n.charCodeAt(D), l === E.newline && (o = D, u += 1);\n                    while (l === E.space || l === E.newline || l === E.tab || l === E.cr || l === E.feed);\n                    x = E.space, d = u, c = D - o - 1, a = D;\n                    break;\n                case E.plus:\n                case E.greaterThan:\n                case E.tilde:\n                case E.pipe:\n                    D = s;\n                    do D += 1, l = n.charCodeAt(D);\n                    while (l === E.plus || l === E.greaterThan || l === E.tilde || l === E.pipe);\n                    x = E.combinator, d = u, c = s - o, a = D;\n                    break;\n                case E.asterisk:\n                case E.ampersand:\n                case E.bang:\n                case E.comma:\n                case E.equals:\n                case E.dollar:\n                case E.caret:\n                case E.openSquare:\n                case E.closeSquare:\n                case E.colon:\n                case E.semicolon:\n                case E.openParenthesis:\n                case E.closeParenthesis:\n                    D = s, x = l, d = u, c = s - o, a = D + 1;\n                    break;\n                case E.singleQuote:\n                case E.doubleQuote:\n                    F = l === E.singleQuote ? \"'\" : '\"', D = s;\n                    do for(h = false, D = n.indexOf(F, D + 1), D === -1 && k(\"quote\", F), p = D; n.charCodeAt(p - 1) === E.backslash;)p -= 1, h = !h;\n                    while (h);\n                    x = E.str, d = u, c = s - o, a = D + 1;\n                    break;\n                default:\n                    l === E.slash && n.charCodeAt(s + 1) === E.asterisk ? (D = n.indexOf(\"*/\", s + 2) + 1, D === 0 && k(\"comment\", \"*/\"), f = n.slice(s, D + 1), v = f.split(`\n`), m = v.length - 1, m > 0 ? (b = u + m, y = D - v[m].length) : (b = u, y = o), x = E.comment, u = b, d = b, c = D - y) : l === E.slash ? (D = s, x = l, d = u, c = s - o, a = D + 1) : (D = Wp(n, s), x = E.word, d = u, c = D - o), a = D + 1;\n                    break;\n            }\n            t.push([\n                x,\n                u,\n                s - o,\n                d,\n                c,\n                s,\n                a\n            ]), y && (o = y, y = null), s = a;\n        }\n        return t;\n    }\n});\nvar Vs = T((fr, Hs)=>{\n    \"use strict\";\n    fr.__esModule = true;\n    fr.default = void 0;\n    var Up = Se(li()), $i = Se(ci()), Gp = Se(hi()), $s = Se(Di()), jp = Se(bi()), Hp = Se(xi()), qi = Se(wi()), Vp = Se(Si()), qs = ln(Oi()), Yp = Se(Bi()), zi = Se(Ri()), Xp = Se(Mi()), Qp = Se(Rs()), w = ln(Ws()), C = ln(Ni()), Kp = ln(pe()), re = jt(), st, Ui;\n    function js() {\n        if (typeof WeakMap != \"function\") return null;\n        var e = /* @__PURE__ */ new WeakMap();\n        return js = function() {\n            return e;\n        }, e;\n    }\n    function ln(e) {\n        if (e && e.__esModule) return e;\n        if (e === null || typeof e != \"object\" && typeof e != \"function\") return {\n            default: e\n        };\n        var t = js();\n        if (t && t.has(e)) return t.get(e);\n        var n = {}, r = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for(var i in e)if (Object.prototype.hasOwnProperty.call(e, i)) {\n            var o = r ? Object.getOwnPropertyDescriptor(e, i) : null;\n            o && (o.get || o.set) ? Object.defineProperty(n, i, o) : n[i] = e[i];\n        }\n        return n.default = e, t && t.set(e, n), n;\n    }\n    function Se(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function zs(e, t) {\n        for(var n = 0; n < t.length; n++){\n            var r = t[n];\n            r.enumerable = r.enumerable || false, r.configurable = true, \"value\" in r && (r.writable = true), Object.defineProperty(e, r.key, r);\n        }\n    }\n    function Jp(e, t, n) {\n        return t && zs(e.prototype, t), n && zs(e, n), e;\n    }\n    var Hi = (st = {}, st[C.space] = true, st[C.cr] = true, st[C.feed] = true, st[C.newline] = true, st[C.tab] = true, st), Zp = Object.assign({}, Hi, (Ui = {}, Ui[C.comment] = true, Ui));\n    function Us(e) {\n        return {\n            line: e[w.FIELDS.START_LINE],\n            column: e[w.FIELDS.START_COL]\n        };\n    }\n    function Gs(e) {\n        return {\n            line: e[w.FIELDS.END_LINE],\n            column: e[w.FIELDS.END_COL]\n        };\n    }\n    function at(e, t, n, r) {\n        return {\n            start: {\n                line: e,\n                column: t\n            },\n            end: {\n                line: n,\n                column: r\n            }\n        };\n    }\n    function wt(e) {\n        return at(e[w.FIELDS.START_LINE], e[w.FIELDS.START_COL], e[w.FIELDS.END_LINE], e[w.FIELDS.END_COL]);\n    }\n    function Gi(e, t) {\n        if (e) return at(e[w.FIELDS.START_LINE], e[w.FIELDS.START_COL], t[w.FIELDS.END_LINE], t[w.FIELDS.END_COL]);\n    }\n    function Et(e, t) {\n        var n = e[t];\n        if (typeof n == \"string\") return n.indexOf(\"\\\\\") !== -1 && ((0, re.ensureObject)(e, \"raws\"), e[t] = (0, re.unesc)(n), e.raws[t] === void 0 && (e.raws[t] = n)), e;\n    }\n    function ji(e, t) {\n        for(var n = -1, r = []; (n = e.indexOf(t, n + 1)) !== -1;)r.push(n);\n        return r;\n    }\n    function e0() {\n        var e = Array.prototype.concat.apply([], arguments);\n        return e.filter(function(t, n) {\n            return n === e.indexOf(t);\n        });\n    }\n    var t0 = function() {\n        function e(n, r) {\n            r === void 0 && (r = {}), this.rule = n, this.options = Object.assign({\n                lossy: false,\n                safe: false\n            }, r), this.position = 0, this.css = typeof this.rule == \"string\" ? this.rule : this.rule.selector, this.tokens = (0, w.default)({\n                css: this.css,\n                error: this._errorGenerator(),\n                safe: this.options.safe\n            });\n            var i = Gi(this.tokens[0], this.tokens[this.tokens.length - 1]);\n            this.root = new Up.default({\n                source: i\n            }), this.root.errorGenerator = this._errorGenerator();\n            var o = new $i.default({\n                source: {\n                    start: {\n                        line: 1,\n                        column: 1\n                    }\n                }\n            });\n            this.root.append(o), this.current = o, this.loop();\n        }\n        var t = e.prototype;\n        return t._errorGenerator = function() {\n            var r = this;\n            return function(i, o) {\n                return typeof r.rule == \"string\" ? new Error(i) : r.rule.error(i, o);\n            };\n        }, t.attribute = function() {\n            var r = [], i = this.currToken;\n            for(this.position++; this.position < this.tokens.length && this.currToken[w.FIELDS.TYPE] !== C.closeSquare;)r.push(this.currToken), this.position++;\n            if (this.currToken[w.FIELDS.TYPE] !== C.closeSquare) return this.expected(\"closing square bracket\", this.currToken[w.FIELDS.START_POS]);\n            var o = r.length, u = {\n                source: at(i[1], i[2], this.currToken[3], this.currToken[4]),\n                sourceIndex: i[w.FIELDS.START_POS]\n            };\n            if (o === 1 && !~[\n                C.word\n            ].indexOf(r[0][w.FIELDS.TYPE])) return this.expected(\"attribute\", r[0][w.FIELDS.START_POS]);\n            for(var s = 0, a = \"\", l = \"\", f = null, c = false; s < o;){\n                var d = r[s], h = this.content(d), p = r[s + 1];\n                switch(d[w.FIELDS.TYPE]){\n                    case C.space:\n                        if (c = true, this.options.lossy) break;\n                        if (f) {\n                            (0, re.ensureObject)(u, \"spaces\", f);\n                            var m = u.spaces[f].after || \"\";\n                            u.spaces[f].after = m + h;\n                            var v = (0, re.getProp)(u, \"raws\", \"spaces\", f, \"after\") || null;\n                            v && (u.raws.spaces[f].after = v + h);\n                        } else a = a + h, l = l + h;\n                        break;\n                    case C.asterisk:\n                        if (p[w.FIELDS.TYPE] === C.equals) u.operator = h, f = \"operator\";\n                        else if ((!u.namespace || f === \"namespace\" && !c) && p) {\n                            a && ((0, re.ensureObject)(u, \"spaces\", \"attribute\"), u.spaces.attribute.before = a, a = \"\"), l && ((0, re.ensureObject)(u, \"raws\", \"spaces\", \"attribute\"), u.raws.spaces.attribute.before = a, l = \"\"), u.namespace = (u.namespace || \"\") + h;\n                            var D = (0, re.getProp)(u, \"raws\", \"namespace\") || null;\n                            D && (u.raws.namespace += h), f = \"namespace\";\n                        }\n                        c = false;\n                        break;\n                    case C.dollar:\n                        if (f === \"value\") {\n                            var b = (0, re.getProp)(u, \"raws\", \"value\");\n                            u.value += \"$\", b && (u.raws.value = b + \"$\");\n                            break;\n                        }\n                    case C.caret:\n                        p[w.FIELDS.TYPE] === C.equals && (u.operator = h, f = \"operator\"), c = false;\n                        break;\n                    case C.combinator:\n                        if (h === \"~\" && p[w.FIELDS.TYPE] === C.equals && (u.operator = h, f = \"operator\"), h !== \"|\") {\n                            c = false;\n                            break;\n                        }\n                        p[w.FIELDS.TYPE] === C.equals ? (u.operator = h, f = \"operator\") : !u.namespace && !u.attribute && (u.namespace = true), c = false;\n                        break;\n                    case C.word:\n                        if (p && this.content(p) === \"|\" && r[s + 2] && r[s + 2][w.FIELDS.TYPE] !== C.equals && !u.operator && !u.namespace) u.namespace = h, f = \"namespace\";\n                        else if (!u.attribute || f === \"attribute\" && !c) {\n                            a && ((0, re.ensureObject)(u, \"spaces\", \"attribute\"), u.spaces.attribute.before = a, a = \"\"), l && ((0, re.ensureObject)(u, \"raws\", \"spaces\", \"attribute\"), u.raws.spaces.attribute.before = l, l = \"\"), u.attribute = (u.attribute || \"\") + h;\n                            var y = (0, re.getProp)(u, \"raws\", \"attribute\") || null;\n                            y && (u.raws.attribute += h), f = \"attribute\";\n                        } else if (!u.value && u.value !== \"\" || f === \"value\" && !c) {\n                            var F = (0, re.unesc)(h), x = (0, re.getProp)(u, \"raws\", \"value\") || \"\", k = u.value || \"\";\n                            u.value = k + F, u.quoteMark = null, (F !== h || x) && ((0, re.ensureObject)(u, \"raws\"), u.raws.value = (x || k) + h), f = \"value\";\n                        } else {\n                            var B = h === \"i\" || h === \"I\";\n                            (u.value || u.value === \"\") && (u.quoteMark || c) ? (u.insensitive = B, (!B || h === \"I\") && ((0, re.ensureObject)(u, \"raws\"), u.raws.insensitiveFlag = h), f = \"insensitive\", a && ((0, re.ensureObject)(u, \"spaces\", \"insensitive\"), u.spaces.insensitive.before = a, a = \"\"), l && ((0, re.ensureObject)(u, \"raws\", \"spaces\", \"insensitive\"), u.raws.spaces.insensitive.before = l, l = \"\")) : (u.value || u.value === \"\") && (f = \"value\", u.value += h, u.raws.value && (u.raws.value += h));\n                        }\n                        c = false;\n                        break;\n                    case C.str:\n                        if (!u.attribute || !u.operator) return this.error(\"Expected an attribute followed by an operator preceding the string.\", {\n                            index: d[w.FIELDS.START_POS]\n                        });\n                        var I = (0, qs.unescapeValue)(h), G = I.unescaped, ue = I.quoteMark;\n                        u.value = G, u.quoteMark = ue, f = \"value\", (0, re.ensureObject)(u, \"raws\"), u.raws.value = h, c = false;\n                        break;\n                    case C.equals:\n                        if (!u.attribute) return this.expected(\"attribute\", d[w.FIELDS.START_POS], h);\n                        if (u.value) return this.error('Unexpected \"=\" found; an operator was already defined.', {\n                            index: d[w.FIELDS.START_POS]\n                        });\n                        u.operator = u.operator ? u.operator + h : h, f = \"operator\", c = false;\n                        break;\n                    case C.comment:\n                        if (f) if (c || p && p[w.FIELDS.TYPE] === C.space || f === \"insensitive\") {\n                            var ae = (0, re.getProp)(u, \"spaces\", f, \"after\") || \"\", ie = (0, re.getProp)(u, \"raws\", \"spaces\", f, \"after\") || ae;\n                            (0, re.ensureObject)(u, \"raws\", \"spaces\", f), u.raws.spaces[f].after = ie + h;\n                        } else {\n                            var N = u[f] || \"\", R = (0, re.getProp)(u, \"raws\", f) || N;\n                            (0, re.ensureObject)(u, \"raws\"), u.raws[f] = R + h;\n                        }\n                        else l = l + h;\n                        break;\n                    default:\n                        return this.error('Unexpected \"' + h + '\" found.', {\n                            index: d[w.FIELDS.START_POS]\n                        });\n                }\n                s++;\n            }\n            Et(u, \"attribute\"), Et(u, \"namespace\"), this.newNode(new qs.default(u)), this.position++;\n        }, t.parseWhitespaceEquivalentTokens = function(r) {\n            r < 0 && (r = this.tokens.length);\n            var i = this.position, o = [], u = \"\", s = void 0;\n            do if (Hi[this.currToken[w.FIELDS.TYPE]]) this.options.lossy || (u += this.content());\n            else if (this.currToken[w.FIELDS.TYPE] === C.comment) {\n                var a = {};\n                u && (a.before = u, u = \"\"), s = new $s.default({\n                    value: this.content(),\n                    source: wt(this.currToken),\n                    sourceIndex: this.currToken[w.FIELDS.START_POS],\n                    spaces: a\n                }), o.push(s);\n            }\n            while (++this.position < r);\n            if (u) {\n                if (s) s.spaces.after = u;\n                else if (!this.options.lossy) {\n                    var l = this.tokens[i], f = this.tokens[this.position - 1];\n                    o.push(new qi.default({\n                        value: \"\",\n                        source: at(l[w.FIELDS.START_LINE], l[w.FIELDS.START_COL], f[w.FIELDS.END_LINE], f[w.FIELDS.END_COL]),\n                        sourceIndex: l[w.FIELDS.START_POS],\n                        spaces: {\n                            before: u,\n                            after: \"\"\n                        }\n                    }));\n                }\n            }\n            return o;\n        }, t.convertWhitespaceNodesToSpace = function(r, i) {\n            var o = this;\n            i === void 0 && (i = false);\n            var u = \"\", s = \"\";\n            r.forEach(function(l) {\n                var f = o.lossySpace(l.spaces.before, i), c = o.lossySpace(l.rawSpaceBefore, i);\n                u += f + o.lossySpace(l.spaces.after, i && f.length === 0), s += f + l.value + o.lossySpace(l.rawSpaceAfter, i && c.length === 0);\n            }), s === u && (s = void 0);\n            var a = {\n                space: u,\n                rawSpace: s\n            };\n            return a;\n        }, t.isNamedCombinator = function(r) {\n            return r === void 0 && (r = this.position), this.tokens[r + 0] && this.tokens[r + 0][w.FIELDS.TYPE] === C.slash && this.tokens[r + 1] && this.tokens[r + 1][w.FIELDS.TYPE] === C.word && this.tokens[r + 2] && this.tokens[r + 2][w.FIELDS.TYPE] === C.slash;\n        }, t.namedCombinator = function() {\n            if (this.isNamedCombinator()) {\n                var r = this.content(this.tokens[this.position + 1]), i = (0, re.unesc)(r).toLowerCase(), o = {};\n                i !== r && (o.value = \"/\" + r + \"/\");\n                var u = new zi.default({\n                    value: \"/\" + i + \"/\",\n                    source: at(this.currToken[w.FIELDS.START_LINE], this.currToken[w.FIELDS.START_COL], this.tokens[this.position + 2][w.FIELDS.END_LINE], this.tokens[this.position + 2][w.FIELDS.END_COL]),\n                    sourceIndex: this.currToken[w.FIELDS.START_POS],\n                    raws: o\n                });\n                return this.position = this.position + 3, u;\n            } else this.unexpected();\n        }, t.combinator = function() {\n            var r = this;\n            if (this.content() === \"|\") return this.namespace();\n            var i = this.locateNextMeaningfulToken(this.position);\n            if (i < 0 || this.tokens[i][w.FIELDS.TYPE] === C.comma) {\n                var o = this.parseWhitespaceEquivalentTokens(i);\n                if (o.length > 0) {\n                    var u = this.current.last;\n                    if (u) {\n                        var s = this.convertWhitespaceNodesToSpace(o), a = s.space, l = s.rawSpace;\n                        l !== void 0 && (u.rawSpaceAfter += l), u.spaces.after += a;\n                    } else o.forEach(function(x) {\n                        return r.newNode(x);\n                    });\n                }\n                return;\n            }\n            var f = this.currToken, c = void 0;\n            i > this.position && (c = this.parseWhitespaceEquivalentTokens(i));\n            var d;\n            if (this.isNamedCombinator() ? d = this.namedCombinator() : this.currToken[w.FIELDS.TYPE] === C.combinator ? (d = new zi.default({\n                value: this.content(),\n                source: wt(this.currToken),\n                sourceIndex: this.currToken[w.FIELDS.START_POS]\n            }), this.position++) : Hi[this.currToken[w.FIELDS.TYPE]] || c || this.unexpected(), d) {\n                if (c) {\n                    var h = this.convertWhitespaceNodesToSpace(c), p = h.space, m = h.rawSpace;\n                    d.spaces.before = p, d.rawSpaceBefore = m;\n                }\n            } else {\n                var v = this.convertWhitespaceNodesToSpace(c, true), D = v.space, b = v.rawSpace;\n                b || (b = D);\n                var y = {}, F = {\n                    spaces: {}\n                };\n                D.endsWith(\" \") && b.endsWith(\" \") ? (y.before = D.slice(0, D.length - 1), F.spaces.before = b.slice(0, b.length - 1)) : D.startsWith(\" \") && b.startsWith(\" \") ? (y.after = D.slice(1), F.spaces.after = b.slice(1)) : F.value = b, d = new zi.default({\n                    value: \" \",\n                    source: Gi(f, this.tokens[this.position - 1]),\n                    sourceIndex: f[w.FIELDS.START_POS],\n                    spaces: y,\n                    raws: F\n                });\n            }\n            return this.currToken && this.currToken[w.FIELDS.TYPE] === C.space && (d.spaces.after = this.optionalSpace(this.content()), this.position++), this.newNode(d);\n        }, t.comma = function() {\n            if (this.position === this.tokens.length - 1) {\n                this.root.trailingComma = true, this.position++;\n                return;\n            }\n            this.current._inferEndPosition();\n            var r = new $i.default({\n                source: {\n                    start: Us(this.tokens[this.position + 1])\n                }\n            });\n            this.current.parent.append(r), this.current = r, this.position++;\n        }, t.comment = function() {\n            var r = this.currToken;\n            this.newNode(new $s.default({\n                value: this.content(),\n                source: wt(r),\n                sourceIndex: r[w.FIELDS.START_POS]\n            })), this.position++;\n        }, t.error = function(r, i) {\n            throw this.root.error(r, i);\n        }, t.missingBackslash = function() {\n            return this.error(\"Expected a backslash preceding the semicolon.\", {\n                index: this.currToken[w.FIELDS.START_POS]\n            });\n        }, t.missingParenthesis = function() {\n            return this.expected(\"opening parenthesis\", this.currToken[w.FIELDS.START_POS]);\n        }, t.missingSquareBracket = function() {\n            return this.expected(\"opening square bracket\", this.currToken[w.FIELDS.START_POS]);\n        }, t.unexpected = function() {\n            return this.error(\"Unexpected '\" + this.content() + \"'. Escaping special characters with \\\\ may help.\", this.currToken[w.FIELDS.START_POS]);\n        }, t.namespace = function() {\n            var r = this.prevToken && this.content(this.prevToken) || true;\n            if (this.nextToken[w.FIELDS.TYPE] === C.word) return this.position++, this.word(r);\n            if (this.nextToken[w.FIELDS.TYPE] === C.asterisk) return this.position++, this.universal(r);\n        }, t.nesting = function() {\n            if (this.nextToken) {\n                var r = this.content(this.nextToken);\n                if (r === \"|\") {\n                    this.position++;\n                    return;\n                }\n            }\n            var i = this.currToken;\n            this.newNode(new Xp.default({\n                value: this.content(),\n                source: wt(i),\n                sourceIndex: i[w.FIELDS.START_POS]\n            })), this.position++;\n        }, t.parentheses = function() {\n            var r = this.current.last, i = 1;\n            if (this.position++, r && r.type === Kp.PSEUDO) {\n                var o = new $i.default({\n                    source: {\n                        start: Us(this.tokens[this.position - 1])\n                    }\n                }), u = this.current;\n                for(r.append(o), this.current = o; this.position < this.tokens.length && i;)this.currToken[w.FIELDS.TYPE] === C.openParenthesis && i++, this.currToken[w.FIELDS.TYPE] === C.closeParenthesis && i--, i ? this.parse() : (this.current.source.end = Gs(this.currToken), this.current.parent.source.end = Gs(this.currToken), this.position++);\n                this.current = u;\n            } else {\n                for(var s = this.currToken, a = \"(\", l; this.position < this.tokens.length && i;)this.currToken[w.FIELDS.TYPE] === C.openParenthesis && i++, this.currToken[w.FIELDS.TYPE] === C.closeParenthesis && i--, l = this.currToken, a += this.parseParenthesisToken(this.currToken), this.position++;\n                r ? r.appendToPropertyAndEscape(\"value\", a, a) : this.newNode(new qi.default({\n                    value: a,\n                    source: at(s[w.FIELDS.START_LINE], s[w.FIELDS.START_COL], l[w.FIELDS.END_LINE], l[w.FIELDS.END_COL]),\n                    sourceIndex: s[w.FIELDS.START_POS]\n                }));\n            }\n            if (i) return this.expected(\"closing parenthesis\", this.currToken[w.FIELDS.START_POS]);\n        }, t.pseudo = function() {\n            for(var r = this, i = \"\", o = this.currToken; this.currToken && this.currToken[w.FIELDS.TYPE] === C.colon;)i += this.content(), this.position++;\n            if (!this.currToken) return this.expected([\n                \"pseudo-class\",\n                \"pseudo-element\"\n            ], this.position - 1);\n            if (this.currToken[w.FIELDS.TYPE] === C.word) this.splitWord(false, function(u, s) {\n                i += u, r.newNode(new Vp.default({\n                    value: i,\n                    source: Gi(o, r.currToken),\n                    sourceIndex: o[w.FIELDS.START_POS]\n                })), s > 1 && r.nextToken && r.nextToken[w.FIELDS.TYPE] === C.openParenthesis && r.error(\"Misplaced parenthesis.\", {\n                    index: r.nextToken[w.FIELDS.START_POS]\n                });\n            });\n            else return this.expected([\n                \"pseudo-class\",\n                \"pseudo-element\"\n            ], this.currToken[w.FIELDS.START_POS]);\n        }, t.space = function() {\n            var r = this.content();\n            this.position === 0 || this.prevToken[w.FIELDS.TYPE] === C.comma || this.prevToken[w.FIELDS.TYPE] === C.openParenthesis || this.current.nodes.every(function(i) {\n                return i.type === \"comment\";\n            }) ? (this.spaces = this.optionalSpace(r), this.position++) : this.position === this.tokens.length - 1 || this.nextToken[w.FIELDS.TYPE] === C.comma || this.nextToken[w.FIELDS.TYPE] === C.closeParenthesis ? (this.current.last.spaces.after = this.optionalSpace(r), this.position++) : this.combinator();\n        }, t.string = function() {\n            var r = this.currToken;\n            this.newNode(new qi.default({\n                value: this.content(),\n                source: wt(r),\n                sourceIndex: r[w.FIELDS.START_POS]\n            })), this.position++;\n        }, t.universal = function(r) {\n            var i = this.nextToken;\n            if (i && this.content(i) === \"|\") return this.position++, this.namespace();\n            var o = this.currToken;\n            this.newNode(new Yp.default({\n                value: this.content(),\n                source: wt(o),\n                sourceIndex: o[w.FIELDS.START_POS]\n            }), r), this.position++;\n        }, t.splitWord = function(r, i) {\n            for(var o = this, u = this.nextToken, s = this.content(); u && ~[\n                C.dollar,\n                C.caret,\n                C.equals,\n                C.word\n            ].indexOf(u[w.FIELDS.TYPE]);){\n                this.position++;\n                var a = this.content();\n                if (s += a, a.lastIndexOf(\"\\\\\") === a.length - 1) {\n                    var l = this.nextToken;\n                    l && l[w.FIELDS.TYPE] === C.space && (s += this.requiredSpace(this.content(l)), this.position++);\n                }\n                u = this.nextToken;\n            }\n            var f = ji(s, \".\").filter(function(p) {\n                var m = s[p - 1] === \"\\\\\", v = /^\\d+\\.\\d+%$/.test(s);\n                return !m && !v;\n            }), c = ji(s, \"#\").filter(function(p) {\n                return s[p - 1] !== \"\\\\\";\n            }), d = ji(s, \"#{\");\n            d.length && (c = c.filter(function(p) {\n                return !~d.indexOf(p);\n            }));\n            var h = (0, Qp.default)(e0([\n                0\n            ].concat(f, c)));\n            h.forEach(function(p, m) {\n                var v = h[m + 1] || s.length, D = s.slice(p, v);\n                if (m === 0 && i) return i.call(o, D, h.length);\n                var b, y = o.currToken, F = y[w.FIELDS.START_POS] + h[m], x = at(y[1], y[2] + p, y[3], y[2] + (v - 1));\n                if (~f.indexOf(p)) {\n                    var k = {\n                        value: D.slice(1),\n                        source: x,\n                        sourceIndex: F\n                    };\n                    b = new Gp.default(Et(k, \"value\"));\n                } else if (~c.indexOf(p)) {\n                    var B = {\n                        value: D.slice(1),\n                        source: x,\n                        sourceIndex: F\n                    };\n                    b = new jp.default(Et(B, \"value\"));\n                } else {\n                    var I = {\n                        value: D,\n                        source: x,\n                        sourceIndex: F\n                    };\n                    Et(I, \"value\"), b = new Hp.default(I);\n                }\n                o.newNode(b, r), r = null;\n            }), this.position++;\n        }, t.word = function(r) {\n            var i = this.nextToken;\n            return i && this.content(i) === \"|\" ? (this.position++, this.namespace()) : this.splitWord(r);\n        }, t.loop = function() {\n            for(; this.position < this.tokens.length;)this.parse(true);\n            return this.current._inferEndPosition(), this.root;\n        }, t.parse = function(r) {\n            switch(this.currToken[w.FIELDS.TYPE]){\n                case C.space:\n                    this.space();\n                    break;\n                case C.comment:\n                    this.comment();\n                    break;\n                case C.openParenthesis:\n                    this.parentheses();\n                    break;\n                case C.closeParenthesis:\n                    r && this.missingParenthesis();\n                    break;\n                case C.openSquare:\n                    this.attribute();\n                    break;\n                case C.dollar:\n                case C.caret:\n                case C.equals:\n                case C.word:\n                    this.word();\n                    break;\n                case C.colon:\n                    this.pseudo();\n                    break;\n                case C.comma:\n                    this.comma();\n                    break;\n                case C.asterisk:\n                    this.universal();\n                    break;\n                case C.ampersand:\n                    this.nesting();\n                    break;\n                case C.slash:\n                case C.combinator:\n                    this.combinator();\n                    break;\n                case C.str:\n                    this.string();\n                    break;\n                case C.closeSquare:\n                    this.missingSquareBracket();\n                case C.semicolon:\n                    this.missingBackslash();\n                default:\n                    this.unexpected();\n            }\n        }, t.expected = function(r, i, o) {\n            if (Array.isArray(r)) {\n                var u = r.pop();\n                r = r.join(\", \") + \" or \" + u;\n            }\n            var s = /^[aeiou]/.test(r[0]) ? \"an\" : \"a\";\n            return o ? this.error(\"Expected \" + s + \" \" + r + ', found \"' + o + '\" instead.', {\n                index: i\n            }) : this.error(\"Expected \" + s + \" \" + r + \".\", {\n                index: i\n            });\n        }, t.requiredSpace = function(r) {\n            return this.options.lossy ? \" \" : r;\n        }, t.optionalSpace = function(r) {\n            return this.options.lossy ? \"\" : r;\n        }, t.lossySpace = function(r, i) {\n            return this.options.lossy ? i ? \" \" : \"\" : r;\n        }, t.parseParenthesisToken = function(r) {\n            var i = this.content(r);\n            return r[w.FIELDS.TYPE] === C.space ? this.requiredSpace(i) : i;\n        }, t.newNode = function(r, i) {\n            return i && (/^ +$/.test(i) && (this.options.lossy || (this.spaces = (this.spaces || \"\") + i), i = true), r.namespace = i, Et(r, \"namespace\")), this.spaces && (r.spaces.before = this.spaces, this.spaces = \"\"), this.current.append(r);\n        }, t.content = function(r) {\n            return r === void 0 && (r = this.currToken), this.css.slice(r[w.FIELDS.START_POS], r[w.FIELDS.END_POS]);\n        }, t.locateNextMeaningfulToken = function(r) {\n            r === void 0 && (r = this.position + 1);\n            for(var i = r; i < this.tokens.length;)if (Zp[this.tokens[i][w.FIELDS.TYPE]]) {\n                i++;\n                continue;\n            } else return i;\n            return -1;\n        }, Jp(e, [\n            {\n                key: \"currToken\",\n                get: function() {\n                    return this.tokens[this.position];\n                }\n            },\n            {\n                key: \"nextToken\",\n                get: function() {\n                    return this.tokens[this.position + 1];\n                }\n            },\n            {\n                key: \"prevToken\",\n                get: function() {\n                    return this.tokens[this.position - 1];\n                }\n            }\n        ]), e;\n    }();\n    fr.default = t0;\n    Hs.exports = fr.default;\n});\nvar Xs = T((cr, Ys)=>{\n    \"use strict\";\n    cr.__esModule = true;\n    cr.default = void 0;\n    var r0 = n0(Vs());\n    function n0(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    var i0 = function() {\n        function e(n, r) {\n            this.func = n || function() {}, this.funcRes = null, this.options = r;\n        }\n        var t = e.prototype;\n        return t._shouldUpdateSelector = function(r, i) {\n            i === void 0 && (i = {});\n            var o = Object.assign({}, this.options, i);\n            return o.updateSelector === false ? false : typeof r != \"string\";\n        }, t._isLossy = function(r) {\n            r === void 0 && (r = {});\n            var i = Object.assign({}, this.options, r);\n            return i.lossless === false;\n        }, t._root = function(r, i) {\n            i === void 0 && (i = {});\n            var o = new r0.default(r, this._parseOptions(i));\n            return o.root;\n        }, t._parseOptions = function(r) {\n            return {\n                lossy: this._isLossy(r)\n            };\n        }, t._run = function(r, i) {\n            var o = this;\n            return i === void 0 && (i = {}), new Promise(function(u, s) {\n                try {\n                    var a = o._root(r, i);\n                    Promise.resolve(o.func(a)).then(function(l) {\n                        var f = void 0;\n                        return o._shouldUpdateSelector(r, i) && (f = a.toString(), r.selector = f), {\n                            transform: l,\n                            root: a,\n                            string: f\n                        };\n                    }).then(u, s);\n                } catch (l) {\n                    s(l);\n                    return;\n                }\n            });\n        }, t._runSync = function(r, i) {\n            i === void 0 && (i = {});\n            var o = this._root(r, i), u = this.func(o);\n            if (u && typeof u.then == \"function\") throw new Error(\"Selector processor returned a promise to a synchronous call.\");\n            var s = void 0;\n            return i.updateSelector && typeof r != \"string\" && (s = o.toString(), r.selector = s), {\n                transform: u,\n                root: o,\n                string: s\n            };\n        }, t.ast = function(r, i) {\n            return this._run(r, i).then(function(o) {\n                return o.root;\n            });\n        }, t.astSync = function(r, i) {\n            return this._runSync(r, i).root;\n        }, t.transform = function(r, i) {\n            return this._run(r, i).then(function(o) {\n                return o.transform;\n            });\n        }, t.transformSync = function(r, i) {\n            return this._runSync(r, i).transform;\n        }, t.process = function(r, i) {\n            return this._run(r, i).then(function(o) {\n                return o.string || o.root.toString();\n            });\n        }, t.processSync = function(r, i) {\n            var o = this._runSync(r, i);\n            return o.string || o.root.toString();\n        }, e;\n    }();\n    cr.default = i0;\n    Ys.exports = cr.default;\n});\nvar Qs = T((Q)=>{\n    \"use strict\";\n    Q.__esModule = true;\n    Q.universal = Q.tag = Q.string = Q.selector = Q.root = Q.pseudo = Q.nesting = Q.id = Q.comment = Q.combinator = Q.className = Q.attribute = void 0;\n    var o0 = Ce(Oi()), u0 = Ce(hi()), s0 = Ce(Ri()), a0 = Ce(Di()), l0 = Ce(bi()), f0 = Ce(Mi()), c0 = Ce(Si()), d0 = Ce(li()), p0 = Ce(ci()), h0 = Ce(wi()), m0 = Ce(xi()), D0 = Ce(Bi());\n    function Ce(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    var g0 = function(t) {\n        return new o0.default(t);\n    };\n    Q.attribute = g0;\n    var b0 = function(t) {\n        return new u0.default(t);\n    };\n    Q.className = b0;\n    var v0 = function(t) {\n        return new s0.default(t);\n    };\n    Q.combinator = v0;\n    var y0 = function(t) {\n        return new a0.default(t);\n    };\n    Q.comment = y0;\n    var x0 = function(t) {\n        return new l0.default(t);\n    };\n    Q.id = x0;\n    var F0 = function(t) {\n        return new f0.default(t);\n    };\n    Q.nesting = F0;\n    var w0 = function(t) {\n        return new c0.default(t);\n    };\n    Q.pseudo = w0;\n    var E0 = function(t) {\n        return new d0.default(t);\n    };\n    Q.root = E0;\n    var S0 = function(t) {\n        return new p0.default(t);\n    };\n    Q.selector = S0;\n    var C0 = function(t) {\n        return new h0.default(t);\n    };\n    Q.string = C0;\n    var _0 = function(t) {\n        return new m0.default(t);\n    };\n    Q.tag = _0;\n    var k0 = function(t) {\n        return new D0.default(t);\n    };\n    Q.universal = k0;\n});\nvar ea = T((q)=>{\n    \"use strict\";\n    q.__esModule = true;\n    q.isNode = Vi;\n    q.isPseudoElement = Zs;\n    q.isPseudoClass = W0;\n    q.isContainer = $0;\n    q.isNamespace = q0;\n    q.isUniversal = q.isTag = q.isString = q.isSelector = q.isRoot = q.isPseudo = q.isNesting = q.isIdentifier = q.isComment = q.isCombinator = q.isClassName = q.isAttribute = void 0;\n    var ne = pe(), ye, T0 = (ye = {}, ye[ne.ATTRIBUTE] = true, ye[ne.CLASS] = true, ye[ne.COMBINATOR] = true, ye[ne.COMMENT] = true, ye[ne.ID] = true, ye[ne.NESTING] = true, ye[ne.PSEUDO] = true, ye[ne.ROOT] = true, ye[ne.SELECTOR] = true, ye[ne.STRING] = true, ye[ne.TAG] = true, ye[ne.UNIVERSAL] = true, ye);\n    function Vi(e) {\n        return typeof e == \"object\" && T0[e.type];\n    }\n    function _e(e, t) {\n        return Vi(t) && t.type === e;\n    }\n    var Ks = _e.bind(null, ne.ATTRIBUTE);\n    q.isAttribute = Ks;\n    var A0 = _e.bind(null, ne.CLASS);\n    q.isClassName = A0;\n    var O0 = _e.bind(null, ne.COMBINATOR);\n    q.isCombinator = O0;\n    var P0 = _e.bind(null, ne.COMMENT);\n    q.isComment = P0;\n    var B0 = _e.bind(null, ne.ID);\n    q.isIdentifier = B0;\n    var I0 = _e.bind(null, ne.NESTING);\n    q.isNesting = I0;\n    var Yi = _e.bind(null, ne.PSEUDO);\n    q.isPseudo = Yi;\n    var R0 = _e.bind(null, ne.ROOT);\n    q.isRoot = R0;\n    var L0 = _e.bind(null, ne.SELECTOR);\n    q.isSelector = L0;\n    var M0 = _e.bind(null, ne.STRING);\n    q.isString = M0;\n    var Js = _e.bind(null, ne.TAG);\n    q.isTag = Js;\n    var N0 = _e.bind(null, ne.UNIVERSAL);\n    q.isUniversal = N0;\n    function Zs(e) {\n        return Yi(e) && e.value && (e.value.startsWith(\"::\") || e.value.toLowerCase() === \":before\" || e.value.toLowerCase() === \":after\" || e.value.toLowerCase() === \":first-letter\" || e.value.toLowerCase() === \":first-line\");\n    }\n    function W0(e) {\n        return Yi(e) && !Zs(e);\n    }\n    function $0(e) {\n        return !!(Vi(e) && e.walk);\n    }\n    function q0(e) {\n        return Ks(e) || Js(e);\n    }\n});\nvar ta = T((Pe)=>{\n    \"use strict\";\n    Pe.__esModule = true;\n    var Xi = pe();\n    Object.keys(Xi).forEach(function(e) {\n        e === \"default\" || e === \"__esModule\" || e in Pe && Pe[e] === Xi[e] || (Pe[e] = Xi[e]);\n    });\n    var Qi = Qs();\n    Object.keys(Qi).forEach(function(e) {\n        e === \"default\" || e === \"__esModule\" || e in Pe && Pe[e] === Qi[e] || (Pe[e] = Qi[e]);\n    });\n    var Ki = ea();\n    Object.keys(Ki).forEach(function(e) {\n        e === \"default\" || e === \"__esModule\" || e in Pe && Pe[e] === Ki[e] || (Pe[e] = Ki[e]);\n    });\n});\nvar ia = T((dr, na)=>{\n    \"use strict\";\n    dr.__esModule = true;\n    dr.default = void 0;\n    var z0 = j0(Xs()), U0 = G0(ta());\n    function ra() {\n        if (typeof WeakMap != \"function\") return null;\n        var e = /* @__PURE__ */ new WeakMap();\n        return ra = function() {\n            return e;\n        }, e;\n    }\n    function G0(e) {\n        if (e && e.__esModule) return e;\n        if (e === null || typeof e != \"object\" && typeof e != \"function\") return {\n            default: e\n        };\n        var t = ra();\n        if (t && t.has(e)) return t.get(e);\n        var n = {}, r = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for(var i in e)if (Object.prototype.hasOwnProperty.call(e, i)) {\n            var o = r ? Object.getOwnPropertyDescriptor(e, i) : null;\n            o && (o.get || o.set) ? Object.defineProperty(n, i, o) : n[i] = e[i];\n        }\n        return n.default = e, t && t.set(e, n), n;\n    }\n    function j0(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    var Ji = function(t) {\n        return new z0.default(t);\n    };\n    Object.assign(Ji, U0);\n    delete Ji.__esModule;\n    var H0 = Ji;\n    dr.default = H0;\n    na.exports = dr.default;\n});\nvar oa = T((Zi)=>{\n    \"use strict\";\n    Object.defineProperty(Zi, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(Zi, \"default\", {\n        enumerable: true,\n        get: ()=>V0\n    });\n    function V0(e) {\n        return e.replace(/\\\\,/g, \"\\\\2c \");\n    }\n});\nvar sa = T((Sb, ua)=>{\n    \"use strict\";\n    ua.exports = {\n        aliceblue: [\n            240,\n            248,\n            255\n        ],\n        antiquewhite: [\n            250,\n            235,\n            215\n        ],\n        aqua: [\n            0,\n            255,\n            255\n        ],\n        aquamarine: [\n            127,\n            255,\n            212\n        ],\n        azure: [\n            240,\n            255,\n            255\n        ],\n        beige: [\n            245,\n            245,\n            220\n        ],\n        bisque: [\n            255,\n            228,\n            196\n        ],\n        black: [\n            0,\n            0,\n            0\n        ],\n        blanchedalmond: [\n            255,\n            235,\n            205\n        ],\n        blue: [\n            0,\n            0,\n            255\n        ],\n        blueviolet: [\n            138,\n            43,\n            226\n        ],\n        brown: [\n            165,\n            42,\n            42\n        ],\n        burlywood: [\n            222,\n            184,\n            135\n        ],\n        cadetblue: [\n            95,\n            158,\n            160\n        ],\n        chartreuse: [\n            127,\n            255,\n            0\n        ],\n        chocolate: [\n            210,\n            105,\n            30\n        ],\n        coral: [\n            255,\n            127,\n            80\n        ],\n        cornflowerblue: [\n            100,\n            149,\n            237\n        ],\n        cornsilk: [\n            255,\n            248,\n            220\n        ],\n        crimson: [\n            220,\n            20,\n            60\n        ],\n        cyan: [\n            0,\n            255,\n            255\n        ],\n        darkblue: [\n            0,\n            0,\n            139\n        ],\n        darkcyan: [\n            0,\n            139,\n            139\n        ],\n        darkgoldenrod: [\n            184,\n            134,\n            11\n        ],\n        darkgray: [\n            169,\n            169,\n            169\n        ],\n        darkgreen: [\n            0,\n            100,\n            0\n        ],\n        darkgrey: [\n            169,\n            169,\n            169\n        ],\n        darkkhaki: [\n            189,\n            183,\n            107\n        ],\n        darkmagenta: [\n            139,\n            0,\n            139\n        ],\n        darkolivegreen: [\n            85,\n            107,\n            47\n        ],\n        darkorange: [\n            255,\n            140,\n            0\n        ],\n        darkorchid: [\n            153,\n            50,\n            204\n        ],\n        darkred: [\n            139,\n            0,\n            0\n        ],\n        darksalmon: [\n            233,\n            150,\n            122\n        ],\n        darkseagreen: [\n            143,\n            188,\n            143\n        ],\n        darkslateblue: [\n            72,\n            61,\n            139\n        ],\n        darkslategray: [\n            47,\n            79,\n            79\n        ],\n        darkslategrey: [\n            47,\n            79,\n            79\n        ],\n        darkturquoise: [\n            0,\n            206,\n            209\n        ],\n        darkviolet: [\n            148,\n            0,\n            211\n        ],\n        deeppink: [\n            255,\n            20,\n            147\n        ],\n        deepskyblue: [\n            0,\n            191,\n            255\n        ],\n        dimgray: [\n            105,\n            105,\n            105\n        ],\n        dimgrey: [\n            105,\n            105,\n            105\n        ],\n        dodgerblue: [\n            30,\n            144,\n            255\n        ],\n        firebrick: [\n            178,\n            34,\n            34\n        ],\n        floralwhite: [\n            255,\n            250,\n            240\n        ],\n        forestgreen: [\n            34,\n            139,\n            34\n        ],\n        fuchsia: [\n            255,\n            0,\n            255\n        ],\n        gainsboro: [\n            220,\n            220,\n            220\n        ],\n        ghostwhite: [\n            248,\n            248,\n            255\n        ],\n        gold: [\n            255,\n            215,\n            0\n        ],\n        goldenrod: [\n            218,\n            165,\n            32\n        ],\n        gray: [\n            128,\n            128,\n            128\n        ],\n        green: [\n            0,\n            128,\n            0\n        ],\n        greenyellow: [\n            173,\n            255,\n            47\n        ],\n        grey: [\n            128,\n            128,\n            128\n        ],\n        honeydew: [\n            240,\n            255,\n            240\n        ],\n        hotpink: [\n            255,\n            105,\n            180\n        ],\n        indianred: [\n            205,\n            92,\n            92\n        ],\n        indigo: [\n            75,\n            0,\n            130\n        ],\n        ivory: [\n            255,\n            255,\n            240\n        ],\n        khaki: [\n            240,\n            230,\n            140\n        ],\n        lavender: [\n            230,\n            230,\n            250\n        ],\n        lavenderblush: [\n            255,\n            240,\n            245\n        ],\n        lawngreen: [\n            124,\n            252,\n            0\n        ],\n        lemonchiffon: [\n            255,\n            250,\n            205\n        ],\n        lightblue: [\n            173,\n            216,\n            230\n        ],\n        lightcoral: [\n            240,\n            128,\n            128\n        ],\n        lightcyan: [\n            224,\n            255,\n            255\n        ],\n        lightgoldenrodyellow: [\n            250,\n            250,\n            210\n        ],\n        lightgray: [\n            211,\n            211,\n            211\n        ],\n        lightgreen: [\n            144,\n            238,\n            144\n        ],\n        lightgrey: [\n            211,\n            211,\n            211\n        ],\n        lightpink: [\n            255,\n            182,\n            193\n        ],\n        lightsalmon: [\n            255,\n            160,\n            122\n        ],\n        lightseagreen: [\n            32,\n            178,\n            170\n        ],\n        lightskyblue: [\n            135,\n            206,\n            250\n        ],\n        lightslategray: [\n            119,\n            136,\n            153\n        ],\n        lightslategrey: [\n            119,\n            136,\n            153\n        ],\n        lightsteelblue: [\n            176,\n            196,\n            222\n        ],\n        lightyellow: [\n            255,\n            255,\n            224\n        ],\n        lime: [\n            0,\n            255,\n            0\n        ],\n        limegreen: [\n            50,\n            205,\n            50\n        ],\n        linen: [\n            250,\n            240,\n            230\n        ],\n        magenta: [\n            255,\n            0,\n            255\n        ],\n        maroon: [\n            128,\n            0,\n            0\n        ],\n        mediumaquamarine: [\n            102,\n            205,\n            170\n        ],\n        mediumblue: [\n            0,\n            0,\n            205\n        ],\n        mediumorchid: [\n            186,\n            85,\n            211\n        ],\n        mediumpurple: [\n            147,\n            112,\n            219\n        ],\n        mediumseagreen: [\n            60,\n            179,\n            113\n        ],\n        mediumslateblue: [\n            123,\n            104,\n            238\n        ],\n        mediumspringgreen: [\n            0,\n            250,\n            154\n        ],\n        mediumturquoise: [\n            72,\n            209,\n            204\n        ],\n        mediumvioletred: [\n            199,\n            21,\n            133\n        ],\n        midnightblue: [\n            25,\n            25,\n            112\n        ],\n        mintcream: [\n            245,\n            255,\n            250\n        ],\n        mistyrose: [\n            255,\n            228,\n            225\n        ],\n        moccasin: [\n            255,\n            228,\n            181\n        ],\n        navajowhite: [\n            255,\n            222,\n            173\n        ],\n        navy: [\n            0,\n            0,\n            128\n        ],\n        oldlace: [\n            253,\n            245,\n            230\n        ],\n        olive: [\n            128,\n            128,\n            0\n        ],\n        olivedrab: [\n            107,\n            142,\n            35\n        ],\n        orange: [\n            255,\n            165,\n            0\n        ],\n        orangered: [\n            255,\n            69,\n            0\n        ],\n        orchid: [\n            218,\n            112,\n            214\n        ],\n        palegoldenrod: [\n            238,\n            232,\n            170\n        ],\n        palegreen: [\n            152,\n            251,\n            152\n        ],\n        paleturquoise: [\n            175,\n            238,\n            238\n        ],\n        palevioletred: [\n            219,\n            112,\n            147\n        ],\n        papayawhip: [\n            255,\n            239,\n            213\n        ],\n        peachpuff: [\n            255,\n            218,\n            185\n        ],\n        peru: [\n            205,\n            133,\n            63\n        ],\n        pink: [\n            255,\n            192,\n            203\n        ],\n        plum: [\n            221,\n            160,\n            221\n        ],\n        powderblue: [\n            176,\n            224,\n            230\n        ],\n        purple: [\n            128,\n            0,\n            128\n        ],\n        rebeccapurple: [\n            102,\n            51,\n            153\n        ],\n        red: [\n            255,\n            0,\n            0\n        ],\n        rosybrown: [\n            188,\n            143,\n            143\n        ],\n        royalblue: [\n            65,\n            105,\n            225\n        ],\n        saddlebrown: [\n            139,\n            69,\n            19\n        ],\n        salmon: [\n            250,\n            128,\n            114\n        ],\n        sandybrown: [\n            244,\n            164,\n            96\n        ],\n        seagreen: [\n            46,\n            139,\n            87\n        ],\n        seashell: [\n            255,\n            245,\n            238\n        ],\n        sienna: [\n            160,\n            82,\n            45\n        ],\n        silver: [\n            192,\n            192,\n            192\n        ],\n        skyblue: [\n            135,\n            206,\n            235\n        ],\n        slateblue: [\n            106,\n            90,\n            205\n        ],\n        slategray: [\n            112,\n            128,\n            144\n        ],\n        slategrey: [\n            112,\n            128,\n            144\n        ],\n        snow: [\n            255,\n            250,\n            250\n        ],\n        springgreen: [\n            0,\n            255,\n            127\n        ],\n        steelblue: [\n            70,\n            130,\n            180\n        ],\n        tan: [\n            210,\n            180,\n            140\n        ],\n        teal: [\n            0,\n            128,\n            128\n        ],\n        thistle: [\n            216,\n            191,\n            216\n        ],\n        tomato: [\n            255,\n            99,\n            71\n        ],\n        turquoise: [\n            64,\n            224,\n            208\n        ],\n        violet: [\n            238,\n            130,\n            238\n        ],\n        wheat: [\n            245,\n            222,\n            179\n        ],\n        white: [\n            255,\n            255,\n            255\n        ],\n        whitesmoke: [\n            245,\n            245,\n            245\n        ],\n        yellow: [\n            255,\n            255,\n            0\n        ],\n        yellowgreen: [\n            154,\n            205,\n            50\n        ]\n    };\n});\nvar to = T((eo)=>{\n    \"use strict\";\n    Object.defineProperty(eo, \"__esModule\", {\n        value: true\n    });\n    function Y0(e, t) {\n        for(var n in t)Object.defineProperty(e, n, {\n            enumerable: true,\n            get: t[n]\n        });\n    }\n    Y0(eo, {\n        parseColor: ()=>eh,\n        formatColor: ()=>th\n    });\n    var aa = X0(sa());\n    function X0(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    var Q0 = /^#([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?$/i, K0 = /^#([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?$/i, Ze = /(?:\\d+|\\d*\\.\\d+)%?/, fn = /(?:\\s*,\\s*|\\s+)/, la = /\\s*[,/]\\s*/, et2 = /var\\(--(?:[^ )]*?)\\)/, J0 = new RegExp(`^(rgb)a?\\\\(\\\\s*(${Ze.source}|${et2.source})(?:${fn.source}(${Ze.source}|${et2.source}))?(?:${fn.source}(${Ze.source}|${et2.source}))?(?:${la.source}(${Ze.source}|${et2.source}))?\\\\s*\\\\)$`), Z0 = new RegExp(`^(hsl)a?\\\\(\\\\s*((?:${Ze.source})(?:deg|rad|grad|turn)?|${et2.source})(?:${fn.source}(${Ze.source}|${et2.source}))?(?:${fn.source}(${Ze.source}|${et2.source}))?(?:${la.source}(${Ze.source}|${et2.source}))?\\\\s*\\\\)$`);\n    function eh(e, { loose: t = false } = {}) {\n        var n, r;\n        if (typeof e != \"string\") return null;\n        if (e = e.trim(), e === \"transparent\") return {\n            mode: \"rgb\",\n            color: [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            alpha: \"0\"\n        };\n        if (e in aa.default) return {\n            mode: \"rgb\",\n            color: aa.default[e].map((a)=>a.toString())\n        };\n        let i = e.replace(K0, (a, l, f, c, d)=>[\n                \"#\",\n                l,\n                l,\n                f,\n                f,\n                c,\n                c,\n                d ? d + d : \"\"\n            ].join(\"\")).match(Q0);\n        if (i !== null) return {\n            mode: \"rgb\",\n            color: [\n                parseInt(i[1], 16),\n                parseInt(i[2], 16),\n                parseInt(i[3], 16)\n            ].map((a)=>a.toString()),\n            alpha: i[4] ? (parseInt(i[4], 16) / 255).toString() : void 0\n        };\n        var o;\n        let u = (o = e.match(J0)) !== null && o !== void 0 ? o : e.match(Z0);\n        if (u === null) return null;\n        let s = [\n            u[2],\n            u[3],\n            u[4]\n        ].filter(Boolean).map((a)=>a.toString());\n        return !t && s.length !== 3 || s.length < 3 && !s.some((a)=>/^var\\(.*?\\)$/.test(a)) ? null : {\n            mode: u[1],\n            color: s,\n            alpha: (n = u[5]) === null || n === void 0 || (r = n.toString) === null || r === void 0 ? void 0 : r.call(n)\n        };\n    }\n    function th({ mode: e, color: t, alpha: n }) {\n        let r = n !== void 0;\n        return `${e}(${t.join(\" \")}${r ? ` / ${n}` : \"\"})`;\n    }\n});\nvar no = T((ro)=>{\n    \"use strict\";\n    Object.defineProperty(ro, \"__esModule\", {\n        value: true\n    });\n    function rh(e, t) {\n        for(var n in t)Object.defineProperty(e, n, {\n            enumerable: true,\n            get: t[n]\n        });\n    }\n    rh(ro, {\n        withAlphaValue: ()=>nh,\n        default: ()=>ih\n    });\n    var cn = to();\n    function nh(e, t, n) {\n        if (typeof e == \"function\") return e({\n            opacityValue: t\n        });\n        let r = (0, cn.parseColor)(e, {\n            loose: true\n        });\n        return r === null ? n : (0, cn.formatColor)({\n            ...r,\n            alpha: t\n        });\n    }\n    function ih({ color: e, property: t, variable: n }) {\n        let r = [].concat(t);\n        if (typeof e == \"function\") return {\n            [n]: \"1\",\n            ...Object.fromEntries(r.map((o)=>[\n                    o,\n                    e({\n                        opacityVariable: n,\n                        opacityValue: `var(${n})`\n                    })\n                ]))\n        };\n        let i = (0, cn.parseColor)(e);\n        return i === null ? Object.fromEntries(r.map((o)=>[\n                o,\n                e\n            ])) : i.alpha !== void 0 ? Object.fromEntries(r.map((o)=>[\n                o,\n                e\n            ])) : {\n            [n]: \"1\",\n            ...Object.fromEntries(r.map((o)=>[\n                    o,\n                    (0, cn.formatColor)({\n                        ...i,\n                        alpha: `var(${n})`\n                    })\n                ]))\n        };\n    }\n});\nvar ha = T((io)=>{\n    \"use strict\";\n    Object.defineProperty(io, \"__esModule\", {\n        value: true\n    });\n    function oh(e, t) {\n        for(var n in t)Object.defineProperty(e, n, {\n            enumerable: true,\n            get: t[n]\n        });\n    }\n    oh(io, {\n        pattern: ()=>sh,\n        withoutCapturing: ()=>ca,\n        any: ()=>da,\n        optional: ()=>ah,\n        zeroOrMore: ()=>lh,\n        nestedBrackets: ()=>pa,\n        escape: ()=>lt\n    });\n    var fa = /[\\\\^$.*+?()[\\]{}|]/g, uh = RegExp(fa.source);\n    function pr(e) {\n        return e = Array.isArray(e) ? e : [\n            e\n        ], e = e.map((t)=>t instanceof RegExp ? t.source : t), e.join(\"\");\n    }\n    function sh(e) {\n        return new RegExp(pr(e), \"g\");\n    }\n    function ca(e) {\n        return new RegExp(`(?:${pr(e)})`, \"g\");\n    }\n    function da(e) {\n        return `(?:${e.map(pr).join(\"|\")})`;\n    }\n    function ah(e) {\n        return `(?:${pr(e)})?`;\n    }\n    function lh(e) {\n        return `(?:${pr(e)})*`;\n    }\n    function pa(e, t, n = 1) {\n        return ca([\n            lt(e),\n            /[^\\s]*/,\n            n === 1 ? `[^${lt(e)}${lt(t)}s]*` : da([\n                `[^${lt(e)}${lt(t)}s]*`,\n                pa(e, t, n - 1)\n            ]),\n            /[^\\s]*/,\n            lt(t)\n        ]);\n    }\n    function lt(e) {\n        return e && uh.test(e) ? e.replace(fa, \"\\\\$&\") : e || \"\";\n    }\n});\nvar Da = T((oo)=>{\n    \"use strict\";\n    Object.defineProperty(oo, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(oo, \"splitAtTopLevelOnly\", {\n        enumerable: true,\n        get: ()=>dh\n    });\n    var fh = ch(ha());\n    function ma(e) {\n        if (typeof WeakMap != \"function\") return null;\n        var t = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap();\n        return (ma = function(r) {\n            return r ? n : t;\n        })(e);\n    }\n    function ch(e, t) {\n        if (!t && e && e.__esModule) return e;\n        if (e === null || typeof e != \"object\" && typeof e != \"function\") return {\n            default: e\n        };\n        var n = ma(t);\n        if (n && n.has(e)) return n.get(e);\n        var r = {}, i = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for(var o in e)if (o !== \"default\" && Object.prototype.hasOwnProperty.call(e, o)) {\n            var u = i ? Object.getOwnPropertyDescriptor(e, o) : null;\n            u && (u.get || u.set) ? Object.defineProperty(r, o, u) : r[o] = e[o];\n        }\n        return r.default = e, n && n.set(e, r), r;\n    }\n    function* dh(e, t) {\n        let n = new RegExp(`[(){}\\\\[\\\\]${fh.escape(t)}]`, \"g\"), r = 0, i = 0, o = false, u = 0, s = 0, a = t.length;\n        for (let l of e.matchAll(n)){\n            let f = l[0] === t[u], c = u === a - 1, d = f && c;\n            l[0] === \"(\" && r++, l[0] === \")\" && r--, l[0] === \"[\" && r++, l[0] === \"]\" && r--, l[0] === \"{\" && r++, l[0] === \"}\" && r--, f && r === 0 && (s === 0 && (s = l.index), u++), d && r === 0 && (o = true, yield e.substring(i, s), i = s + a), u === a && (u = 0, s = 0);\n        }\n        o ? yield e.substring(i) : yield e;\n    }\n});\nvar ba = T((uo)=>{\n    \"use strict\";\n    Object.defineProperty(uo, \"__esModule\", {\n        value: true\n    });\n    function ph(e, t) {\n        for(var n in t)Object.defineProperty(e, n, {\n            enumerable: true,\n            get: t[n]\n        });\n    }\n    ph(uo, {\n        parseBoxShadowValue: ()=>gh,\n        formatBoxShadowValue: ()=>bh\n    });\n    var hh = Da(), mh = /* @__PURE__ */ new Set([\n        \"inset\",\n        \"inherit\",\n        \"initial\",\n        \"revert\",\n        \"unset\"\n    ]), Dh = /\\ +(?![^(]*\\))/g, ga = /^-?(\\d+|\\.\\d+)(.*?)$/g;\n    function gh(e) {\n        return Array.from((0, hh.splitAtTopLevelOnly)(e, \",\")).map((n)=>{\n            let r = n.trim(), i = {\n                raw: r\n            }, o = r.split(Dh), u = /* @__PURE__ */ new Set();\n            for (let s of o)ga.lastIndex = 0, !u.has(\"KEYWORD\") && mh.has(s) ? (i.keyword = s, u.add(\"KEYWORD\")) : ga.test(s) ? u.has(\"X\") ? u.has(\"Y\") ? u.has(\"BLUR\") ? u.has(\"SPREAD\") || (i.spread = s, u.add(\"SPREAD\")) : (i.blur = s, u.add(\"BLUR\")) : (i.y = s, u.add(\"Y\")) : (i.x = s, u.add(\"X\")) : i.color ? (i.unknown || (i.unknown = []), i.unknown.push(s)) : i.color = s;\n            return i.valid = i.x !== void 0 && i.y !== void 0, i;\n        });\n    }\n    function bh(e) {\n        return e.map((t)=>t.valid ? [\n                t.keyword,\n                t.x,\n                t.y,\n                t.blur,\n                t.spread,\n                t.color\n            ].filter(Boolean).join(\" \") : t.raw).join(\", \");\n    }\n});\nvar Sa = T((ao)=>{\n    \"use strict\";\n    Object.defineProperty(ao, \"__esModule\", {\n        value: true\n    });\n    function vh(e, t) {\n        for(var n in t)Object.defineProperty(e, n, {\n            enumerable: true,\n            get: t[n]\n        });\n    }\n    vh(ao, {\n        normalize: ()=>tt,\n        url: ()=>xa,\n        number: ()=>Fh,\n        percentage: ()=>Fa,\n        length: ()=>wa,\n        lineWidth: ()=>Sh,\n        shadow: ()=>Ch,\n        color: ()=>_h,\n        image: ()=>kh,\n        gradient: ()=>Ea,\n        position: ()=>Oh,\n        familyName: ()=>Ph,\n        genericName: ()=>Ih,\n        absoluteSize: ()=>Lh,\n        relativeSize: ()=>Nh\n    });\n    var yh = to(), xh = ba(), so = [\n        \"min\",\n        \"max\",\n        \"clamp\",\n        \"calc\"\n    ], ya = /,(?![^(]*\\))/g, dn = /_(?![^(]*\\))/g;\n    function tt(e, t = true) {\n        return e.includes(\"url(\") ? e.split(/(url\\(.*?\\))/g).filter(Boolean).map((n)=>/^url\\(.*?\\)$/.test(n) ? n : tt(n, false)).join(\"\") : (e = e.replace(/([^\\\\])_+/g, (n, r)=>r + \" \".repeat(n.length - 1)).replace(/^_/g, \" \").replace(/\\\\_/g, \"_\"), t && (e = e.trim()), e = e.replace(/(calc|min|max|clamp)\\(.+\\)/g, (n)=>n.replace(/(-?\\d*\\.?\\d(?!\\b-.+[,)](?![^+\\-/*])\\D)(?:%|[a-z]+)?|\\))([+\\-/*])/g, \"$1 $2 \")), e);\n    }\n    function xa(e) {\n        return e.startsWith(\"url(\");\n    }\n    function Fh(e) {\n        return !isNaN(Number(e)) || so.some((t)=>new RegExp(`^${t}\\\\(.+?`).test(e));\n    }\n    function Fa(e) {\n        return e.split(dn).every((t)=>/%$/g.test(t) || so.some((n)=>new RegExp(`^${n}\\\\(.+?%`).test(t)));\n    }\n    var wh = [\n        \"cm\",\n        \"mm\",\n        \"Q\",\n        \"in\",\n        \"pc\",\n        \"pt\",\n        \"px\",\n        \"em\",\n        \"ex\",\n        \"ch\",\n        \"rem\",\n        \"lh\",\n        \"vw\",\n        \"vh\",\n        \"vmin\",\n        \"vmax\"\n    ], va = `(?:${wh.join(\"|\")})`;\n    function wa(e) {\n        return e.split(dn).every((t)=>t === \"0\" || new RegExp(`${va}$`).test(t) || so.some((n)=>new RegExp(`^${n}\\\\(.+?${va}`).test(t)));\n    }\n    var Eh = /* @__PURE__ */ new Set([\n        \"thin\",\n        \"medium\",\n        \"thick\"\n    ]);\n    function Sh(e) {\n        return Eh.has(e);\n    }\n    function Ch(e) {\n        let t = (0, xh.parseBoxShadowValue)(tt(e));\n        for (let n of t)if (!n.valid) return false;\n        return true;\n    }\n    function _h(e) {\n        let t = 0;\n        return e.split(dn).every((r)=>(r = tt(r), r.startsWith(\"var(\") ? true : (0, yh.parseColor)(r, {\n                loose: true\n            }) !== null ? (t++, true) : false)) ? t > 0 : false;\n    }\n    function kh(e) {\n        let t = 0;\n        return e.split(ya).every((r)=>(r = tt(r), r.startsWith(\"var(\") ? true : xa(r) || Ea(r) || [\n                \"element(\",\n                \"image(\",\n                \"cross-fade(\",\n                \"image-set(\"\n            ].some((i)=>r.startsWith(i)) ? (t++, true) : false)) ? t > 0 : false;\n    }\n    var Th = /* @__PURE__ */ new Set([\n        \"linear-gradient\",\n        \"radial-gradient\",\n        \"repeating-linear-gradient\",\n        \"repeating-radial-gradient\",\n        \"conic-gradient\"\n    ]);\n    function Ea(e) {\n        e = tt(e);\n        for (let t of Th)if (e.startsWith(`${t}(`)) return true;\n        return false;\n    }\n    var Ah = /* @__PURE__ */ new Set([\n        \"center\",\n        \"top\",\n        \"right\",\n        \"bottom\",\n        \"left\"\n    ]);\n    function Oh(e) {\n        let t = 0;\n        return e.split(dn).every((r)=>(r = tt(r), r.startsWith(\"var(\") ? true : Ah.has(r) || wa(r) || Fa(r) ? (t++, true) : false)) ? t > 0 : false;\n    }\n    function Ph(e) {\n        let t = 0;\n        return e.split(ya).every((r)=>(r = tt(r), r.startsWith(\"var(\") ? true : r.includes(\" \") && !/(['\"])([^\"']+)\\1/g.test(r) || /^\\d/g.test(r) ? false : (t++, true))) ? t > 0 : false;\n    }\n    var Bh = /* @__PURE__ */ new Set([\n        \"serif\",\n        \"sans-serif\",\n        \"monospace\",\n        \"cursive\",\n        \"fantasy\",\n        \"system-ui\",\n        \"ui-serif\",\n        \"ui-sans-serif\",\n        \"ui-monospace\",\n        \"ui-rounded\",\n        \"math\",\n        \"emoji\",\n        \"fangsong\"\n    ]);\n    function Ih(e) {\n        return Bh.has(e);\n    }\n    var Rh = /* @__PURE__ */ new Set([\n        \"xx-small\",\n        \"x-small\",\n        \"small\",\n        \"medium\",\n        \"large\",\n        \"x-large\",\n        \"x-large\",\n        \"xxx-large\"\n    ]);\n    function Lh(e) {\n        return Rh.has(e);\n    }\n    var Mh = /* @__PURE__ */ new Set([\n        \"larger\",\n        \"smaller\"\n    ]);\n    function Nh(e) {\n        return Mh.has(e);\n    }\n});\nvar Ba = T((co)=>{\n    \"use strict\";\n    Object.defineProperty(co, \"__esModule\", {\n        value: true\n    });\n    function Wh(e, t) {\n        for(var n in t)Object.defineProperty(e, n, {\n            enumerable: true,\n            get: t[n]\n        });\n    }\n    Wh(co, {\n        updateAllClasses: ()=>zh,\n        asValue: ()=>mr,\n        parseColorFormat: ()=>lo,\n        asColor: ()=>Aa,\n        asLookupValue: ()=>Oa,\n        coerceValue: ()=>Hh\n    });\n    var $h = fo(ia()), qh = fo(oa()), Ca = no(), xe = Sa(), _a2 = fo(Xn());\n    function fo(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function zh(e, t) {\n        return (0, $h.default)((i)=>{\n            i.walkClasses((o)=>{\n                let u = t(o.value);\n                o.value = u, o.raws && o.raws.value && (o.raws.value = (0, qh.default)(o.raws.value));\n            });\n        }).processSync(e);\n    }\n    function Ta(e, t) {\n        if (!hr(e)) return;\n        let n = e.slice(1, -1);\n        if (t(n)) return (0, xe.normalize)(n);\n    }\n    function Uh(e, t = {}, n) {\n        let r = t[e];\n        if (r !== void 0) return (0, _a2.default)(r);\n        if (hr(e)) {\n            let i = Ta(e, n);\n            return i === void 0 ? void 0 : (0, _a2.default)(i);\n        }\n    }\n    function mr(e, t = {}, { validate: n = ()=>true } = {}) {\n        var r;\n        let i = (r = t.values) === null || r === void 0 ? void 0 : r[e];\n        return i !== void 0 ? i : t.supportsNegativeValues && e.startsWith(\"-\") ? Uh(e.slice(1), t.values, n) : Ta(e, n);\n    }\n    function hr(e) {\n        return e.startsWith(\"[\") && e.endsWith(\"]\");\n    }\n    function Gh(e) {\n        let t = e.lastIndexOf(\"/\");\n        return t === -1 || t === e.length - 1 ? [\n            e\n        ] : [\n            e.slice(0, t),\n            e.slice(t + 1)\n        ];\n    }\n    function lo(e) {\n        if (typeof e == \"string\" && e.includes(\"<alpha-value>\")) {\n            let t = e;\n            return ({ opacityValue: n = 1 })=>t.replace(\"<alpha-value>\", n);\n        }\n        return e;\n    }\n    function Aa(e, t = {}, { tailwindConfig: n = {} } = {}) {\n        var r;\n        if (((r = t.values) === null || r === void 0 ? void 0 : r[e]) !== void 0) {\n            var i;\n            return lo((i = t.values) === null || i === void 0 ? void 0 : i[e]);\n        }\n        let [o, u] = Gh(e);\n        if (u !== void 0) {\n            var s, a, l, f;\n            let c = (f = (s = t.values) === null || s === void 0 ? void 0 : s[o]) !== null && f !== void 0 ? f : hr(o) ? o.slice(1, -1) : void 0;\n            return c === void 0 ? void 0 : (c = lo(c), hr(u) ? (0, Ca.withAlphaValue)(c, u.slice(1, -1)) : ((a = n.theme) === null || a === void 0 || (l = a.opacity) === null || l === void 0 ? void 0 : l[u]) === void 0 ? void 0 : (0, Ca.withAlphaValue)(c, n.theme.opacity[u]));\n        }\n        return mr(e, t, {\n            validate: xe.color\n        });\n    }\n    function Oa(e, t = {}) {\n        var n;\n        return (n = t.values) === null || n === void 0 ? void 0 : n[e];\n    }\n    function ke(e) {\n        return (t, n)=>mr(t, n, {\n                validate: e\n            });\n    }\n    var Pa = {\n        any: mr,\n        color: Aa,\n        url: ke(xe.url),\n        image: ke(xe.image),\n        length: ke(xe.length),\n        percentage: ke(xe.percentage),\n        position: ke(xe.position),\n        lookup: Oa,\n        \"generic-name\": ke(xe.genericName),\n        \"family-name\": ke(xe.familyName),\n        number: ke(xe.number),\n        \"line-width\": ke(xe.lineWidth),\n        \"absolute-size\": ke(xe.absoluteSize),\n        \"relative-size\": ke(xe.relativeSize),\n        shadow: ke(xe.shadow)\n    }, ka = Object.keys(Pa);\n    function jh(e, t) {\n        let n = e.indexOf(t);\n        return n === -1 ? [\n            void 0,\n            e\n        ] : [\n            e.slice(0, n),\n            e.slice(n + 1)\n        ];\n    }\n    function Hh(e, t, n, r) {\n        if (hr(t)) {\n            let i = t.slice(1, -1), [o, u] = jh(i, \":\");\n            if (!/^[\\w-_]+$/g.test(o)) u = i;\n            else if (o !== void 0 && !ka.includes(o)) return [];\n            if (u.length > 0 && ka.includes(o)) return [\n                mr(`[${u}]`, n),\n                o\n            ];\n        }\n        for (let i of [].concat(e)){\n            let o = Pa[i](t, n, {\n                tailwindConfig: r\n            });\n            if (o !== void 0) return [\n                o,\n                i\n            ];\n        }\n        return [];\n    }\n});\nvar Ia = T((po)=>{\n    \"use strict\";\n    Object.defineProperty(po, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(po, \"default\", {\n        enumerable: true,\n        get: ()=>Vh\n    });\n    function Vh(e) {\n        return typeof e == \"function\" ? e({}) : e;\n    }\n});\nvar Wa = T((mo)=>{\n    \"use strict\";\n    Object.defineProperty(mo, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(mo, \"default\", {\n        enumerable: true,\n        get: ()=>pm\n    });\n    var Yh = ft(Xn()), Xh = ft(zu()), Qh = ft(Uu()), Kh = ft(Jn()), Jh = ft(ju()), Ma = Hu(), Ra = Vu(), Zh = Xu(), em = ft(Qu()), tm = Ku(), rm = Ba(), nm = no(), im = ft(Ia());\n    function ft(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function St(e) {\n        return typeof e == \"function\";\n    }\n    function Dr(e) {\n        return typeof e == \"object\" && e !== null;\n    }\n    function gr(e, ...t) {\n        let n = t.pop();\n        for (let r of t)for(let i in r){\n            let o = n(e[i], r[i]);\n            o === void 0 ? Dr(e[i]) && Dr(r[i]) ? e[i] = gr(e[i], r[i], n) : e[i] = r[i] : e[i] = o;\n        }\n        return e;\n    }\n    var ho = {\n        colors: Jh.default,\n        negative (e) {\n            return Object.keys(e).filter((t)=>e[t] !== \"0\").reduce((t, n)=>{\n                let r = (0, Yh.default)(e[n]);\n                return r !== void 0 && (t[`-${n}`] = r), t;\n            }, {});\n        },\n        breakpoints (e) {\n            return Object.keys(e).filter((t)=>typeof e[t] == \"string\").reduce((t, n)=>({\n                    ...t,\n                    [`screen-${n}`]: e[n]\n                }), {});\n        }\n    };\n    function om(e, ...t) {\n        return St(e) ? e(...t) : e;\n    }\n    function um(e) {\n        return e.reduce((t, { extend: n })=>gr(t, n, (r, i)=>r === void 0 ? [\n                    i\n                ] : Array.isArray(r) ? [\n                    i,\n                    ...r\n                ] : [\n                    i,\n                    r\n                ]), {});\n    }\n    function sm(e) {\n        return {\n            ...e.reduce((t, n)=>(0, Ma.defaults)(t, n), {}),\n            extend: um(e)\n        };\n    }\n    function La(e, t) {\n        if (Array.isArray(e) && Dr(e[0])) return e.concat(t);\n        if (Array.isArray(t) && Dr(t[0]) && Dr(e)) return [\n            e,\n            ...t\n        ];\n        if (Array.isArray(t)) return t;\n    }\n    function am({ extend: e, ...t }) {\n        return gr(t, e, (n, r)=>!St(n) && !r.some(St) ? gr({}, n, ...r, La) : (i, o)=>gr({}, ...[\n                    n,\n                    ...r\n                ].map((u)=>om(u, i, o)), La));\n    }\n    function* lm(e) {\n        let t = (0, Ra.toPath)(e);\n        if (t.length === 0 || (yield t, Array.isArray(e))) return;\n        let n = /^(.*?)\\s*\\/\\s*([^/]+)$/, r = e.match(n);\n        if (r !== null) {\n            let [, i, o] = r, u = (0, Ra.toPath)(i);\n            u.alpha = o, yield u;\n        }\n    }\n    function fm(e) {\n        let t = (n, r)=>{\n            for (let i of lm(n)){\n                let o = 0, u = e;\n                for(; u != null && o < i.length;)u = u[i[o++]], u = St(u) && (i.alpha === void 0 || o <= i.length - 1) ? u(t, ho) : u;\n                if (u !== void 0) {\n                    if (i.alpha !== void 0) {\n                        let s = (0, rm.parseColorFormat)(u);\n                        return (0, nm.withAlphaValue)(s, i.alpha, (0, im.default)(s));\n                    }\n                    return (0, em.default)(u) ? (0, tm.cloneDeep)(u) : u;\n                }\n            }\n            return r;\n        };\n        return Object.assign(t, {\n            theme: t,\n            ...ho\n        }), Object.keys(e).reduce((n, r)=>(n[r] = St(e[r]) ? e[r](t, ho) : e[r], n), {});\n    }\n    function Na(e) {\n        let t = [];\n        return e.forEach((n)=>{\n            t = [\n                ...t,\n                n\n            ];\n            var r;\n            let i = (r = n == null ? void 0 : n.plugins) !== null && r !== void 0 ? r : [];\n            i.length !== 0 && i.forEach((o)=>{\n                o.__isOptionsFunction && (o = o());\n                var u;\n                t = [\n                    ...t,\n                    ...Na([\n                        (u = o == null ? void 0 : o.config) !== null && u !== void 0 ? u : {}\n                    ])\n                ];\n            });\n        }), t;\n    }\n    function cm(e) {\n        return [\n            ...e\n        ].reduceRight((n, r)=>St(r) ? r({\n                corePlugins: n\n            }) : (0, Qh.default)(r, n), Xh.default);\n    }\n    function dm(e) {\n        return [\n            ...e\n        ].reduceRight((n, r)=>[\n                ...n,\n                ...r\n            ], []);\n    }\n    function pm(e) {\n        let t = [\n            ...Na(e),\n            {\n                prefix: \"\",\n                important: false,\n                separator: \":\",\n                variantOrder: Kh.default.variantOrder\n            }\n        ];\n        var n, r;\n        return (0, Zh.normalizeConfig)((0, Ma.defaults)({\n            theme: fm(am(sm(t.map((i)=>(n = i == null ? void 0 : i.theme) !== null && n !== void 0 ? n : {})))),\n            corePlugins: cm(t.map((i)=>i.corePlugins)),\n            plugins: dm(e.map((i)=>(r = i == null ? void 0 : i.plugins) !== null && r !== void 0 ? r : []))\n        }, ...t));\n    }\n});\nvar $a = {};\nyn($a, {\n    default: ()=>hm\n});\nvar hm;\nvar qa = vn(()=>{\n    hm = {\n        yellow: (e)=>e\n    };\n});\nvar ja = T((Do)=>{\n    \"use strict\";\n    Object.defineProperty(Do, \"__esModule\", {\n        value: true\n    });\n    function mm(e, t) {\n        for(var n in t)Object.defineProperty(e, n, {\n            enumerable: true,\n            get: t[n]\n        });\n    }\n    mm(Do, {\n        flagEnabled: ()=>bm,\n        issueFlagNotices: ()=>vm,\n        default: ()=>ym\n    });\n    var Dm = Ga((qa(), Br($a))), gm = Ga((Qr(), Br(Xr)));\n    function Ga(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    var za = {\n        optimizeUniversalDefaults: false\n    }, br = {\n        future: [\n            \"hoverOnlyWhenSupported\",\n            \"respectDefaultRingColorOpacity\"\n        ],\n        experimental: [\n            \"optimizeUniversalDefaults\",\n            \"matchVariant\"\n        ]\n    };\n    function bm(e, t) {\n        if (br.future.includes(t)) {\n            var n, r, i;\n            return e.future === \"all\" || ((i = (r = e == null || (n = e.future) === null || n === void 0 ? void 0 : n[t]) !== null && r !== void 0 ? r : za[t]) !== null && i !== void 0 ? i : false);\n        }\n        if (br.experimental.includes(t)) {\n            var o, u, s;\n            return e.experimental === \"all\" || ((s = (u = e == null || (o = e.experimental) === null || o === void 0 ? void 0 : o[t]) !== null && u !== void 0 ? u : za[t]) !== null && s !== void 0 ? s : false);\n        }\n        return false;\n    }\n    function Ua(e) {\n        if (e.experimental === \"all\") return br.experimental;\n        var t;\n        return Object.keys((t = e == null ? void 0 : e.experimental) !== null && t !== void 0 ? t : {}).filter((n)=>br.experimental.includes(n) && e.experimental[n]);\n    }\n    function vm(e) {\n        if (process.env.JEST_WORKER_ID === void 0 && Ua(e).length > 0) {\n            let t = Ua(e).map((n)=>Dm.default.yellow(n)).join(\", \");\n            gm.default.warn(\"experimental-flags-enabled\", [\n                `You have enabled experimental features: ${t}`,\n                \"Experimental features in Tailwind CSS are not covered by semver, may introduce breaking changes, and can change at any time.\"\n            ]);\n        }\n    }\n    var ym = br;\n});\nvar Va = T((go)=>{\n    \"use strict\";\n    Object.defineProperty(go, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(go, \"default\", {\n        enumerable: true,\n        get: ()=>Ha\n    });\n    var xm = wm(Jn()), Fm = ja();\n    function wm(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function Ha(e) {\n        var t;\n        let n = ((t = e == null ? void 0 : e.presets) !== null && t !== void 0 ? t : [\n            xm.default\n        ]).slice().reverse().flatMap((o)=>Ha(typeof o == \"function\" ? o() : o)), r = {\n            respectDefaultRingColorOpacity: {\n                theme: {\n                    ringColor: {\n                        DEFAULT: \"#3b82f67f\"\n                    }\n                }\n            }\n        }, i = Object.keys(r).filter((o)=>(0, Fm.flagEnabled)(e, o)).map((o)=>r[o]);\n        return [\n            e,\n            ...i,\n            ...n\n        ];\n    }\n});\nvar Xa = T((bo)=>{\n    \"use strict\";\n    Object.defineProperty(bo, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(bo, \"default\", {\n        enumerable: true,\n        get: ()=>Cm\n    });\n    var Em = Ya(Wa()), Sm = Ya(Va());\n    function Ya(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function Cm(...e) {\n        let [, ...t] = (0, Sm.default)(e[0]);\n        return (0, Em.default)([\n            ...e,\n            ...t\n        ]);\n    }\n});\nvar Ka = T((Nb, Qa)=>{\n    var vo = Xa();\n    Qa.exports = (vo.__esModule ? vo : {\n        default: vo\n    }).default;\n});\nvar gt;\nfunction Rl(e) {\n    gt = e;\n}\nvar Ot = null;\nasync function qe() {\n    return gt || (Ot ? (await Ot, gt) : (Ot = Promise.resolve().then(()=>(Ho(), jo)).then((e)=>e.getYogaModule()).then((e)=>gt = e), await Ot, Ot = null, gt));\n}\nvar Pt = (e, t)=>()=>(t || e((t = {\n            exports: {}\n        }).exports, t), t.exports);\nvar Ll = Pt((e, t)=>{\n    t.exports = [\n        \"em\",\n        \"ex\",\n        \"ch\",\n        \"rem\",\n        \"vh\",\n        \"vw\",\n        \"vmin\",\n        \"vmax\",\n        \"px\",\n        \"mm\",\n        \"cm\",\n        \"in\",\n        \"pt\",\n        \"pc\",\n        \"mozmm\"\n    ];\n});\nvar Ml = Pt((e, t)=>{\n    t.exports = [\n        \"deg\",\n        \"grad\",\n        \"rad\",\n        \"turn\"\n    ];\n});\nvar Nl = Pt((e, t)=>{\n    t.exports = [\n        \"dpi\",\n        \"dpcm\",\n        \"dppx\"\n    ];\n});\nvar Wl = Pt((e, t)=>{\n    t.exports = [\n        \"Hz\",\n        \"kHz\"\n    ];\n});\nvar $l = Pt((e, t)=>{\n    t.exports = [\n        \"s\",\n        \"ms\"\n    ];\n});\nvar ql = Ll();\nvar Vo = Ml();\nvar Yo = Nl();\nvar Xo = Wl();\nvar Qo = $l();\nfunction Fn(e) {\n    if (/\\.\\D?$/.test(e)) throw new Error(\"The dot should be followed by a number\");\n    if (/^[+-]{2}/.test(e)) throw new Error(\"Only one leading +/- is allowed\");\n    if (zl(e) > 1) throw new Error(\"Only one dot is allowed\");\n    if (/%$/.test(e)) {\n        this.type = \"percentage\", this.value = xn(e), this.unit = \"%\";\n        return;\n    }\n    var t = Gl(e);\n    if (!t) {\n        this.type = \"number\", this.value = xn(e);\n        return;\n    }\n    this.type = Hl(t), this.value = xn(e.substr(0, e.length - t.length)), this.unit = t;\n}\nFn.prototype.valueOf = function() {\n    return this.value;\n};\nFn.prototype.toString = function() {\n    return this.value + (this.unit || \"\");\n};\nfunction Qe(e) {\n    return new Fn(e);\n}\nfunction zl(e) {\n    var t = e.match(/\\./g);\n    return t ? t.length : 0;\n}\nfunction xn(e) {\n    var t = parseFloat(e);\n    if (isNaN(t)) throw new Error(\"Invalid number: \" + e);\n    return t;\n}\nvar Ul = [].concat(Vo, Xo, ql, Yo, Qo);\nfunction Gl(e) {\n    var t = e.match(/\\D+$/), n = t && t[0];\n    if (n && Ul.indexOf(n) === -1) throw new Error(\"Invalid unit: \" + n);\n    return n;\n}\nvar jl = Object.assign(Ir(Vo, \"angle\"), Ir(Xo, \"frequency\"), Ir(Yo, \"resolution\"), Ir(Qo, \"time\"));\nfunction Ir(e, t) {\n    return Object.fromEntries(e.map((n)=>[\n            n,\n            t\n        ]));\n}\nfunction Hl(e) {\n    return jl[e] || \"length\";\n}\nfunction bt(e) {\n    let t = typeof e;\n    return !(t === \"number\" || t === \"bigint\" || t === \"string\" || t === \"boolean\");\n}\nfunction Ko(e) {\n    return /^class\\s/.test(e.toString());\n}\nfunction Jo(e) {\n    return \"dangerouslySetInnerHTML\" in e;\n}\nfunction Zo(e) {\n    let t = typeof e > \"u\" ? [] : [].concat(e).flat(1 / 0), n = [];\n    for(let r = 0; r < t.length; r++){\n        let i = t[r];\n        typeof i > \"u\" || typeof i == \"boolean\" || i === null || (typeof i == \"number\" && (i = String(i)), typeof i == \"string\" && n.length && typeof n[n.length - 1] == \"string\" ? n[n.length - 1] += i : n.push(i));\n    }\n    return n;\n}\nfunction W(e, t, n, r, i = false) {\n    if (typeof e == \"number\") return e;\n    try {\n        if (e = e.trim(), /[ /\\(,]/.test(e)) return;\n        if (e === String(+e)) return +e;\n        let o = new Qe(e);\n        if (o.type === \"length\") switch(o.unit){\n            case \"em\":\n                return o.value * t;\n            case \"rem\":\n                return o.value * 16;\n            case \"vw\":\n                return ~~(o.value * r._viewportWidth / 100);\n            case \"vh\":\n                return ~~(o.value * r._viewportHeight / 100);\n            default:\n                return o.value;\n        }\n        else if (o.type === \"angle\") switch(o.unit){\n            case \"deg\":\n                return o.value;\n            case \"rad\":\n                return o.value * 180 / Math.PI;\n            default:\n                return o.value;\n        }\n        else if (o.type === \"percentage\" && i) return o.value / 100 * n;\n    } catch  {}\n}\nfunction Bt(e, t) {\n    return [\n        e[0] * t[0] + e[2] * t[1],\n        e[1] * t[0] + e[3] * t[1],\n        e[0] * t[2] + e[2] * t[3],\n        e[1] * t[2] + e[3] * t[3],\n        e[0] * t[4] + e[2] * t[5] + e[4],\n        e[1] * t[4] + e[3] * t[5] + e[5]\n    ];\n}\nfunction ve(e, t, n, r) {\n    let i = t[e];\n    if (typeof i > \"u\") {\n        if (r && typeof e < \"u\") throw new Error(`Invalid value for CSS property \"${r}\". Allowed values: ${Object.keys(t).map((o)=>`\"${o}\"`).join(\" | \")}. Received: \"${e}\".`);\n        i = n;\n    }\n    return i;\n}\nvar wn;\nvar En;\nvar eu = [\n    32,\n    160,\n    4961,\n    65792,\n    65793,\n    4153,\n    4241,\n    10\n].map((e)=>String.fromCodePoint(e));\nfunction be(e, t, n) {\n    if (!wn || !En) {\n        if (!(typeof Intl < \"u\" && \"Segmenter\" in Intl)) throw new Error(\"Intl.Segmenter does not exist, please use import a polyfill.\");\n        wn = new Intl.Segmenter(n, {\n            granularity: \"word\"\n        }), En = new Intl.Segmenter(n, {\n            granularity: \"grapheme\"\n        });\n    }\n    if (t === \"grapheme\") return [\n        ...En.segment(e)\n    ].map((r)=>r.segment);\n    {\n        let r = [\n            ...wn.segment(e)\n        ].map((u)=>u.segment), i = [], o = 0;\n        for(; o < r.length;){\n            let u = r[o];\n            if (u == \"\\xa0\") {\n                let s = o === 0 ? \"\" : i.pop(), a = o === r.length - 1 ? \"\" : r[o + 1];\n                i.push(s + \"\\xa0\" + a), o += 2;\n            } else i.push(u), o++;\n        }\n        return i;\n    }\n}\nfunction S(e, t, n) {\n    let r = \"\";\n    for (let [i, o] of Object.entries(t))typeof o < \"u\" && (r += ` ${i}=\"${o}\"`);\n    return n ? `<${e}${r}>${n}</${e}>` : `<${e}${r}/>`;\n}\nfunction tu(e = 20) {\n    let t = /* @__PURE__ */ new Map();\n    function n(o, u) {\n        if (t.size >= e) {\n            let s = t.keys().next().value;\n            t.delete(s);\n        }\n        t.set(o, u);\n    }\n    function r(o) {\n        if (!t.has(o)) return;\n        let s = t.get(o);\n        return t.delete(o), t.set(o, s), s;\n    }\n    function i() {\n        t.clear();\n    }\n    return {\n        set: n,\n        get: r,\n        clear: i\n    };\n}\nfunction vt(e) {\n    return e ? e.split(/[, ]/).filter(Boolean).map(Number) : null;\n}\nfunction Yl(e) {\n    return Object.prototype.toString.call(e);\n}\nfunction Rr(e) {\n    return typeof e == \"string\";\n}\nfunction ru(e) {\n    return typeof e == \"number\";\n}\nfunction nu(e) {\n    return Yl(e) === \"[object Undefined]\";\n}\nfunction iu(e, t) {\n    if (t === \"break-all\") return {\n        words: be(e, \"grapheme\"),\n        requiredBreaks: []\n    };\n    if (t === \"keep-all\") return {\n        words: be(e, \"word\"),\n        requiredBreaks: []\n    };\n    let n = new $557adaaeb0c7885f$exports(e), r = 0, i = n.nextBreak(), o = [], u = [\n        false\n    ];\n    for(; i;){\n        let s = e.slice(r, i.position);\n        o.push(s), i.required ? u.push(true) : u.push(false), r = i.position, i = n.nextBreak();\n    }\n    return {\n        words: o,\n        requiredBreaks: u\n    };\n}\nvar ou = (e)=>e.replaceAll(/([A-Z])/g, (t, n)=>`-${n.toLowerCase()}`);\nfunction Lr(e, t = \",\") {\n    let n = [], r = 0, i = 0;\n    t = new RegExp(t);\n    for(let o = 0; o < e.length; o++)e[o] === \"(\" ? i++ : e[o] === \")\" && i--, i === 0 && t.test(e[o]) && (n.push(e.slice(r, o).trim()), r = o + 1);\n    return n.push(e.slice(r).trim()), n;\n}\nvar Xl = \"image/avif\";\nvar Ql = \"image/webp\";\nvar Mr = \"image/apng\";\nvar Nr = \"image/png\";\nvar Wr = \"image/jpeg\";\nvar $r = \"image/gif\";\nvar Cn = \"image/svg+xml\";\nfunction au(e) {\n    let t = new DataView(e), n = 4, r = t.byteLength;\n    for(; n < r;){\n        let i = t.getUint16(n, false);\n        if (i > r) throw new TypeError(\"Invalid JPEG\");\n        let o = t.getUint8(i + 1 + n);\n        if (o === 192 || o === 193 || o === 194) return [\n            t.getUint16(i + 7 + n, false),\n            t.getUint16(i + 5 + n, false)\n        ];\n        n += i + 2;\n    }\n    throw new TypeError(\"Invalid JPEG\");\n}\nfunction lu(e) {\n    let t = new Uint8Array(e.slice(6, 10));\n    return [\n        t[0] | t[1] << 8,\n        t[2] | t[3] << 8\n    ];\n}\nfunction fu(e) {\n    let t = new DataView(e);\n    return [\n        t.getUint16(18, false),\n        t.getUint16(22, false)\n    ];\n}\nvar Re = tu(100);\nvar Sn = /* @__PURE__ */ new Map();\nvar Kl = [\n    Nr,\n    Mr,\n    Wr,\n    $r,\n    Cn\n];\nfunction Jl(e) {\n    let t = \"\", n = new Uint8Array(e);\n    for(let r = 0; r < n.byteLength; r++)t += String.fromCharCode(n[r]);\n    return btoa(t);\n}\nfunction Zl(e) {\n    let t = atob(e), n = t.length, r = new Uint8Array(n);\n    for(let i = 0; i < n; i++)r[i] = t.charCodeAt(i);\n    return r.buffer;\n}\nfunction uu(e, t) {\n    let n = t.match(/<svg[^>]*>/)[0], r = n.match(/viewBox=['\"](.+)['\"]/), i = r ? vt(r[1]) : null, o = n.match(/width=['\"](\\d*\\.\\d+|\\d+)['\"]/), u = n.match(/height=['\"](\\d*\\.\\d+|\\d+)['\"]/);\n    if (!i && (!o || !u)) throw new Error(`Failed to parse SVG from ${e}: missing \"viewBox\"`);\n    let s = i ? [\n        i[2],\n        i[3]\n    ] : [\n        +o[1],\n        +u[1]\n    ], a = s[0] / s[1];\n    return o && u ? [\n        +o[1],\n        +u[1]\n    ] : o ? [\n        +o[1],\n        +o[1] / a\n    ] : u ? [\n        +u[1] * a,\n        +u[1]\n    ] : [\n        s[0],\n        s[1]\n    ];\n}\nfunction su(e) {\n    let t, n = ef(new Uint8Array(e));\n    switch(n){\n        case Nr:\n        case Mr:\n            t = fu(e);\n            break;\n        case $r:\n            t = lu(e);\n            break;\n        case Wr:\n            t = au(e);\n            break;\n    }\n    if (!Kl.includes(n)) throw new Error(`Unsupported image type: ${n || \"unknown\"}`);\n    return [\n        `data:${n};base64,${Jl(e)}`,\n        t\n    ];\n}\nasync function yt(e) {\n    if (!e) throw new Error(\"Image source is not provided.\");\n    if (typeof e == \"object\") {\n        let [i, o] = su(e);\n        return [\n            i,\n            ...o\n        ];\n    }\n    if ((e.startsWith('\"') && e.endsWith('\"') || e.startsWith(\"'\") && e.endsWith(\"'\")) && (e = e.slice(1, -1)),  true && !e.startsWith(\"http\") && !e.startsWith(\"data:\")) throw new Error(`Image source must be an absolute URL: ${e}`);\n    if (e.startsWith(\"data:\")) {\n        let i;\n        try {\n            i = /data:(?<imageType>[a-z/+]+)(;(charset=)?(?<encodingType>.*))?,(?<dataString>.*)/g.exec(e).groups;\n        } catch  {\n            return console.warn(\"Image data URI resolved without size:\" + e), [\n                e\n            ];\n        }\n        let { imageType: o, encodingType: u, dataString: s } = i;\n        if (o === Cn) {\n            let a = u === \"base64\" ? atob(s) : decodeURIComponent(s.replace(/ /g, \"%20\")), l = u === \"base64\" ? e : `data:image/svg+xml;base64,${btoa(a)}`, f = uu(e, a);\n            return Re.set(e, [\n                l,\n                ...f\n            ]), [\n                l,\n                ...f\n            ];\n        } else if (u === \"base64\") {\n            let a, l = Zl(s);\n            switch(o){\n                case Nr:\n                case Mr:\n                    a = fu(l);\n                    break;\n                case $r:\n                    a = lu(l);\n                    break;\n                case Wr:\n                    a = au(l);\n                    break;\n            }\n            return Re.set(e, [\n                e,\n                ...a\n            ]), [\n                e,\n                ...a\n            ];\n        } else return console.warn(\"Image data URI resolved without size:\" + e), Re.set(e, [\n            e\n        ]), [\n            e\n        ];\n    }\n    if (!globalThis.fetch) throw new Error(\"`fetch` is required to be polyfilled to load images.\");\n    if (Sn.has(e)) return Sn.get(e);\n    let t = Re.get(e);\n    if (t) return t;\n    let n = e, r = fetch(n).then((i)=>{\n        let o = i.headers.get(\"content-type\");\n        return o === \"image/svg+xml\" || o === \"application/svg+xml\" ? i.text() : i.arrayBuffer();\n    }).then((i)=>{\n        if (typeof i == \"string\") try {\n            let s = `data:image/svg+xml;base64,${btoa(i)}`, a = uu(n, i);\n            return [\n                s,\n                ...a\n            ];\n        } catch (s) {\n            throw new Error(`Failed to parse SVG image: ${s.message}`);\n        }\n        let [o, u] = su(i);\n        return [\n            o,\n            ...u\n        ];\n    }).then((i)=>(Re.set(n, i), i)).catch((i)=>(console.error(`Can't load image ${n}: ` + i.message), Re.set(n, []), []));\n    return Sn.set(n, r), r;\n}\nfunction ef(e) {\n    return [\n        255,\n        216,\n        255\n    ].every((t, n)=>e[n] === t) ? Wr : [\n        137,\n        80,\n        78,\n        71,\n        13,\n        10,\n        26,\n        10\n    ].every((t, n)=>e[n] === t) ? tf(e) ? Mr : Nr : [\n        71,\n        73,\n        70,\n        56\n    ].every((t, n)=>e[n] === t) ? $r : [\n        82,\n        73,\n        70,\n        70,\n        0,\n        0,\n        0,\n        0,\n        87,\n        69,\n        66,\n        80\n    ].every((t, n)=>!t || e[n] === t) ? Ql : [\n        60,\n        63,\n        120,\n        109,\n        108\n    ].every((t, n)=>e[n] === t) ? Cn : [\n        0,\n        0,\n        0,\n        0,\n        102,\n        116,\n        121,\n        112,\n        97,\n        118,\n        105,\n        102\n    ].every((t, n)=>!t || e[n] === t) ? Xl : null;\n}\nfunction tf(e) {\n    let t = new DataView(e.buffer), n, r, i = 8, o = false;\n    for(; !o && n !== \"IEND\" && i < e.length;){\n        r = t.getUint32(i);\n        let u = e.subarray(i + 4, i + 8);\n        n = String.fromCharCode(...u), o = n === \"acTL\", i += 12 + r;\n    }\n    return o;\n}\nvar _n = {\n    accentHeight: \"accent-height\",\n    alignmentBaseline: \"alignment-baseline\",\n    arabicForm: \"arabic-form\",\n    baselineShift: \"baseline-shift\",\n    capHeight: \"cap-height\",\n    clipPath: \"clip-path\",\n    clipRule: \"clip-rule\",\n    colorInterpolation: \"color-interpolation\",\n    colorInterpolationFilters: \"color-interpolation-filters\",\n    colorProfile: \"color-profile\",\n    colorRendering: \"color-rendering\",\n    dominantBaseline: \"dominant-baseline\",\n    enableBackground: \"enable-background\",\n    fillOpacity: \"fill-opacity\",\n    fillRule: \"fill-rule\",\n    floodColor: \"flood-color\",\n    floodOpacity: \"flood-opacity\",\n    fontFamily: \"font-family\",\n    fontSize: \"font-size\",\n    fontSizeAdjust: \"font-size-adjust\",\n    fontStretch: \"font-stretch\",\n    fontStyle: \"font-style\",\n    fontVariant: \"font-variant\",\n    fontWeight: \"font-weight\",\n    glyphName: \"glyph-name\",\n    glyphOrientationHorizontal: \"glyph-orientation-horizontal\",\n    glyphOrientationVertical: \"glyph-orientation-vertical\",\n    horizAdvX: \"horiz-adv-x\",\n    horizOriginX: \"horiz-origin-x\",\n    href: \"href\",\n    imageRendering: \"image-rendering\",\n    letterSpacing: \"letter-spacing\",\n    lightingColor: \"lighting-color\",\n    markerEnd: \"marker-end\",\n    markerMid: \"marker-mid\",\n    markerStart: \"marker-start\",\n    overlinePosition: \"overline-position\",\n    overlineThickness: \"overline-thickness\",\n    paintOrder: \"paint-order\",\n    panose1: \"panose-1\",\n    pointerEvents: \"pointer-events\",\n    renderingIntent: \"rendering-intent\",\n    shapeRendering: \"shape-rendering\",\n    stopColor: \"stop-color\",\n    stopOpacity: \"stop-opacity\",\n    strikethroughPosition: \"strikethrough-position\",\n    strikethroughThickness: \"strikethrough-thickness\",\n    strokeDasharray: \"stroke-dasharray\",\n    strokeDashoffset: \"stroke-dashoffset\",\n    strokeLinecap: \"stroke-linecap\",\n    strokeLinejoin: \"stroke-linejoin\",\n    strokeMiterlimit: \"stroke-miterlimit\",\n    strokeOpacity: \"stroke-opacity\",\n    strokeWidth: \"stroke-width\",\n    textAnchor: \"text-anchor\",\n    textDecoration: \"text-decoration\",\n    textRendering: \"text-rendering\",\n    underlinePosition: \"underline-position\",\n    underlineThickness: \"underline-thickness\",\n    unicodeBidi: \"unicode-bidi\",\n    unicodeRange: \"unicode-range\",\n    unitsPerEm: \"units-per-em\",\n    vAlphabetic: \"v-alphabetic\",\n    vHanging: \"v-hanging\",\n    vIdeographic: \"v-ideographic\",\n    vMathematical: \"v-mathematical\",\n    vectorEffect: \"vector-effect\",\n    vertAdvY: \"vert-adv-y\",\n    vertOriginX: \"vert-origin-x\",\n    vertOriginY: \"vert-origin-y\",\n    wordSpacing: \"word-spacing\",\n    writingMode: \"writing-mode\",\n    xHeight: \"x-height\",\n    xlinkActuate: \"xlink:actuate\",\n    xlinkArcrole: \"xlink:arcrole\",\n    xlinkHref: \"xlink:href\",\n    xlinkRole: \"xlink:role\",\n    xlinkShow: \"xlink:show\",\n    xlinkTitle: \"xlink:title\",\n    xlinkType: \"xlink:type\",\n    xmlBase: \"xml:base\",\n    xmlLang: \"xml:lang\",\n    xmlSpace: \"xml:space\",\n    xmlnsXlink: \"xmlns:xlink\"\n};\nvar rf = /[\\r\\n%#()<>?[\\\\\\]^`{|}\"']/g;\nfunction kn(e, t) {\n    if (!e) return \"\";\n    if (Array.isArray(e)) return e.map((l)=>kn(l, t)).join(\"\");\n    if (typeof e != \"object\") return String(e);\n    let n = e.type;\n    if (n === \"text\") throw new Error(\"<text> nodes are not currently supported, please convert them to <path>\");\n    let { children: r, style: i, ...o } = e.props || {}, u = (i == null ? void 0 : i.color) || t, s = `${Object.entries(o).map(([l, f])=>(typeof f == \"string\" && f.toLowerCase() === \"currentcolor\" && (f = u), l === \"href\" && n === \"image\" ? ` ${_n[l] || l}=\"${Re.get(f)[0]}\"` : ` ${_n[l] || l}=\"${f}\"`)).join(\"\")}`, a = i ? ` style=\"${Object.entries(i).map(([l, f])=>`${ou(l)}:${f}`).join(\";\")}\"` : \"\";\n    return `<${n}${s}${a}>${kn(r, u)}</${n}>`;\n}\nasync function cu(e) {\n    let t = /* @__PURE__ */ new Set(), n = (r)=>{\n        if (r && bt(r)) {\n            if (Array.isArray(r)) {\n                r.forEach((i)=>n(i));\n                return;\n            } else typeof r == \"object\" && (r.type === \"image\" ? t.has(r.props.href) || t.add(r.props.href) : r.type === \"img\" && (t.has(r.props.src) || t.add(r.props.src)));\n            Array.isArray(r.props.children) ? r.props.children.map((i)=>n(i)) : n(r.props.children);\n        }\n    };\n    return n(e), Promise.all(Array.from(t).map((r)=>yt(r)));\n}\nasync function du(e, t) {\n    let { viewBox: n, viewbox: r, width: i, height: o, className: u, style: s, children: a, ...l } = e.props || {};\n    n || (n = r), l.xmlns = \"http://www.w3.org/2000/svg\";\n    let f = (s == null ? void 0 : s.color) || t, c = vt(n), d = c ? c[3] / c[2] : null;\n    return i = i || d && o ? o / d : null, o = o || d && i ? i * d : null, l.width = i, l.height = o, n && (l.viewBox = n), `data:image/svg+xml;utf8,${`<svg ${Object.entries(l).map(([h, p])=>(typeof p == \"string\" && p.toLowerCase() === \"currentcolor\" && (p = f), ` ${_n[h] || h}=\"${p}\"`)).join(\"\")}>${kn(a, f)}</svg>`.replace(rf, encodeURIComponent)}`;\n}\nvar Ee = \"flex\";\nvar pu = {\n    p: {\n        display: Ee,\n        marginTop: \"1em\",\n        marginBottom: \"1em\"\n    },\n    div: {\n        display: Ee\n    },\n    blockquote: {\n        display: Ee,\n        marginTop: \"1em\",\n        marginBottom: \"1em\",\n        marginLeft: 40,\n        marginRight: 40\n    },\n    center: {\n        display: Ee,\n        textAlign: \"center\"\n    },\n    hr: {\n        display: Ee,\n        marginTop: \"0.5em\",\n        marginBottom: \"0.5em\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        borderWidth: 1,\n        borderStyle: \"solid\"\n    },\n    h1: {\n        display: Ee,\n        fontSize: \"2em\",\n        marginTop: \"0.67em\",\n        marginBottom: \"0.67em\",\n        marginLeft: 0,\n        marginRight: 0,\n        fontWeight: \"bold\"\n    },\n    h2: {\n        display: Ee,\n        fontSize: \"1.5em\",\n        marginTop: \"0.83em\",\n        marginBottom: \"0.83em\",\n        marginLeft: 0,\n        marginRight: 0,\n        fontWeight: \"bold\"\n    },\n    h3: {\n        display: Ee,\n        fontSize: \"1.17em\",\n        marginTop: \"1em\",\n        marginBottom: \"1em\",\n        marginLeft: 0,\n        marginRight: 0,\n        fontWeight: \"bold\"\n    },\n    h4: {\n        display: Ee,\n        marginTop: \"1.33em\",\n        marginBottom: \"1.33em\",\n        marginLeft: 0,\n        marginRight: 0,\n        fontWeight: \"bold\"\n    },\n    h5: {\n        display: Ee,\n        fontSize: \"0.83em\",\n        marginTop: \"1.67em\",\n        marginBottom: \"1.67em\",\n        marginLeft: 0,\n        marginRight: 0,\n        fontWeight: \"bold\"\n    },\n    h6: {\n        display: Ee,\n        fontSize: \"0.67em\",\n        marginTop: \"2.33em\",\n        marginBottom: \"2.33em\",\n        marginLeft: 0,\n        marginRight: 0,\n        fontWeight: \"bold\"\n    },\n    u: {\n        textDecoration: \"underline\"\n    },\n    strong: {\n        fontWeight: \"bold\"\n    },\n    b: {\n        fontWeight: \"bold\"\n    },\n    i: {\n        fontStyle: \"italic\"\n    },\n    em: {\n        fontStyle: \"italic\"\n    },\n    code: {\n        fontFamily: \"monospace\"\n    },\n    kbd: {\n        fontFamily: \"monospace\"\n    },\n    pre: {\n        display: Ee,\n        fontFamily: \"monospace\",\n        whiteSpace: \"pre\",\n        marginTop: \"1em\",\n        marginBottom: \"1em\"\n    },\n    mark: {\n        backgroundColor: \"yellow\",\n        color: \"black\"\n    },\n    big: {\n        fontSize: \"larger\"\n    },\n    small: {\n        fontSize: \"smaller\"\n    },\n    s: {\n        textDecoration: \"line-through\"\n    }\n};\nvar nf = /* @__PURE__ */ new Set([\n    \"color\",\n    \"font\",\n    \"fontFamily\",\n    \"fontSize\",\n    \"fontStyle\",\n    \"fontWeight\",\n    \"letterSpacing\",\n    \"lineHeight\",\n    \"textAlign\",\n    \"textTransform\",\n    \"textShadowOffset\",\n    \"textShadowColor\",\n    \"textShadowRadius\",\n    \"textDecorationLine\",\n    \"textDecorationStyle\",\n    \"textDecorationColor\",\n    \"whiteSpace\",\n    \"transform\",\n    \"wordBreak\",\n    \"tabSize\",\n    \"opacity\",\n    \"filter\",\n    \"_viewportWidth\",\n    \"_viewportHeight\",\n    \"_inheritedClipPathId\",\n    \"_inheritedMaskId\",\n    \"_inheritedBackgroundClipTextPath\"\n]);\nfunction Tn(e) {\n    let t = {};\n    for(let n in e)nf.has(n) && (t[n] = e[n]);\n    return t;\n}\nfunction uf(e, t) {\n    try {\n        let n = new Qe(e);\n        switch(n.unit){\n            case \"px\":\n                return {\n                    absolute: n.value\n                };\n            case \"em\":\n                return {\n                    absolute: n.value * t\n                };\n            case \"rem\":\n                return {\n                    absolute: n.value * 16\n                };\n            case \"%\":\n                return {\n                    relative: n.value\n                };\n            default:\n                return {};\n        }\n    } catch  {\n        return {};\n    }\n}\nfunction An(e, t, n) {\n    switch(e){\n        case \"top\":\n            return {\n                yRelative: 0\n            };\n        case \"left\":\n            return {\n                xRelative: 0\n            };\n        case \"right\":\n            return {\n                xRelative: 100\n            };\n        case \"bottom\":\n            return {\n                yRelative: 100\n            };\n        case \"center\":\n            return {};\n        default:\n            {\n                let r = uf(e, t);\n                return r.absolute ? {\n                    [n ? \"xAbsolute\" : \"yAbsolute\"]: r.absolute\n                } : r.relative ? {\n                    [n ? \"xRelative\" : \"yRelative\"]: r.relative\n                } : {};\n            }\n    }\n}\nfunction On(e, t) {\n    if (typeof e == \"number\") return {\n        xAbsolute: e\n    };\n    let n;\n    try {\n        n = (0, import_postcss_value_parser.default)(e).nodes.filter((r)=>r.type === \"word\").map((r)=>r.value);\n    } catch  {\n        return {};\n    }\n    return n.length === 1 ? An(n[0], t, true) : n.length === 2 ? ((n[0] === \"top\" || n[0] === \"bottom\" || n[1] === \"left\" || n[1] === \"right\") && n.reverse(), {\n        ...An(n[0], t, true),\n        ...An(n[1], t, false)\n    }) : {};\n}\nfunction It(e, t) {\n    let n = (0, import_css_to_react_native2.getPropertyName)(`mask-${t}`);\n    return e[n] || e[`WebkitM${n.substring(1)}`];\n}\nfunction hu(e) {\n    let t = e.maskImage || e.WebkitMaskImage, n = {\n        position: It(e, \"position\") || \"0% 0%\",\n        size: It(e, \"size\") || \"100% 100%\",\n        repeat: It(e, \"repeat\") || \"repeat\",\n        origin: It(e, \"origin\") || \"border-box\",\n        clip: It(e, \"origin\") || \"border-box\"\n    };\n    return Lr(t).filter((i)=>i && i !== \"none\").reverse().map((i)=>({\n            image: i,\n            ...n\n        }));\n}\nvar df = /* @__PURE__ */ new Set([\n    \"flex\",\n    \"flexGrow\",\n    \"flexShrink\",\n    \"flexBasis\",\n    \"fontWeight\",\n    \"lineHeight\",\n    \"opacity\",\n    \"scale\",\n    \"scaleX\",\n    \"scaleY\"\n]);\nvar pf = /* @__PURE__ */ new Set([\n    \"lineHeight\"\n]);\nfunction hf(e, t, n, r) {\n    return e === \"textDecoration\" && !n.includes(t.textDecorationColor) && (t.textDecorationColor = r), t;\n}\nfunction Rt(e, t) {\n    let n = Number(t);\n    return isNaN(n) ? t : df.has(e) ? pf.has(e) ? n : String(t) : n + \"px\";\n}\nfunction mf(e, t, n) {\n    if (e === \"lineHeight\") return {\n        lineHeight: Rt(e, t)\n    };\n    if (e === \"fontFamily\") return {\n        fontFamily: t.split(\",\").map((r)=>r.trim().replace(/(^['\"])|(['\"]$)/g, \"\").toLocaleLowerCase())\n    };\n    if (e === \"borderRadius\") {\n        if (typeof t != \"string\" || !t.includes(\"/\")) return;\n        let [r, i] = t.split(\"/\"), o = (0, import_css_to_react_native.getStylesForProperty)(e, r, true), u = (0, import_css_to_react_native.getStylesForProperty)(e, i, true);\n        for(let s in o)u[s] = Rt(e, o[s]) + \" \" + Rt(e, u[s]);\n        return u;\n    }\n    if (/^border(Top|Right|Bottom|Left)?$/.test(e)) {\n        let r = (0, import_css_to_react_native.getStylesForProperty)(\"border\", t, true);\n        r.borderWidth === 1 && !String(t).includes(\"1px\") && (r.borderWidth = 3), r.borderColor === \"black\" && !String(t).includes(\"black\") && (r.borderColor = n);\n        let i = {\n            Width: Rt(e + \"Width\", r.borderWidth),\n            Style: ve(r.borderStyle, {\n                solid: \"solid\",\n                dashed: \"dashed\"\n            }, \"solid\", e + \"Style\"),\n            Color: r.borderColor\n        }, o = {};\n        for (let u of e === \"border\" ? [\n            \"Top\",\n            \"Right\",\n            \"Bottom\",\n            \"Left\"\n        ] : [\n            e.slice(6)\n        ])for(let s in i)o[\"border\" + u + s] = i[s];\n        return o;\n    }\n    if (e === \"boxShadow\") {\n        if (!t) throw new Error('Invalid `boxShadow` value: \"' + t + '\".');\n        return {\n            [e]: typeof t == \"string\" ? (0, import_css_box_shadow.parse)(t) : t\n        };\n    }\n    if (e === \"transform\") {\n        if (typeof t != \"string\") throw new Error(\"Invalid `transform` value.\");\n        let r = {}, i = t.replace(/(-?[\\d.]+%)/g, (u, s)=>{\n            let a = ~~(Math.random() * 1e9);\n            return r[a] = s, a + \"px\";\n        }), o = (0, import_css_to_react_native.getStylesForProperty)(\"transform\", i, true);\n        for (let u of o.transform)for(let s in u)r[u[s]] && (u[s] = r[u[s]]);\n        return o;\n    }\n    if (e === \"background\") return t = t.toString().trim(), /^(linear-gradient|radial-gradient|url)\\(/.test(t) ? (0, import_css_to_react_native.getStylesForProperty)(\"backgroundImage\", t, true) : (0, import_css_to_react_native.getStylesForProperty)(\"background\", t, true);\n    if (e === \"textShadow\") {\n        t = t.toString().trim();\n        let r = {}, i = Lr(t);\n        for (let o of i){\n            let u = (0, import_css_to_react_native.getStylesForProperty)(\"textShadow\", o, true);\n            for(let s in u)r[s] ? r[s].push(u[s]) : r[s] = [\n                u[s]\n            ];\n        }\n        return r;\n    }\n}\nfunction mu(e) {\n    return e === \"transform\" ? \" Only absolute lengths such as `10px` are supported.\" : \"\";\n}\nvar Du = /rgb\\((\\d+)\\s+(\\d+)\\s+(\\d+)\\s*\\/\\s*([\\.\\d]+)\\)/;\nfunction bu(e) {\n    if (typeof e == \"string\" && Du.test(e.trim())) return e.trim().replace(Du, (t, n, r, i, o)=>`rgba(${n}, ${r}, ${i}, ${o})`);\n    if (typeof e == \"object\" && e !== null) {\n        for(let t in e)e[t] = bu(e[t]);\n        return e;\n    }\n    return e;\n}\nfunction qr(e, t) {\n    let n = {};\n    if (e) {\n        let i = gf(e.color, t.color);\n        n.color = i;\n        for(let o in e){\n            if (o.startsWith(\"_\")) {\n                n[o] = e[o];\n                continue;\n            }\n            if (o === \"color\") continue;\n            let u = (0, import_css_to_react_native.getPropertyName)(o), s = vf(e[o], i);\n            try {\n                let a = mf(u, s, i) || hf(u, (0, import_css_to_react_native.getStylesForProperty)(u, Rt(u, s), true), s, i);\n                Object.assign(n, a);\n            } catch (a) {\n                throw new Error(a.message + (a.message.includes(s) ? `\n  ` + mu(u) : `\n  in CSS rule \\`${u}: ${s}\\`.${mu(u)}`));\n            }\n        }\n    }\n    if (n.backgroundImage) {\n        let { backgrounds: i } = (0, import_css_background_parser.parseElementStyle)(n);\n        n.backgroundImage = i;\n    }\n    (n.maskImage || n.WebkitMaskImage) && (n.maskImage = hu(n));\n    let r = Df(n.fontSize, t.fontSize);\n    typeof n.fontSize < \"u\" && (n.fontSize = r), n.transformOrigin && (n.transformOrigin = On(n.transformOrigin, r));\n    for(let i in n){\n        let o = n[i];\n        if (i === \"lineHeight\") typeof o == \"string\" && (o = n[i] = W(o, r, r, t, true) / r);\n        else {\n            if (typeof o == \"string\") {\n                let u = W(o, r, r, t);\n                typeof u < \"u\" && (n[i] = u), o = n[i];\n            }\n            if (typeof o == \"string\" || typeof o == \"object\") {\n                let u = bu(o);\n                u && (n[i] = u), o = n[i];\n            }\n        }\n        if (i === \"opacity\" && typeof o == \"number\" && (n.opacity = o * t.opacity), i === \"transform\") {\n            let u = o;\n            for (let s of u){\n                let a = Object.keys(s)[0], l = s[a], f = typeof l == \"string\" ? W(l, r, r, t) ?? l : l;\n                s[a] = f;\n            }\n        }\n        if (i === \"textShadowRadius\") {\n            let u = o;\n            n.textShadowRadius = u.map((s)=>W(s, r, 0, t, false));\n        }\n        if (i === \"textShadowOffset\") {\n            let u = o;\n            n.textShadowOffset = u.map(({ height: s, width: a })=>({\n                    height: W(s, r, 0, t, false),\n                    width: W(a, r, 0, t, false)\n                }));\n        }\n    }\n    return n;\n}\nfunction Df(e, t) {\n    if (typeof e == \"number\") return e;\n    try {\n        let n = new Qe(e);\n        switch(n.unit){\n            case \"em\":\n                return n.value * t;\n            case \"rem\":\n                return n.value * 16;\n        }\n    } catch  {\n        return t;\n    }\n}\nfunction gu(e) {\n    if (e.startsWith(\"hsl\")) {\n        let t = index_esm_default(e), [n, r, i] = t.values;\n        return `hsl(${[\n            n,\n            `${r}%`,\n            `${i}%`\n        ].concat(t.alpha === 1 ? [] : [\n            t.alpha\n        ]).join(\",\")})`;\n    }\n    return e;\n}\nfunction gf(e, t) {\n    return e && e.toLowerCase() !== \"currentcolor\" ? gu(e) : gu(t);\n}\nfunction bf(e, t) {\n    return e.replace(/currentcolor/gi, t);\n}\nfunction vf(e, t) {\n    return Rr(e) && (e = bf(e, t)), e;\n}\nasync function Pn(e, t, n, r, i) {\n    let o = await qe(), u = {\n        ...n,\n        ...qr(pu[t], n),\n        ...qr(r, n)\n    };\n    if (t === \"img\") {\n        let [s, a, l] = await yt(i.src);\n        if (a === void 0 && l === void 0) {\n            if (i.width === void 0 || i.height === void 0) throw new Error(\"Image size cannot be determined. Please provide the width and height of the image.\");\n            a = parseInt(i.width), l = parseInt(i.height);\n        }\n        let f = l / a, c = (u.borderLeftWidth || 0) + (u.borderRightWidth || 0) + (u.paddingLeft || 0) + (u.paddingRight || 0), d = (u.borderTopWidth || 0) + (u.borderBottomWidth || 0) + (u.paddingTop || 0) + (u.paddingBottom || 0), h = u.width || i.width, p = u.height || i.height, m = typeof h == \"number\" && typeof p == \"number\";\n        m && (h -= c, p -= d), h === void 0 && p === void 0 ? (h = \"100%\", e.setAspectRatio(1 / f)) : h === void 0 ? typeof p == \"number\" ? h = p / f : e.setAspectRatio(1 / f) : p === void 0 && (typeof h == \"number\" ? p = h * f : e.setAspectRatio(1 / f)), u.width = m ? h + c : h, u.height = m ? p + d : p, u.__src = s;\n    }\n    if (t === \"svg\") {\n        let s = i.viewBox || i.viewbox, a = vt(s), l = a ? a[3] / a[2] : null, { width: f, height: c } = i;\n        typeof f > \"u\" && c ? l == null ? f = 0 : typeof c == \"string\" && c.endsWith(\"%\") ? f = parseInt(c) / l + \"%\" : (c = W(c, n.fontSize, 1, n), f = c / l) : typeof c > \"u\" && f ? l == null ? f = 0 : typeof f == \"string\" && f.endsWith(\"%\") ? c = parseInt(f) * l + \"%\" : (f = W(f, n.fontSize, 1, n), c = f * l) : (typeof f < \"u\" && (f = W(f, n.fontSize, 1, n) || f), typeof c < \"u\" && (c = W(c, n.fontSize, 1, n) || c), f || (f = a == null ? void 0 : a[2]), c || (c = a == null ? void 0 : a[3])), !u.width && f && (u.width = f), !u.height && c && (u.height = c);\n    }\n    return e.setDisplay(ve(u.display, {\n        flex: o.DISPLAY_FLEX,\n        block: o.DISPLAY_FLEX,\n        none: o.DISPLAY_NONE,\n        \"-webkit-box\": o.DISPLAY_FLEX\n    }, o.DISPLAY_FLEX, \"display\")), e.setAlignContent(ve(u.alignContent, {\n        stretch: o.ALIGN_STRETCH,\n        center: o.ALIGN_CENTER,\n        \"flex-start\": o.ALIGN_FLEX_START,\n        \"flex-end\": o.ALIGN_FLEX_END,\n        \"space-between\": o.ALIGN_SPACE_BETWEEN,\n        \"space-around\": o.ALIGN_SPACE_AROUND,\n        baseline: o.ALIGN_BASELINE,\n        normal: o.ALIGN_AUTO\n    }, o.ALIGN_AUTO, \"alignContent\")), e.setAlignItems(ve(u.alignItems, {\n        stretch: o.ALIGN_STRETCH,\n        center: o.ALIGN_CENTER,\n        \"flex-start\": o.ALIGN_FLEX_START,\n        \"flex-end\": o.ALIGN_FLEX_END,\n        baseline: o.ALIGN_BASELINE,\n        normal: o.ALIGN_AUTO\n    }, o.ALIGN_STRETCH, \"alignItems\")), e.setAlignSelf(ve(u.alignSelf, {\n        stretch: o.ALIGN_STRETCH,\n        center: o.ALIGN_CENTER,\n        \"flex-start\": o.ALIGN_FLEX_START,\n        \"flex-end\": o.ALIGN_FLEX_END,\n        baseline: o.ALIGN_BASELINE,\n        normal: o.ALIGN_AUTO\n    }, o.ALIGN_AUTO, \"alignSelf\")), e.setJustifyContent(ve(u.justifyContent, {\n        center: o.JUSTIFY_CENTER,\n        \"flex-start\": o.JUSTIFY_FLEX_START,\n        \"flex-end\": o.JUSTIFY_FLEX_END,\n        \"space-between\": o.JUSTIFY_SPACE_BETWEEN,\n        \"space-around\": o.JUSTIFY_SPACE_AROUND\n    }, o.JUSTIFY_FLEX_START, \"justifyContent\")), e.setFlexDirection(ve(u.flexDirection, {\n        row: o.FLEX_DIRECTION_ROW,\n        column: o.FLEX_DIRECTION_COLUMN,\n        \"row-reverse\": o.FLEX_DIRECTION_ROW_REVERSE,\n        \"column-reverse\": o.FLEX_DIRECTION_COLUMN_REVERSE\n    }, o.FLEX_DIRECTION_ROW, \"flexDirection\")), e.setFlexWrap(ve(u.flexWrap, {\n        wrap: o.WRAP_WRAP,\n        nowrap: o.WRAP_NO_WRAP,\n        \"wrap-reverse\": o.WRAP_WRAP_REVERSE\n    }, o.WRAP_NO_WRAP, \"flexWrap\")), typeof u.gap < \"u\" && e.setGap(o.GUTTER_ALL, u.gap), typeof u.rowGap < \"u\" && e.setGap(o.GUTTER_ROW, u.rowGap), typeof u.columnGap < \"u\" && e.setGap(o.GUTTER_COLUMN, u.columnGap), typeof u.flexBasis < \"u\" && e.setFlexBasis(u.flexBasis), e.setFlexGrow(typeof u.flexGrow > \"u\" ? 0 : u.flexGrow), e.setFlexShrink(typeof u.flexShrink > \"u\" ? 0 : u.flexShrink), typeof u.maxHeight < \"u\" && e.setMaxHeight(u.maxHeight), typeof u.maxWidth < \"u\" && e.setMaxWidth(u.maxWidth), typeof u.minHeight < \"u\" && e.setMinHeight(u.minHeight), typeof u.minWidth < \"u\" && e.setMinWidth(u.minWidth), e.setOverflow(ve(u.overflow, {\n        visible: o.OVERFLOW_VISIBLE,\n        hidden: o.OVERFLOW_HIDDEN\n    }, o.OVERFLOW_VISIBLE, \"overflow\")), e.setMargin(o.EDGE_TOP, u.marginTop || 0), e.setMargin(o.EDGE_BOTTOM, u.marginBottom || 0), e.setMargin(o.EDGE_LEFT, u.marginLeft || 0), e.setMargin(o.EDGE_RIGHT, u.marginRight || 0), e.setBorder(o.EDGE_TOP, u.borderTopWidth || 0), e.setBorder(o.EDGE_BOTTOM, u.borderBottomWidth || 0), e.setBorder(o.EDGE_LEFT, u.borderLeftWidth || 0), e.setBorder(o.EDGE_RIGHT, u.borderRightWidth || 0), e.setPadding(o.EDGE_TOP, u.paddingTop || 0), e.setPadding(o.EDGE_BOTTOM, u.paddingBottom || 0), e.setPadding(o.EDGE_LEFT, u.paddingLeft || 0), e.setPadding(o.EDGE_RIGHT, u.paddingRight || 0), e.setPositionType(ve(u.position, {\n        absolute: o.POSITION_TYPE_ABSOLUTE,\n        relative: o.POSITION_TYPE_RELATIVE\n    }, o.POSITION_TYPE_RELATIVE, \"position\")), typeof u.top < \"u\" && e.setPosition(o.EDGE_TOP, u.top), typeof u.bottom < \"u\" && e.setPosition(o.EDGE_BOTTOM, u.bottom), typeof u.left < \"u\" && e.setPosition(o.EDGE_LEFT, u.left), typeof u.right < \"u\" && e.setPosition(o.EDGE_RIGHT, u.right), typeof u.height < \"u\" ? e.setHeight(u.height) : e.setHeightAuto(), typeof u.width < \"u\" ? e.setWidth(u.width) : e.setWidthAuto(), [\n        u,\n        Tn(u)\n    ];\n}\nvar vu = [\n    1,\n    0,\n    0,\n    1,\n    0,\n    0\n];\nfunction yf(e, t, n) {\n    let r = [\n        ...vu\n    ];\n    for (let i of e){\n        let o = Object.keys(i)[0], u = i[o];\n        if (typeof u == \"string\") if (o === \"translateX\") u = parseFloat(u) / 100 * t, i[o] = u;\n        else if (o === \"translateY\") u = parseFloat(u) / 100 * n, i[o] = u;\n        else throw new Error(`Invalid transform: \"${o}: ${u}\".`);\n        let s = u, a = [\n            ...vu\n        ];\n        switch(o){\n            case \"translateX\":\n                a[4] = s;\n                break;\n            case \"translateY\":\n                a[5] = s;\n                break;\n            case \"scale\":\n                a[0] = s, a[3] = s;\n                break;\n            case \"scaleX\":\n                a[0] = s;\n                break;\n            case \"scaleY\":\n                a[3] = s;\n                break;\n            case \"rotate\":\n                {\n                    let l = s * Math.PI / 180, f = Math.cos(l), c = Math.sin(l);\n                    a[0] = f, a[1] = c, a[2] = -c, a[3] = f;\n                    break;\n                }\n            case \"skewX\":\n                a[2] = Math.tan(s * Math.PI / 180);\n                break;\n            case \"skewY\":\n                a[1] = Math.tan(s * Math.PI / 180);\n                break;\n        }\n        r = Bt(a, r);\n    }\n    e.splice(0, e.length), e.push(...r), e.__resolved = true;\n}\nfunction Lt({ left: e, top: t, width: n, height: r }, i, o, u) {\n    let s;\n    i.__resolved || yf(i, n, r);\n    let a = i;\n    if (o) s = a;\n    else {\n        let l = (u == null ? void 0 : u.xAbsolute) ?? ((u == null ? void 0 : u.xRelative) ?? 50) * n / 100, f = (u == null ? void 0 : u.yAbsolute) ?? ((u == null ? void 0 : u.yRelative) ?? 50) * r / 100, c = e + l, d = t + f;\n        s = Bt([\n            1,\n            0,\n            0,\n            1,\n            c,\n            d\n        ], Bt(a, [\n            1,\n            0,\n            0,\n            1,\n            -c,\n            -d\n        ])), a.__parent && (s = Bt(a.__parent, s)), a.splice(0, 6, ...s);\n    }\n    return `matrix(${s.map((l)=>l.toFixed(2)).join(\",\")})`;\n}\nfunction xu({ left: e, top: t, width: n, height: r, isInheritingTransform: i }, o) {\n    let u = \"\", s = 1;\n    return o.transform && (u = Lt({\n        left: e,\n        top: t,\n        width: n,\n        height: r\n    }, o.transform, i, o.transformOrigin)), o.opacity !== void 0 && (s = +o.opacity), {\n        matrix: u,\n        opacity: s\n    };\n}\nfunction Bn({ id: e, content: t, filter: n, left: r, top: i, width: o, height: u, matrix: s, opacity: a, image: l, clipPathId: f, debug: c, shape: d, decorationShape: h }, p) {\n    let m = \"\";\n    if (c && (m = S(\"rect\", {\n        x: r,\n        y: i - u,\n        width: o,\n        height: u,\n        fill: \"transparent\",\n        stroke: \"#575eff\",\n        \"stroke-width\": 1,\n        transform: s || void 0,\n        \"clip-path\": f ? `url(#${f})` : void 0\n    })), l) {\n        let D = {\n            href: l,\n            x: r,\n            y: i,\n            width: o,\n            height: u,\n            transform: s || void 0,\n            \"clip-path\": f ? `url(#${f})` : void 0,\n            style: p.filter ? `filter:${p.filter}` : void 0\n        };\n        return [\n            (n ? `${n}<g filter=\"url(#satori_s-${e})\">` : \"\") + S(\"image\", {\n                ...D,\n                opacity: a !== 1 ? a : void 0\n            }) + (h || \"\") + (n ? \"</g>\" : \"\") + m,\n            \"\"\n        ];\n    }\n    let v = {\n        x: r,\n        y: i,\n        width: o,\n        height: u,\n        \"font-weight\": p.fontWeight,\n        \"font-style\": p.fontStyle,\n        \"font-size\": p.fontSize,\n        \"font-family\": p.fontFamily,\n        \"letter-spacing\": p.letterSpacing || void 0,\n        transform: s || void 0,\n        \"clip-path\": f ? `url(#${f})` : void 0,\n        style: p.filter ? `filter:${p.filter}` : void 0\n    };\n    return [\n        (n ? `${n}<g filter=\"url(#satori_s-${e})\">` : \"\") + S(\"text\", {\n            ...v,\n            fill: p.color,\n            opacity: a !== 1 ? a : void 0\n        }, (0, import_escape_html.default)(t)) + (h || \"\") + (n ? \"</g>\" : \"\") + m,\n        d ? S(\"text\", v, (0, import_escape_html.default)(t)) : \"\"\n    ];\n}\nfunction xf(e, t, n) {\n    return e.replace(/([MA])([0-9.-]+),([0-9.-]+)/g, function(r, i, o, u) {\n        return i + (parseFloat(o) + t) + \",\" + (parseFloat(u) + n);\n    });\n}\nvar zr = 1.1;\nfunction Fu({ id: e, width: t, height: n }, r) {\n    if (!r.shadowColor || !r.shadowOffset || typeof r.shadowRadius > \"u\") return \"\";\n    let i = r.shadowColor.length, o = \"\", u = \"\", s = 0, a = t, l = 0, f = n;\n    for(let c = 0; c < i; c++){\n        let d = r.shadowRadius[c] * r.shadowRadius[c] / 4;\n        s = Math.min(r.shadowOffset[c].width - d, s), a = Math.max(r.shadowOffset[c].width + d + t, a), l = Math.min(r.shadowOffset[c].height - d, l), f = Math.max(r.shadowOffset[c].height + d + n, f), o += S(\"feDropShadow\", {\n            dx: r.shadowOffset[c].width,\n            dy: r.shadowOffset[c].height,\n            stdDeviation: r.shadowRadius[c] / 2,\n            \"flood-color\": r.shadowColor[c],\n            \"flood-opacity\": 1,\n            ...i > 1 ? {\n                in: \"SourceGraphic\",\n                result: `satori_s-${e}-result-${c}`\n            } : {}\n        }), i > 1 && (u = S(\"feMergeNode\", {\n            in: `satori_s-${e}-result-${c}`\n        }) + u);\n    }\n    return S(\"filter\", {\n        id: `satori_s-${e}`,\n        x: (s / t * 100 * zr).toFixed(2) + \"%\",\n        y: (l / n * 100 * zr).toFixed(2) + \"%\",\n        width: ((a - s) / t * 100 * zr).toFixed(2) + \"%\",\n        height: ((f - l) / n * 100 * zr).toFixed(2) + \"%\"\n    }, o + (u ? S(\"feMerge\", {}, u) : \"\"));\n}\nfunction wu({ width: e, height: t, shape: n, opacity: r, id: i }, o) {\n    if (!o.boxShadow) return null;\n    let u = \"\", s = \"\";\n    for(let a = o.boxShadow.length - 1; a >= 0; a--){\n        let l = \"\", f = o.boxShadow[a];\n        f.spreadRadius && f.inset && (f.spreadRadius = -f.spreadRadius);\n        let c = f.blurRadius * f.blurRadius / 4 + (f.spreadRadius || 0), d = Math.min(-c - (f.inset ? f.offsetX : 0), 0), h = Math.max(c + e - (f.inset ? f.offsetX : 0), e), p = Math.min(-c - (f.inset ? f.offsetY : 0), 0), m = Math.max(c + t - (f.inset ? f.offsetY : 0), t), v = `satori_s-${i}-${a}`, D = `satori_ms-${i}-${a}`, b = f.spreadRadius ? n.replace('stroke-width=\"0\"', `stroke-width=\"${f.spreadRadius * 2}\"`) : n;\n        l += S(\"mask\", {\n            id: D,\n            maskUnits: \"userSpaceOnUse\"\n        }, S(\"rect\", {\n            x: 0,\n            y: 0,\n            width: o._viewportWidth || \"100%\",\n            height: o._viewportHeight || \"100%\",\n            fill: f.inset ? \"#000\" : \"#fff\"\n        }) + b.replace('fill=\"#fff\"', f.inset ? 'fill=\"#fff\"' : 'fill=\"#000\"').replace('stroke=\"#fff\"', \"\"));\n        let y = b.replace(/d=\"([^\"]+)\"/, (F, x)=>'d=\"' + xf(x, f.offsetX, f.offsetY) + '\"').replace(/x=\"([^\"]+)\"/, (F, x)=>'x=\"' + (parseFloat(x) + f.offsetX) + '\"').replace(/y=\"([^\"]+)\"/, (F, x)=>'y=\"' + (parseFloat(x) + f.offsetY) + '\"');\n        f.spreadRadius && f.spreadRadius < 0 && (l += S(\"mask\", {\n            id: D + \"-neg\",\n            maskUnits: \"userSpaceOnUse\"\n        }, y.replace('stroke=\"#fff\"', 'stroke=\"#000\"').replace(/stroke-width=\"[^\"]+\"/, `stroke-width=\"${-f.spreadRadius * 2}\"`))), f.spreadRadius && f.spreadRadius < 0 && (y = S(\"g\", {\n            mask: `url(#${D}-neg)`\n        }, y)), l += S(\"defs\", {}, S(\"filter\", {\n            id: v,\n            x: `${d / e * 100}%`,\n            y: `${p / t * 100}%`,\n            width: `${(h - d) / e * 100}%`,\n            height: `${(m - p) / t * 100}%`\n        }, S(\"feGaussianBlur\", {\n            stdDeviation: f.blurRadius / 2,\n            result: \"b\"\n        }) + S(\"feFlood\", {\n            \"flood-color\": f.color,\n            in: \"SourceGraphic\",\n            result: \"f\"\n        }) + S(\"feComposite\", {\n            in: \"f\",\n            in2: \"b\",\n            operator: f.inset ? \"out\" : \"in\"\n        }))) + S(\"g\", {\n            mask: `url(#${D})`,\n            filter: `url(#${v})`,\n            opacity: r\n        }, y), f.inset ? s += l : u += l;\n    }\n    return [\n        u,\n        s\n    ];\n}\nfunction In({ width: e, left: t, top: n, ascender: r, clipPathId: i }, o) {\n    let { textDecorationColor: u, textDecorationStyle: s, textDecorationLine: a, fontSize: l, color: f } = o;\n    if (!a || a === \"none\") return \"\";\n    let c = Math.max(1, l * 0.1), d = a === \"line-through\" ? n + r * 0.7 : a === \"underline\" ? n + r * 1.1 : n, h = s === \"dashed\" ? `${c * 1.2} ${c * 2}` : s === \"dotted\" ? `0 ${c * 2}` : void 0;\n    return S(\"line\", {\n        x1: t,\n        y1: d,\n        x2: t + e,\n        y2: d,\n        stroke: u || f,\n        \"stroke-width\": c,\n        \"stroke-dasharray\": h,\n        \"stroke-linecap\": s === \"dotted\" ? \"round\" : \"square\",\n        \"clip-path\": i ? `url(#${i})` : void 0\n    });\n}\nfunction Rn(e) {\n    return e = e.replace(\"U+\", \"0x\"), String.fromCodePoint(Number(e));\n}\nvar ut = Rn(\"U+0020\");\nvar Ln = Rn(\"U+0009\");\nvar xt = Rn(\"U+2026\");\nfunction Eu(e, t, n) {\n    let { fontSize: r, letterSpacing: i } = n, o = /* @__PURE__ */ new Map();\n    function u(l) {\n        if (o.has(l)) return o.get(l);\n        let f = e.measure(l, {\n            fontSize: r,\n            letterSpacing: i\n        });\n        return o.set(l, f), f;\n    }\n    function s(l) {\n        let f = 0;\n        for (let c of l)t(c) ? f += r : f += u(c);\n        return f;\n    }\n    function a(l) {\n        return s(be(l, \"grapheme\"));\n    }\n    return {\n        measureGrapheme: u,\n        measureGraphemeArray: s,\n        measureText: a\n    };\n}\nfunction Su(e, t, n) {\n    let { textTransform: r, whiteSpace: i, wordBreak: o } = t;\n    e = Ff(e, r, n);\n    let { content: u, shouldCollapseTabsAndSpaces: s, allowSoftWrap: a } = Sf(e, i), { words: l, requiredBreaks: f, allowBreakWord: c } = Ef(u, o), [d, h] = wf(t, a);\n    return {\n        words: l,\n        requiredBreaks: f,\n        allowSoftWrap: a,\n        allowBreakWord: c,\n        processedContent: u,\n        shouldCollapseTabsAndSpaces: s,\n        lineLimit: d,\n        blockEllipsis: h\n    };\n}\nfunction Ff(e, t, n) {\n    return t === \"uppercase\" ? e = e.toLocaleUpperCase(n) : t === \"lowercase\" ? e = e.toLocaleLowerCase(n) : t === \"capitalize\" && (e = be(e, \"word\", n).map((r)=>be(r, \"grapheme\", n).map((i, o)=>o === 0 ? i.toLocaleUpperCase(n) : i).join(\"\")).join(\"\")), e;\n}\nfunction wf(e, t) {\n    let { textOverflow: n, lineClamp: r, WebkitLineClamp: i, WebkitBoxOrient: o, overflow: u, display: s } = e;\n    if (s === \"block\" && r) {\n        let [a, l = xt] = Cf(r);\n        if (a) return [\n            a,\n            l\n        ];\n    }\n    return n === \"ellipsis\" && s === \"-webkit-box\" && o === \"vertical\" && ru(i) && i > 0 ? [\n        i,\n        xt\n    ] : n === \"ellipsis\" && u === \"hidden\" && !t ? [\n        1,\n        xt\n    ] : [\n        1 / 0\n    ];\n}\nfunction Ef(e, t) {\n    let n = [\n        \"break-all\",\n        \"break-word\"\n    ].includes(t), { words: r, requiredBreaks: i } = iu(e, t);\n    return {\n        words: r,\n        requiredBreaks: i,\n        allowBreakWord: n\n    };\n}\nfunction Sf(e, t) {\n    let n = [\n        \"pre\",\n        \"pre-wrap\",\n        \"pre-line\"\n    ].includes(t), r = [\n        \"normal\",\n        \"nowrap\",\n        \"pre-line\"\n    ].includes(t), i = ![\n        \"pre\",\n        \"nowrap\"\n    ].includes(t);\n    return n || (e = e.replace(/\\n/g, ut)), r && (e = e.replace(/([ ]|\\t)+/g, ut).trim()), {\n        content: e,\n        shouldCollapseTabsAndSpaces: r,\n        allowSoftWrap: i\n    };\n}\nfunction Cf(e) {\n    if (typeof e == \"number\") return [\n        e\n    ];\n    let t = /^(\\d+)\\s*\"(.*)\"$/, n = /^(\\d+)\\s*'(.*)'$/, r = t.exec(e), i = n.exec(e);\n    if (r) {\n        let o = +r[1], u = r[2];\n        return [\n            o,\n            u\n        ];\n    } else if (i) {\n        let o = +i[1], u = i[2];\n        return [\n            o,\n            u\n        ];\n    }\n    return [];\n}\nvar _f = /* @__PURE__ */ new Set([\n    Ln\n]);\nfunction kf(e) {\n    return _f.has(e);\n}\nasync function* Mn(e, t) {\n    let n = await qe(), { parentStyle: r, inheritedStyle: i, parent: o, font: u, id: s, isInheritingTransform: a, debug: l, embedFont: f, graphemeImages: c, locale: d, canLoadAdditionalAssets: h } = t, { textAlign: p, lineHeight: m, textWrap: v, fontSize: D, filter: b, tabSize: y = 8, letterSpacing: F, _inheritedBackgroundClipTextPath: x, flexShrink: k } = r, { words: B, requiredBreaks: I, allowSoftWrap: G, allowBreakWord: ue, processedContent: ae, shouldCollapseTabsAndSpaces: ie, lineLimit: N, blockEllipsis: R } = Su(e, r, d), j = Tf(n, p);\n    o.insertChild(j, o.getChildCount()), nu(k) && o.setFlexShrink(1);\n    let K = u.getEngine(D, m, r, d), ce = h ? be(ae, \"grapheme\").filter((M)=>!kf(M) && !K.has(M)) : [];\n    yield ce.map((M)=>({\n            word: M,\n            locale: d\n        })), ce.length && (K = u.getEngine(D, m, r, d));\n    function ee(M) {\n        return !!(c && c[M]);\n    }\n    let { measureGrapheme: te, measureGraphemeArray: Ae, measureText: A } = Eu(K, ee, {\n        fontSize: D,\n        letterSpacing: F\n    }), O = Rr(y) ? W(y, D, 1, r) : te(ut) * y, L = (M, J)=>{\n        if (M.length === 0) return {\n            originWidth: 0,\n            endingSpacesWidth: 0,\n            text: M\n        };\n        let { index: oe, tabCount: U } = Af(M), le = 0;\n        if (U > 0) {\n            let fe = M.slice(0, oe), se = M.slice(oe + U), Y = A(fe), Ie = Y + J;\n            le = (O === 0 ? Y : (Math.floor(Ie / O) + U) * O) + A(se);\n        } else le = A(M);\n        let H = M.trimEnd() === M ? le : A(M.trimEnd());\n        return {\n            originWidth: le,\n            endingSpacesWidth: le - H,\n            text: M\n        };\n    }, P = [], he = [], me = [], Be = [], kt = [];\n    function Dn(M) {\n        let J = 0, oe = 0, U = -1, le = 0, H = 0, fe = 0, se = 0;\n        P = [], me = [\n            0\n        ], Be = [], kt = [];\n        let Y = 0, Ie = 0;\n        for(; Y < B.length && J < N;){\n            let $ = B[Y], nt = I[Y], we = 0, { originWidth: Ve, endingSpacesWidth: Ar, text: Ye } = L($, H);\n            $ = Ye, we = Ve;\n            let Z = Ar;\n            nt && fe === 0 && (fe = K.height($));\n            let De = \",.!?:-@)>]}%#\".indexOf($[0]) < 0, Xe = !H, Or = Y && De && H + we > M + Z && G;\n            if (ue && we > M && (!H || Or || nt)) {\n                let ge = be($, \"grapheme\");\n                B.splice(Y, 1, ...ge), H > 0 && (P.push(H - Ie), he.push(se), J++, le += fe, H = 0, fe = 0, se = 0, me.push(1), U = -1), Ie = Z;\n                continue;\n            }\n            if (nt || Or) ie && $ === ut && (we = 0), P.push(H - Ie), he.push(se), J++, le += fe, H = we, fe = we ? K.height($) : 0, se = we ? K.baseline($) : 0, me.push(1), U = -1, nt || (oe = Math.max(oe, M));\n            else {\n                H += we;\n                let ge = K.height($);\n                ge > fe && (fe = ge, se = K.baseline($)), Xe && me[me.length - 1]++;\n            }\n            Xe && U++, oe = Math.max(oe, H);\n            let it = H - we;\n            if (we === 0) kt.push({\n                y: le,\n                x: it,\n                width: 0,\n                line: J,\n                lineIndex: U,\n                isImage: false\n            });\n            else {\n                let ge = be($, \"word\");\n                for(let Oe = 0; Oe < ge.length; Oe++){\n                    let ot = ge[Oe], $e = 0, At = false;\n                    ee(ot) ? ($e = D, At = true) : $e = te(ot), Be.push(ot), kt.push({\n                        y: le,\n                        x: it,\n                        width: $e,\n                        line: J,\n                        lineIndex: U,\n                        isImage: At\n                    }), it += $e;\n                }\n            }\n            Y++, Ie = Z;\n        }\n        return H && (J < N && (le += fe), J++, P.push(H), he.push(se)), {\n            width: oe,\n            height: le\n        };\n    }\n    let Er = {\n        width: 0,\n        height: 0\n    };\n    j.setMeasureFunc((M)=>{\n        let { width: J, height: oe } = Dn(M);\n        if (v === \"balance\") {\n            let le = J / 2, H = J, fe = J;\n            for(; le + 1 < H;){\n                fe = (le + H) / 2;\n                let { height: Y } = Dn(fe);\n                Y > oe ? le = fe : H = fe;\n            }\n            Dn(H);\n            let se = Math.ceil(H);\n            return Er = {\n                width: se,\n                height: oe\n            }, {\n                width: se,\n                height: oe\n            };\n        }\n        let U = Math.ceil(J);\n        return Er = {\n            width: U,\n            height: oe\n        }, {\n            width: U,\n            height: oe\n        };\n    });\n    let [El, Sl] = yield, gn = \"\", Sr = \"\", je = i._inheritedClipPathId, Mo = i._inheritedMaskId, { left: No, top: Wo, width: bn, height: Cl } = j.getComputedLayout(), Cr = o.getComputedWidth() - o.getComputedPadding(n.EDGE_LEFT) - o.getComputedPadding(n.EDGE_RIGHT) - o.getComputedBorder(n.EDGE_LEFT) - o.getComputedBorder(n.EDGE_RIGHT), pt = El + No, ht = Sl + Wo, { matrix: We, opacity: _r } = xu({\n        left: No,\n        top: Wo,\n        width: bn,\n        height: Cl,\n        isInheritingTransform: a\n    }, r), mt = \"\";\n    if (r.textShadowOffset) {\n        let { textShadowColor: M, textShadowOffset: J, textShadowRadius: oe } = r;\n        mt = Fu({\n            width: Er.width,\n            height: Er.height,\n            id: s\n        }, {\n            shadowColor: M,\n            shadowOffset: J,\n            shadowRadius: oe\n        }), mt = S(\"defs\", {}, mt);\n    }\n    let Tt = \"\", kr = \"\", $o = \"\", Tr = -1, Dt = {}, He = null, qo = 0;\n    for(let M = 0; M < Be.length; M++){\n        let J = kt[M], oe = kt[M + 1];\n        if (!J) continue;\n        let U = Be[M], le = null, H = false, fe = c ? c[U] : null, se = J.y, Y = J.x, Ie = J.width, $ = J.line;\n        if ($ === Tr) continue;\n        let nt = false;\n        if (P.length > 1) {\n            let Z = bn - P[$];\n            if (p === \"right\" || p === \"end\") Y += Z;\n            else if (p === \"center\") Y += Z / 2;\n            else if (p === \"justify\" && $ < P.length - 1) {\n                let De = me[$], Xe = De > 1 ? Z / (De - 1) : 0;\n                Y += Xe * J.lineIndex, nt = true;\n            }\n        }\n        let we = he[$], Ve = K.baseline(U), Ar = K.height(U), Ye = we - Ve;\n        if (Dt[$] || (Dt[$] = [\n            Y,\n            ht + se + Ye,\n            Ve,\n            nt ? bn : P[$]\n        ]), N !== 1 / 0) {\n            let it = function(ge, Oe) {\n                let ot = be(Oe, \"grapheme\", d), $e = \"\", At = 0;\n                for (let zo of ot){\n                    let Uo = ge + Ae([\n                        $e + zo\n                    ]);\n                    if ($e && Uo + De > Cr) break;\n                    $e += zo, At = Uo;\n                }\n                return {\n                    subset: $e,\n                    resolvedWidth: At\n                };\n            }, Z = R, De = te(R);\n            De > Cr && (Z = xt, De = te(Z));\n            let Xe = te(ut), Or = $ < P.length - 1;\n            if ($ + 1 === N && (Or || P[$] > Cr)) {\n                if (Y + Ie + De + Xe > Cr) {\n                    let { subset: ge, resolvedWidth: Oe } = it(Y, U);\n                    U = ge + Z, Tr = $, Dt[$][2] = Oe, H = true;\n                } else if (oe && oe.line !== $) if (p === \"center\") {\n                    let { subset: ge, resolvedWidth: Oe } = it(Y, U);\n                    U = ge + Z, Tr = $, Dt[$][2] = Oe, H = true;\n                } else {\n                    let ge = Be[M + 1], { subset: Oe, resolvedWidth: ot } = it(Ie + Y, ge);\n                    U = U + Oe + Z, Tr = $, Dt[$][2] = ot, H = true;\n                }\n            }\n        }\n        if (fe) se += 0;\n        else if (f) {\n            if (!U.includes(Ln) && !eu.includes(U) && Be[M + 1] && oe && !oe.isImage && se === oe.y && !H) {\n                He === null && (qo = Y), He = He === null ? U : He + U;\n                continue;\n            }\n            let Z = He === null ? U : He + U, De = He === null ? Y : qo, Xe = J.width + Y - De;\n            le = K.getSVG(Z.replace(/(\\t)+/g, \"\"), {\n                fontSize: D,\n                left: pt + De,\n                top: ht + se + Ve + Ye,\n                letterSpacing: F\n            }), He = null, l && ($o += S(\"rect\", {\n                x: pt + De,\n                y: ht + se + Ye,\n                width: Xe,\n                height: Ar,\n                fill: \"transparent\",\n                stroke: \"#575eff\",\n                \"stroke-width\": 1,\n                transform: We || void 0,\n                \"clip-path\": je ? `url(#${je})` : void 0\n            }) + S(\"line\", {\n                x1: pt + Y,\n                x2: pt + Y + J.width,\n                y1: ht + se + Ye + Ve,\n                y2: ht + se + Ye + Ve,\n                stroke: \"#14c000\",\n                \"stroke-width\": 1,\n                transform: We || void 0,\n                \"clip-path\": je ? `url(#${je})` : void 0\n            }));\n        } else se += Ve + Ye;\n        if (r.textDecorationLine) {\n            let Z = Dt[$];\n            Z && !Z[4] && (Tt += In({\n                left: pt + Z[0],\n                top: Z[1],\n                width: Z[3],\n                ascender: Z[2],\n                clipPathId: je\n            }, r), Z[4] = 1);\n        }\n        if (le !== null) kr += le + \" \";\n        else {\n            let [Z, De] = Bn({\n                content: U,\n                filter: mt,\n                id: s,\n                left: pt + Y,\n                top: ht + se,\n                width: Ie,\n                height: Ar,\n                matrix: We,\n                opacity: _r,\n                image: fe,\n                clipPathId: je,\n                debug: l,\n                shape: !!x,\n                decorationShape: Tt\n            }, r);\n            gn += Z, Sr += De, Tt = \"\";\n        }\n        if (H) break;\n    }\n    if (kr) {\n        let M = r.color !== \"transparent\" && _r !== 0 ? S(\"path\", {\n            fill: r.color,\n            d: kr,\n            transform: We || void 0,\n            opacity: _r !== 1 ? _r : void 0,\n            \"clip-path\": je ? `url(#${je})` : void 0,\n            mask: Mo ? `url(#${Mo})` : void 0,\n            style: b ? `filter:${b}` : void 0\n        }) : \"\";\n        x && (Sr = S(\"path\", {\n            d: kr,\n            transform: We || void 0\n        })), gn += (mt ? mt + S(\"g\", {\n            filter: `url(#satori_s-${s})`\n        }, M + Tt) : M + Tt) + $o;\n    }\n    return Sr && (r._inheritedBackgroundClipTextPath.value += Sr), gn;\n}\nfunction Tf(e, t) {\n    let n = e.Node.create();\n    return n.setAlignItems(e.ALIGN_BASELINE), n.setJustifyContent(ve(t, {\n        left: e.JUSTIFY_FLEX_START,\n        right: e.JUSTIFY_FLEX_END,\n        center: e.JUSTIFY_CENTER,\n        justify: e.JUSTIFY_SPACE_BETWEEN,\n        start: e.JUSTIFY_FLEX_START,\n        end: e.JUSTIFY_FLEX_END\n    }, e.JUSTIFY_FLEX_START, \"textAlign\")), n;\n}\nfunction Af(e) {\n    let t = /(\\t)+/.exec(e);\n    return t ? {\n        index: t.index,\n        tabCount: t[0].length\n    } : {\n        index: null,\n        tabCount: 0\n    };\n}\nvar Nn = Nn || {};\nvar Cu = {\n    type: \"directional\",\n    value: \"bottom\"\n};\nNn.parse = function() {\n    var e = {\n        linearGradient: /^(\\-(webkit|o|ms|moz)\\-)?(linear\\-gradient)/i,\n        repeatingLinearGradient: /^(\\-(webkit|o|ms|moz)\\-)?(repeating\\-linear\\-gradient)/i,\n        radialGradient: /^(\\-(webkit|o|ms|moz)\\-)?(radial\\-gradient)/i,\n        repeatingRadialGradient: /^(\\-(webkit|o|ms|moz)\\-)?(repeating\\-radial\\-gradient)/i,\n        sideOrCorner: /^to (left (top|bottom)|right (top|bottom)|top (left|right)|bottom (left|right)|left|right|top|bottom)/i,\n        extentKeywords: /^(closest\\-side|closest\\-corner|farthest\\-side|farthest\\-corner|contain|cover)/,\n        positionKeywords: /^(left|center|right|top|bottom)/i,\n        pixelValue: /^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))px/,\n        percentageValue: /^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))\\%/,\n        emLikeValue: /^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))(r?em|vw|vh)/,\n        angleValue: /^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))deg/,\n        zeroValue: /[0]/,\n        startCall: /^\\(/,\n        endCall: /^\\)/,\n        comma: /^,/,\n        hexColor: /^\\#([0-9a-fA-F]+)/,\n        literalColor: /^([a-zA-Z]+)/,\n        rgbColor: /^rgb/i,\n        rgbaColor: /^rgba/i,\n        number: /^(([0-9]*\\.[0-9]+)|([0-9]+\\.?))/\n    }, t = \"\";\n    function n(A) {\n        var O = new Error(t + \": \" + A);\n        throw O.source = t, O;\n    }\n    function r() {\n        var A = i();\n        return t.length > 0 && n(\"Invalid input not EOF\"), A;\n    }\n    function i() {\n        return k(o);\n    }\n    function o() {\n        return s(\"linear-gradient\", e.linearGradient, l, Cu) || s(\"repeating-linear-gradient\", e.repeatingLinearGradient, l, Cu) || s(\"radial-gradient\", e.radialGradient, h) || s(\"repeating-radial-gradient\", e.repeatingRadialGradient, h);\n    }\n    function u(A = {}) {\n        var L, P, he, me;\n        let O = {\n            ...A\n        };\n        return Object.assign(O, {\n            style: (O.style || []).length > 0 ? O.style : [\n                {\n                    type: \"extent-keyword\",\n                    value: \"farthest-corner\"\n                }\n            ],\n            at: {\n                type: \"position\",\n                value: {\n                    x: {\n                        type: \"position-keyword\",\n                        value: \"center\",\n                        ...((P = (L = O.at) == null ? void 0 : L.value) == null ? void 0 : P.x) || {}\n                    },\n                    y: {\n                        type: \"position-keyword\",\n                        value: \"center\",\n                        ...((me = (he = O.at) == null ? void 0 : he.value) == null ? void 0 : me.y) || {}\n                    }\n                }\n            }\n        }), A.value || Object.assign(O, {\n            type: \"shape\",\n            value: O.style.some((Be)=>[\n                    \"%\",\n                    \"extent-keyword\"\n                ].includes(Be.type)) ? \"ellipse\" : \"circle\"\n        }), O;\n    }\n    function s(A, O, L, P) {\n        return a(O, function(he) {\n            var me = L();\n            return me ? te(e.comma) || n(\"Missing comma before color stops\") : me = P, {\n                type: A,\n                orientation: A.endsWith(\"radial-gradient\") ? (me == null ? void 0 : me.map((Be)=>u(Be))) ?? [\n                    u()\n                ] : me,\n                colorStops: k(B)\n            };\n        });\n    }\n    function a(A, O) {\n        var L = te(A);\n        if (L) {\n            te(e.startCall) || n(\"Missing (\");\n            var P = O(L);\n            return te(e.endCall) || n(\"Missing )\"), P;\n        }\n    }\n    function l() {\n        return f() || c() || d();\n    }\n    function f() {\n        return ee(\"directional\", e.sideOrCorner, 1);\n    }\n    function c() {\n        return ee(\"angular\", e.angleValue, 1);\n    }\n    function d() {\n        return ee(\"directional\", e.zeroValue, 0);\n    }\n    function h() {\n        var A, O = p(), L;\n        return O && (A = [], A.push(O), L = t, te(e.comma) && (O = p(), O ? A.push(O) : t = L)), A;\n    }\n    function p() {\n        let A = m(), O = y();\n        if (!(!A && !O)) return {\n            ...A,\n            at: O\n        };\n    }\n    function m() {\n        let A = v() || D(), O = b() || K() || R(), L = ee(\"%\", e.percentageValue, 1);\n        if (A) return {\n            ...A,\n            style: [\n                O,\n                L\n            ].filter((P)=>P)\n        };\n        if (O) return {\n            style: [\n                O,\n                L\n            ].filter((P)=>P),\n            ...v() || D()\n        };\n    }\n    function v() {\n        return ee(\"shape\", /^(circle)/i, 0);\n    }\n    function D() {\n        return ee(\"shape\", /^(ellipse)/i, 0);\n    }\n    function b() {\n        return ee(\"extent-keyword\", e.extentKeywords, 1);\n    }\n    function y() {\n        if (ee(\"position\", /^at/, 0)) {\n            var A = F();\n            return A || n(\"Missing positioning value\"), A;\n        }\n    }\n    function F() {\n        var A = x();\n        if (A.x || A.y) return {\n            type: \"position\",\n            value: A\n        };\n    }\n    function x() {\n        return {\n            x: R(),\n            y: R()\n        };\n    }\n    function k(A) {\n        var O = A(), L = [];\n        if (O) for(L.push(O); te(e.comma);)O = A(), O ? L.push(O) : n(\"One extra comma\");\n        return L;\n    }\n    function B() {\n        var A = I();\n        return A || n(\"Expected color definition\"), A.length = R(), A;\n    }\n    function I() {\n        return ue() || ie() || ae() || G();\n    }\n    function G() {\n        return ee(\"literal\", e.literalColor, 0);\n    }\n    function ue() {\n        return ee(\"hex\", e.hexColor, 1);\n    }\n    function ae() {\n        return a(e.rgbColor, function() {\n            return {\n                type: \"rgb\",\n                value: k(N)\n            };\n        });\n    }\n    function ie() {\n        return a(e.rgbaColor, function() {\n            return {\n                type: \"rgba\",\n                value: k(N)\n            };\n        });\n    }\n    function N() {\n        return te(e.number)[1];\n    }\n    function R() {\n        return ee(\"%\", e.percentageValue, 1) || j() || K();\n    }\n    function j() {\n        return ee(\"position-keyword\", e.positionKeywords, 1);\n    }\n    function K() {\n        return ee(\"px\", e.pixelValue, 1) || ce(e.emLikeValue, 1);\n    }\n    function ce(A, O) {\n        var L = te(A);\n        if (L) return {\n            type: L[5],\n            value: L[O]\n        };\n    }\n    function ee(A, O, L) {\n        var P = te(O);\n        if (P) return {\n            type: A,\n            value: P[L]\n        };\n    }\n    function te(A) {\n        var O, L;\n        return L = /^[\\n\\r\\t\\s]+/.exec(t), L && Ae(L[0].length), O = A.exec(t), O && Ae(O[0].length), O;\n    }\n    function Ae(A) {\n        t = t.substr(A);\n    }\n    return function(A) {\n        return t = A.toString(), r();\n    };\n}();\nvar Wn = Nn;\nfunction Pf(e) {\n    return e.type === \"literal\" ? e.value : e.type === \"hex\" ? `#${e.value}` : e.type === \"rgb\" ? `rgb(${e.value.join(\",\")})` : e.type === \"rgba\" ? `rgba(${e.value.join(\",\")})` : \"transparent\";\n}\nfunction Bf(e) {\n    let t = 0, n = 0, r = 0, i = 0;\n    return e.includes(\"top\") ? n = 1 : e.includes(\"bottom\") && (i = 1), e.includes(\"left\") ? t = 1 : e.includes(\"right\") && (r = 1), !t && !r && !n && !i && (n = 1), [\n        t,\n        n,\n        r,\n        i\n    ];\n}\nfunction If(e, t) {\n    return typeof e == \"string\" && e.endsWith(\"%\") ? t * parseFloat(e) / 100 : +e;\n}\nfunction $n(e, { x: t, y: n, defaultX: r, defaultY: i }) {\n    return (e ? e.split(\" \").map((o)=>{\n        try {\n            let u = new Qe(o);\n            return u.type === \"length\" || u.type === \"number\" ? u.value : u.value + u.unit;\n        } catch  {\n            return null;\n        }\n    }).filter((o)=>o !== null) : [\n        r,\n        i\n    ]).map((o, u)=>If(o, [\n            t,\n            n\n        ][u]));\n}\nfunction _u(e, t, n) {\n    let r = [];\n    for (let s of t){\n        let a = Pf(s);\n        if (!r.length && (r.push({\n            offset: 0,\n            color: a\n        }), typeof s.length > \"u\" || s.length.value === \"0\")) continue;\n        let l = typeof s.length > \"u\" ? void 0 : s.length.type === \"%\" ? s.length.value / 100 : s.length.value / e;\n        r.push({\n            offset: l,\n            color: a\n        });\n    }\n    r.length || r.push({\n        offset: 0,\n        color: \"transparent\"\n    });\n    let i = r[r.length - 1];\n    i.offset !== 1 && (typeof i.offset > \"u\" ? i.offset = 1 : r.push({\n        offset: 1,\n        color: i.color\n    }));\n    let o = 0, u = 1;\n    for(let s = 0; s < r.length; s++)if (typeof r[s].offset > \"u\") {\n        for(u < s && (u = s); typeof r[u].offset > \"u\";)u++;\n        r[s].offset = (r[u].offset - r[o].offset) / (u - o) * (s - o) + r[o].offset;\n    } else o = s;\n    return n === \"mask\" ? r.map((s)=>{\n        let a = index_esm_default(s.color);\n        return a.alpha === 0 ? {\n            ...s,\n            color: \"rgba(0, 0, 0, 1)\"\n        } : {\n            ...s,\n            color: `rgba(255, 255, 255, ${a.alpha})`\n        };\n    }) : r;\n}\nasync function Mt({ id: e, width: t, height: n, left: r, top: i }, { image: o, size: u, position: s, repeat: a }, l, f) {\n    a = a || \"repeat\", f = f || \"background\";\n    let c = a === \"repeat-x\" || a === \"repeat\", d = a === \"repeat-y\" || a === \"repeat\", h = $n(u, {\n        x: t,\n        y: n,\n        defaultX: t,\n        defaultY: n\n    }), p = $n(s, {\n        x: t,\n        y: n,\n        defaultX: 0,\n        defaultY: 0\n    });\n    if (o.startsWith(\"linear-gradient(\")) {\n        let m = Wn.parse(o)[0], [v, D] = h, b, y, F, x, k;\n        if (m.orientation.type === \"directional\") [b, y, F, x] = Bf(m.orientation.value), k = Math.sqrt(Math.pow((F - b) * v, 2) + Math.pow((x - y) * D, 2));\n        else if (m.orientation.type === \"angular\") {\n            let N = function(R) {\n                if (R = (R % (Math.PI * 2) + Math.PI * 2) % (Math.PI * 2), Math.abs(R - Math.PI / 2) < 1e-6) {\n                    b = 0, y = 0, F = 1, x = 0, k = v;\n                    return;\n                } else if (Math.abs(R) < 1e-6) {\n                    b = 0, y = 1, F = 0, x = 0, k = D;\n                    return;\n                }\n                if (R >= Math.PI / 2 && R < Math.PI) {\n                    N(Math.PI - R), y = 1 - y, x = 1 - x;\n                    return;\n                } else if (R >= Math.PI) {\n                    N(R - Math.PI);\n                    let L = b;\n                    b = F, F = L, L = y, y = x, x = L;\n                    return;\n                }\n                let j = Math.tan(R), K = j * ie, ce = Math.atan(K), ee = Math.sqrt(2) * Math.cos(Math.PI / 4 - ce);\n                b = 0, y = 1, F = Math.sin(ce) * ee, x = 1 - Math.cos(ce) * ee;\n                let te = 1, Ae = 1 / j, A = Math.abs((te * ie + Ae) / Math.sqrt(te * te + Ae * Ae) / Math.sqrt(ie * ie + 1));\n                k = Math.sqrt(v * v + D * D) * A;\n            }, ie = v / D;\n            N(+m.orientation.value / 180 * Math.PI);\n        }\n        let B = _u(k, m.colorStops, f), I = `satori_bi${e}`, G = `satori_pattern_${e}`, ue = S(\"pattern\", {\n            id: G,\n            x: p[0] / t,\n            y: p[1] / n,\n            width: c ? v / t : \"1\",\n            height: d ? D / n : \"1\",\n            patternUnits: \"objectBoundingBox\"\n        }, S(\"linearGradient\", {\n            id: I,\n            x1: b,\n            y1: y,\n            x2: F,\n            y2: x\n        }, B.map((ae)=>S(\"stop\", {\n                offset: ae.offset * 100 + \"%\",\n                \"stop-color\": ae.color\n            })).join(\"\")) + S(\"rect\", {\n            x: 0,\n            y: 0,\n            width: v,\n            height: D,\n            fill: `url(#${I})`\n        }));\n        return [\n            G,\n            ue\n        ];\n    }\n    if (o.startsWith(\"radial-gradient(\")) {\n        let m = Wn.parse(o)[0], v = m.orientation[0], [D, b] = h, y = \"circle\", F = D / 2, x = b / 2;\n        if (v.type === \"shape\") {\n            if (y = v.value, v.at) if (v.at.type === \"position\") {\n                let N = Rf(v.at.value.x, v.at.value.y, D, b, l.fontSize, l);\n                F = N.x, x = N.y;\n            } else throw new Error(\"orientation.at.type not implemented: \" + v.at.type);\n        } else throw new Error(\"orientation.type not implemented: \" + v.type);\n        let k = _u(t, m.colorStops, f), B = `satori_radial_${e}`, I = `satori_pattern_${e}`, G = `satori_mask_${e}`, ue = Lf(y, v.style, l.fontSize, {\n            x: F,\n            y: x\n        }, [\n            D,\n            b\n        ], l), ae = S(\"pattern\", {\n            id: I,\n            x: p[0] / t,\n            y: p[1] / n,\n            width: c ? D / t : \"1\",\n            height: d ? b / n : \"1\",\n            patternUnits: \"objectBoundingBox\"\n        }, S(\"radialGradient\", {\n            id: B\n        }, k.map((N)=>S(\"stop\", {\n                offset: N.offset,\n                \"stop-color\": N.color\n            })).join(\"\")) + S(\"mask\", {\n            id: G\n        }, S(\"rect\", {\n            x: 0,\n            y: 0,\n            width: D,\n            height: b,\n            fill: \"#fff\"\n        })) + S(\"rect\", {\n            x: 0,\n            y: 0,\n            width: D,\n            height: b,\n            fill: k.at(-1).color\n        }) + S(y, {\n            cx: F,\n            cy: x,\n            width: D,\n            height: b,\n            ...ue,\n            fill: `url(#${B})`,\n            mask: `url(#${G})`\n        }));\n        return [\n            I,\n            ae\n        ];\n    }\n    if (o.startsWith(\"url(\")) {\n        let m = $n(u, {\n            x: t,\n            y: n,\n            defaultX: 0,\n            defaultY: 0\n        }), [v, D, b] = await yt(o.slice(4, -1)), y = f === \"mask\" ? D || m[0] : m[0] || D, F = f === \"mask\" ? b || m[1] : m[1] || b;\n        return [\n            `satori_bi${e}`,\n            S(\"pattern\", {\n                id: `satori_bi${e}`,\n                patternContentUnits: \"userSpaceOnUse\",\n                patternUnits: \"userSpaceOnUse\",\n                x: p[0] + r,\n                y: p[1] + i,\n                width: c ? y : \"100%\",\n                height: d ? F : \"100%\"\n            }, S(\"image\", {\n                x: 0,\n                y: 0,\n                width: y,\n                height: F,\n                preserveAspectRatio: \"none\",\n                href: v\n            }))\n        ];\n    }\n    throw new Error(`Invalid background image: \"${o}\"`);\n}\nfunction Rf(e, t, n, r, i, o) {\n    let u = {\n        x: n / 2,\n        y: r / 2\n    };\n    return e.type === \"position-keyword\" ? Object.assign(u, ku(e.value, n, r, \"x\")) : u.x = W(`${e.value}${e.type}`, i, n, o, true), t.type === \"position-keyword\" ? Object.assign(u, ku(t.value, n, r, \"y\")) : u.y = W(`${t.value}${t.type}`, i, r, o, true), u;\n}\nfunction ku(e, t, n, r) {\n    switch(e){\n        case \"center\":\n            return {\n                [r]: r === \"x\" ? t / 2 : n / 2\n            };\n        case \"left\":\n            return {\n                x: 0\n            };\n        case \"top\":\n            return {\n                y: 0\n            };\n        case \"right\":\n            return {\n                x: t\n            };\n        case \"bottom\":\n            return {\n                y: n\n            };\n    }\n}\nfunction Lf(e, t, n, r, i, o) {\n    let [u, s] = i, { x: a, y: l } = r, f = {}, c = 0, d = 0;\n    if (!t.some((p)=>p.type === \"extent-keyword\")) {\n        if (t.some((p)=>p.value.startsWith(\"-\"))) throw new Error(\"disallow setting negative values to the size of the shape. Check https://w3c.github.io/csswg-drafts/css-images/#valdef-rg-size-length-0\");\n        return e === \"circle\" ? {\n            r: W(`${t[0].value}${t[0].type}`, n, u, o, true)\n        } : {\n            rx: W(`${t[0].value}${t[0].type}`, n, u, o, true),\n            ry: W(`${t[1].value}${t[1].type}`, n, s, o, true)\n        };\n    }\n    switch(t[0].value){\n        case \"farthest-corner\":\n            c = Math.max(Math.abs(u - a), Math.abs(a)), d = Math.max(Math.abs(s - l), Math.abs(l));\n            break;\n        case \"closest-corner\":\n            c = Math.min(Math.abs(u - a), Math.abs(a)), d = Math.min(Math.abs(s - l), Math.abs(l));\n            break;\n        case \"farthest-side\":\n            return e === \"circle\" ? f.r = Math.max(Math.abs(u - a), Math.abs(a), Math.abs(s - l), Math.abs(l)) : (f.rx = Math.max(Math.abs(u - a), Math.abs(a)), f.ry = Math.max(Math.abs(s - l), Math.abs(l))), f;\n        case \"closest-side\":\n            return e === \"circle\" ? f.r = Math.min(Math.abs(u - a), Math.abs(a), Math.abs(s - l), Math.abs(l)) : (f.rx = Math.min(Math.abs(u - a), Math.abs(a)), f.ry = Math.min(Math.abs(s - l), Math.abs(l))), f;\n    }\n    if (e === \"circle\") f.r = Math.sqrt(c * c + d * d);\n    else {\n        let p = d !== 0 ? c / d : 1;\n        c === 0 ? (f.rx = 0, f.ry = 0) : (f.ry = Math.sqrt(c * c + d * d * p * p) / p, f.rx = f.ry * p);\n    }\n    return f;\n}\nfunction Mf([e, t]) {\n    return Math.round(e * 1e3) === 0 && Math.round(t * 1e3) === 0 ? 0 : Math.round(e * t / Math.sqrt(e * e + t * t) * 1e3) / 1e3;\n}\nfunction Ur(e, t, n) {\n    return n < e + t && (n / 2 < e && n / 2 < t ? e = t = n / 2 : n / 2 < e ? e = n - t : n / 2 < t && (t = n - e)), [\n        e,\n        t\n    ];\n}\nfunction Gr(e) {\n    e[0] = e[1] = Math.min(e[0], e[1]);\n}\nfunction jr(e, t, n, r, i) {\n    if (typeof e == \"string\") {\n        let o = e.split(\" \").map((s)=>s.trim()), u = !o[1] && !o[0].endsWith(\"%\");\n        return o[1] = o[1] || o[0], [\n            u,\n            [\n                Math.min(W(o[0], r, t, i, true), t),\n                Math.min(W(o[1], r, n, i, true), n)\n            ]\n        ];\n    }\n    return typeof e == \"number\" ? [\n        true,\n        [\n            Math.min(e, t),\n            Math.min(e, n)\n        ]\n    ] : [\n        true,\n        void 0\n    ];\n}\nvar Hr = (e)=>e && e[0] !== 0 && e[1] !== 0;\nfunction Je({ left: e, top: t, width: n, height: r }, i, o) {\n    let { borderTopLeftRadius: u, borderTopRightRadius: s, borderBottomLeftRadius: a, borderBottomRightRadius: l, fontSize: f } = i, c, d, h, p;\n    if ([c, u] = jr(u, n, r, f, i), [d, s] = jr(s, n, r, f, i), [h, a] = jr(a, n, r, f, i), [p, l] = jr(l, n, r, f, i), !o && !Hr(u) && !Hr(s) && !Hr(a) && !Hr(l)) return \"\";\n    u || (u = [\n        0,\n        0\n    ]), s || (s = [\n        0,\n        0\n    ]), a || (a = [\n        0,\n        0\n    ]), l || (l = [\n        0,\n        0\n    ]), [u[0], s[0]] = Ur(u[0], s[0], n), [a[0], l[0]] = Ur(a[0], l[0], n), [u[1], a[1]] = Ur(u[1], a[1], r), [s[1], l[1]] = Ur(s[1], l[1], r), c && Gr(u), d && Gr(s), h && Gr(a), p && Gr(l);\n    let m = [];\n    m[0] = [\n        s,\n        s\n    ], m[1] = [\n        l,\n        [\n            -l[0],\n            l[1]\n        ]\n    ], m[2] = [\n        a,\n        [\n            -a[0],\n            -a[1]\n        ]\n    ], m[3] = [\n        u,\n        [\n            u[0],\n            -u[1]\n        ]\n    ];\n    let v = `h${n - u[0] - s[0]} a${m[0][0]} 0 0 1 ${m[0][1]}`, D = `v${r - s[1] - l[1]} a${m[1][0]} 0 0 1 ${m[1][1]}`, b = `h${l[0] + a[0] - n} a${m[2][0]} 0 0 1 ${m[2][1]}`, y = `v${a[1] + u[1] - r} a${m[3][0]} 0 0 1 ${m[3][1]}`;\n    if (o) {\n        let x = function(ie) {\n            let N = Mf([\n                u,\n                s,\n                l,\n                a\n            ][ie]);\n            return ie === 0 ? [\n                [\n                    e + u[0] - N,\n                    t + u[1] - N\n                ],\n                [\n                    e + u[0],\n                    t\n                ]\n            ] : ie === 1 ? [\n                [\n                    e + n - s[0] + N,\n                    t + s[1] - N\n                ],\n                [\n                    e + n,\n                    t + s[1]\n                ]\n            ] : ie === 2 ? [\n                [\n                    e + n - l[0] + N,\n                    t + r - l[1] + N\n                ],\n                [\n                    e + n - l[0],\n                    t + r\n                ]\n            ] : [\n                [\n                    e + a[0] - N,\n                    t + r - a[1] + N\n                ],\n                [\n                    e,\n                    t + r - a[1]\n                ]\n            ];\n        }, F = o.indexOf(false);\n        if (!o.includes(true)) throw new Error(\"Invalid `partialSides`.\");\n        if (F === -1) F = 0;\n        else for(; !o[F];)F = (F + 1) % 4;\n        let k = \"\", B = x(F), I = `M${B[0]} A${m[(F + 3) % 4][0]} 0 0 1 ${B[1]}`, G = 0;\n        for(; G < 4 && o[(F + G) % 4]; G++)k += I + \" \", I = [\n            v,\n            D,\n            b,\n            y\n        ][(F + G) % 4];\n        let ue = (F + G) % 4;\n        k += I.split(\" \")[0];\n        let ae = x(ue);\n        return k += ` A${m[(ue + 3) % 4][0]} 0 0 1 ${ae[0]}`, k;\n    }\n    return `M${e + u[0]},${t} ${v} ${D} ${b} ${y}`;\n}\nfunction Tu(e, t, n) {\n    return n[e + \"Width\"] === n[t + \"Width\"] && n[e + \"Style\"] === n[t + \"Style\"] && n[e + \"Color\"] === n[t + \"Color\"];\n}\nfunction Au({ id: e, currentClipPathId: t, borderPath: n, borderType: r, left: i, top: o, width: u, height: s }, a) {\n    if (!(a.borderTopWidth || a.borderRightWidth || a.borderBottomWidth || a.borderLeftWidth)) return null;\n    let f = `satori_bc-${e}`;\n    return [\n        S(\"clipPath\", {\n            id: f,\n            \"clip-path\": t ? `url(#${t})` : void 0\n        }, S(r, {\n            x: i,\n            y: o,\n            width: u,\n            height: s,\n            d: n || void 0\n        })),\n        f\n    ];\n}\nfunction Nt({ left: e, top: t, width: n, height: r, props: i, asContentMask: o, maskBorderOnly: u }, s) {\n    let a = [\n        \"borderTop\",\n        \"borderRight\",\n        \"borderBottom\",\n        \"borderLeft\"\n    ];\n    if (!o && !a.some((h)=>s[h + \"Width\"])) return \"\";\n    let l = \"\", f = 0;\n    for(; f > 0 && Tu(a[f], a[(f + 3) % 4], s);)f = (f + 3) % 4;\n    let c = [\n        false,\n        false,\n        false,\n        false\n    ], d = [];\n    for(let h = 0; h < 4; h++){\n        let p = (f + h) % 4, m = (f + h + 1) % 4, v = a[p], D = a[m];\n        if (c[p] = true, d = [\n            s[v + \"Width\"],\n            s[v + \"Style\"],\n            s[v + \"Color\"],\n            v\n        ], !Tu(v, D, s)) {\n            let b = (d[0] || 0) + (o && !u && s[v.replace(\"border\", \"padding\")] || 0);\n            b && (l += S(\"path\", {\n                width: n,\n                height: r,\n                ...i,\n                fill: \"none\",\n                stroke: o ? \"#000\" : d[2],\n                \"stroke-width\": b * 2,\n                \"stroke-dasharray\": !o && d[1] === \"dashed\" ? b * 2 + \" \" + b : void 0,\n                d: Je({\n                    left: e,\n                    top: t,\n                    width: n,\n                    height: r\n                }, s, c)\n            })), c = [\n                false,\n                false,\n                false,\n                false\n            ];\n        }\n    }\n    if (c.some(Boolean)) {\n        let h = (d[0] || 0) + (o && !u && s[d[3].replace(\"border\", \"padding\")] || 0);\n        h && (l += S(\"path\", {\n            width: n,\n            height: r,\n            ...i,\n            fill: \"none\",\n            stroke: o ? \"#000\" : d[2],\n            \"stroke-width\": h * 2,\n            \"stroke-dasharray\": !o && d[1] === \"dashed\" ? h * 2 + \" \" + h : void 0,\n            d: Je({\n                left: e,\n                top: t,\n                width: n,\n                height: r\n            }, s, c)\n        }));\n    }\n    return l;\n}\nfunction qn({ id: e, left: t, top: n, width: r, height: i, matrix: o, borderOnly: u }, s) {\n    let a = (s.borderLeftWidth || 0) + (u ? 0 : s.paddingLeft || 0), l = (s.borderTopWidth || 0) + (u ? 0 : s.paddingTop || 0), f = (s.borderRightWidth || 0) + (u ? 0 : s.paddingRight || 0), c = (s.borderBottomWidth || 0) + (u ? 0 : s.paddingBottom || 0), d = {\n        x: t + a,\n        y: n + l,\n        width: r - a - f,\n        height: i - l - c\n    };\n    return S(\"mask\", {\n        id: e\n    }, S(\"rect\", {\n        ...d,\n        fill: \"#fff\",\n        mask: s._inheritedMaskId ? `url(#${s._inheritedMaskId})` : void 0\n    }) + Nt({\n        left: t,\n        top: n,\n        width: r,\n        height: i,\n        props: {\n            transform: o || void 0\n        },\n        asContentMask: true,\n        maskBorderOnly: u\n    }, s));\n}\nvar Wt = {\n    circle: /circle\\((.+)\\)/,\n    ellipse: /ellipse\\((.+)\\)/,\n    path: /path\\((.+)\\)/,\n    polygon: /polygon\\((.+)\\)/,\n    inset: /inset\\((.+)\\)/\n};\nfunction Iu({ width: e, height: t }, n, r) {\n    function i(l) {\n        let f = l.match(Wt.circle);\n        if (!f) return null;\n        let [, c] = f, [d, h = \"\"] = c.split(\"at\").map((v)=>v.trim()), { x: p, y: m } = Bu(h, e, t);\n        return {\n            type: \"circle\",\n            r: W(d, r.fontSize, Math.sqrt(Math.pow(e, 2) + Math.pow(t, 2)) / Math.sqrt(2), r, true),\n            cx: W(p, r.fontSize, e, r, true),\n            cy: W(m, r.fontSize, t, r, true)\n        };\n    }\n    function o(l) {\n        let f = l.match(Wt.ellipse);\n        if (!f) return null;\n        let [, c] = f, [d, h = \"\"] = c.split(\"at\").map((b)=>b.trim()), [p, m] = d.split(\" \"), { x: v, y: D } = Bu(h, e, t);\n        return {\n            type: \"ellipse\",\n            rx: W(p || \"50%\", r.fontSize, e, r, true),\n            ry: W(m || \"50%\", r.fontSize, t, r, true),\n            cx: W(v, r.fontSize, e, r, true),\n            cy: W(D, r.fontSize, t, r, true)\n        };\n    }\n    function u(l) {\n        let f = l.match(Wt.path);\n        if (!f) return null;\n        let [c, d] = Pu(f[1]);\n        return {\n            type: \"path\",\n            d,\n            \"fill-rule\": c\n        };\n    }\n    function s(l) {\n        let f = l.match(Wt.polygon);\n        if (!f) return null;\n        let [c, d] = Pu(f[1]);\n        return {\n            type: \"polygon\",\n            \"fill-rule\": c,\n            points: d.split(\",\").map((h)=>h.split(\" \").map((p, m)=>W(p, r.fontSize, m === 0 ? e : t, r, true)).join(\" \")).join(\",\")\n        };\n    }\n    function a(l) {\n        let f = l.match(Wt.inset);\n        if (!f) return null;\n        let [c, d] = (f[1].includes(\"round\") ? f[1] : `${f[1].trim()} round 0`).split(\"round\"), h = (0, import_css_to_react_native3.getStylesForProperty)(\"borderRadius\", d, true), p = Object.values(h).map((F)=>String(F)).map((F, x)=>W(F, r.fontSize, x === 0 || x === 2 ? t : e, r, true) || 0), m = Object.values((0, import_css_to_react_native3.getStylesForProperty)(\"margin\", c, true)).map((F)=>String(F)).map((F, x)=>W(F, r.fontSize, x === 0 || x === 2 ? t : e, r, true) || 0), v = m[3], D = m[0], b = e - (m[1] + m[3]), y = t - (m[0] + m[2]);\n        return p.some((F)=>F > 0) ? {\n            type: \"path\",\n            d: Je({\n                left: v,\n                top: D,\n                width: b,\n                height: y\n            }, {\n                ...n,\n                ...h\n            })\n        } : {\n            type: \"rect\",\n            x: v,\n            y: D,\n            width: b,\n            height: y\n        };\n    }\n    return {\n        parseCircle: i,\n        parseEllipse: o,\n        parsePath: u,\n        parsePolygon: s,\n        parseInset: a\n    };\n}\nfunction Pu(e) {\n    let [, t = \"nonzero\", n] = e.replace(/('|\")/g, \"\").match(/^(nonzero|evenodd)?,?(.+)/) || [];\n    return [\n        t,\n        n\n    ];\n}\nfunction Bu(e, t, n) {\n    let r = e.split(\" \"), i = {\n        x: r[0] || \"50%\",\n        y: r[1] || \"50%\"\n    };\n    return r.forEach((o)=>{\n        o === \"top\" ? i.y = 0 : o === \"bottom\" ? i.y = n : o === \"left\" ? i.x = 0 : o === \"right\" ? i.x = t : o === \"center\" && (i.x = t / 2, i.y = n / 2);\n    }), i;\n}\nfunction Vr(e) {\n    return `satori_cp-${e}`;\n}\nfunction Ru(e) {\n    return `url(#${Vr(e)})`;\n}\nfunction Lu(e, t, n) {\n    if (t.clipPath === \"none\") return \"\";\n    let r = Iu(e, t, n), i = t.clipPath, o = {\n        type: \"\"\n    };\n    for (let u of Object.keys(r))if (o = r[u](i), o) break;\n    if (o) {\n        let { type: u, ...s } = o;\n        return S(\"clipPath\", {\n            id: Vr(e.id),\n            \"clip-path\": e.currentClipPath,\n            transform: `translate(${e.left}, ${e.top})`\n        }, S(u, s));\n    }\n    return \"\";\n}\nfunction zn({ left: e, top: t, width: n, height: r, path: i, matrix: o, id: u, currentClipPath: s, src: a }, l, f) {\n    let c = \"\", d = l.clipPath && l.clipPath !== \"none\" ? Lu({\n        left: e,\n        top: t,\n        width: n,\n        height: r,\n        path: i,\n        id: u,\n        matrix: o,\n        currentClipPath: s,\n        src: a\n    }, l, f) : \"\";\n    if (l.overflow !== \"hidden\" && !a) c = \"\";\n    else {\n        let p = d ? `satori_ocp-${u}` : Vr(u);\n        c = S(\"clipPath\", {\n            id: p,\n            \"clip-path\": s\n        }, S(i ? \"path\" : \"rect\", {\n            x: e,\n            y: t,\n            width: n,\n            height: r,\n            d: i || void 0\n        }));\n    }\n    let h = qn({\n        id: `satori_om-${u}`,\n        left: e,\n        top: t,\n        width: n,\n        height: r,\n        matrix: o,\n        borderOnly: !a\n    }, l);\n    return d + c + h;\n}\nvar Nf = (e)=>`satori_mi-${e}`;\nasync function Un(e, t, n) {\n    if (!t.maskImage) return [\n        \"\",\n        \"\"\n    ];\n    let { left: r, top: i, width: o, height: u, id: s } = e, a = t.maskImage, l = a.length;\n    if (!l) return [\n        \"\",\n        \"\"\n    ];\n    let f = Nf(s), c = \"\";\n    for(let d = 0; d < l; d++){\n        let h = a[d], [p, m] = await Mt({\n            id: `${f}-${d}`,\n            left: r,\n            top: i,\n            width: o,\n            height: u\n        }, h, n, \"mask\");\n        c += m + S(\"rect\", {\n            x: 0,\n            y: 0,\n            width: o,\n            height: u,\n            fill: `url(#${p})`\n        });\n    }\n    return c = S(\"mask\", {\n        id: f\n    }, c), [\n        f,\n        c\n    ];\n}\nasync function $t({ id: e, left: t, top: n, width: r, height: i, isInheritingTransform: o, src: u, debug: s }, a, l) {\n    if (a.display === \"none\") return \"\";\n    let f = !!u, c = \"rect\", d = \"\", h = \"\", p = [], m = 1, v = \"\";\n    a.backgroundColor && p.push(a.backgroundColor), a.opacity !== void 0 && (m = +a.opacity), a.transform && (d = Lt({\n        left: t,\n        top: n,\n        width: r,\n        height: i\n    }, a.transform, o, a.transformOrigin));\n    let D = \"\";\n    if (a.backgroundImage) {\n        let R = [];\n        for(let j = 0; j < a.backgroundImage.length; j++){\n            let K = a.backgroundImage[j], ce = await Mt({\n                id: e + \"_\" + j,\n                width: r,\n                height: i,\n                left: t,\n                top: n\n            }, K, l);\n            ce && R.unshift(ce);\n        }\n        for (let j of R)p.push(`url(#${j[0]})`), h += j[1], j[2] && (D += j[2]);\n    }\n    let [b, y] = await Un({\n        id: e,\n        left: t,\n        top: n,\n        width: r,\n        height: i\n    }, a, l);\n    h += y;\n    let F = b ? `url(#${b})` : a._inheritedMaskId ? `url(#${a._inheritedMaskId})` : void 0, x = Je({\n        left: t,\n        top: n,\n        width: r,\n        height: i\n    }, a);\n    x && (c = \"path\");\n    let k = a._inheritedClipPathId;\n    s && (v = S(\"rect\", {\n        x: t,\n        y: n,\n        width: r,\n        height: i,\n        fill: \"transparent\",\n        stroke: \"#ff5757\",\n        \"stroke-width\": 1,\n        transform: d || void 0,\n        \"clip-path\": k ? `url(#${k})` : void 0\n    }));\n    let { backgroundClip: B, filter: I } = a, G = B === \"text\" ? `url(#satori_bct-${e})` : k ? `url(#${k})` : a.clipPath ? Ru(e) : void 0, ue = zn({\n        left: t,\n        top: n,\n        width: r,\n        height: i,\n        path: x,\n        id: e,\n        matrix: d,\n        currentClipPath: G,\n        src: u\n    }, a, l), ae = p.map((R)=>S(c, {\n            x: t,\n            y: n,\n            width: r,\n            height: i,\n            fill: R,\n            d: x || void 0,\n            transform: d || void 0,\n            \"clip-path\": G,\n            style: I ? `filter:${I}` : void 0,\n            mask: F\n        })).join(\"\"), ie = Au({\n        id: e,\n        left: t,\n        top: n,\n        width: r,\n        height: i,\n        currentClipPathId: k,\n        borderPath: x,\n        borderType: c\n    }, a);\n    if (f) {\n        let R = (a.borderLeftWidth || 0) + (a.paddingLeft || 0), j = (a.borderTopWidth || 0) + (a.paddingTop || 0), K = (a.borderRightWidth || 0) + (a.paddingRight || 0), ce = (a.borderBottomWidth || 0) + (a.paddingBottom || 0), ee = a.objectFit === \"contain\" ? \"xMidYMid\" : a.objectFit === \"cover\" ? \"xMidYMid slice\" : \"none\";\n        ae += S(\"image\", {\n            x: t + R,\n            y: n + j,\n            width: r - R - K,\n            height: i - j - ce,\n            href: u,\n            preserveAspectRatio: ee,\n            transform: d || void 0,\n            style: I ? `filter:${I}` : void 0,\n            \"clip-path\": `url(#satori_cp-${e})`,\n            mask: b ? `url(#${b})` : `url(#satori_om-${e})`\n        });\n    }\n    if (ie) {\n        h += ie[0];\n        let R = ie[1];\n        ae += Nt({\n            left: t,\n            top: n,\n            width: r,\n            height: i,\n            props: {\n                transform: d || void 0,\n                \"clip-path\": `url(#${R})`\n            }\n        }, a);\n    }\n    let N = wu({\n        width: r,\n        height: i,\n        id: e,\n        opacity: m,\n        shape: S(c, {\n            x: t,\n            y: n,\n            width: r,\n            height: i,\n            fill: \"#fff\",\n            stroke: \"#fff\",\n            \"stroke-width\": 0,\n            d: x || void 0,\n            transform: d || void 0,\n            \"clip-path\": G,\n            mask: F\n        })\n    }, a);\n    return (h ? S(\"defs\", {}, h) : \"\") + (N ? N[0] : \"\") + ue + (m !== 1 ? `<g opacity=\"${m}\">` : \"\") + (D || ae) + (m !== 1 ? \"</g>\" : \"\") + (N ? N[1] : \"\") + v;\n}\nvar Mu = ()=>/[#*0-9]\\uFE0F?\\u20E3|[\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23ED-\\u23EF\\u23F1\\u23F2\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB\\u25FC\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692\\u2694-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A7\\u26AA\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C8\\u26CF\\u26D1\\u26D3\\u26E9\\u26F0-\\u26F5\\u26F7\\u26F8\\u26FA\\u2702\\u2708\\u2709\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2733\\u2734\\u2744\\u2747\\u2757\\u2763\\u27A1\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B55\\u3030\\u303D\\u3297\\u3299]\\uFE0F?|[\\u261D\\u270C\\u270D](?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?|[\\u270A\\u270B](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u2693\\u26A1\\u26AB\\u26C5\\u26CE\\u26D4\\u26EA\\u26FD\\u2705\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2795-\\u2797\\u27B0\\u27BF\\u2B50]|\\u26F9(?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|\\u2764\\uFE0F?(?:\\u200D(?:\\uD83D\\uDD25|\\uD83E\\uDE79))?|\\uD83C(?:[\\uDC04\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDE02\\uDE37\\uDF21\\uDF24-\\uDF2C\\uDF36\\uDF7D\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E\\uDF9F\\uDFCD\\uDFCE\\uDFD4-\\uDFDF\\uDFF5\\uDFF7]\\uFE0F?|[\\uDF85\\uDFC2\\uDFC7](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDFC3\\uDFC4\\uDFCA](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDFCB\\uDFCC](?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF84\\uDF86-\\uDF93\\uDFA0-\\uDFC1\\uDFC5\\uDFC6\\uDFC8\\uDFC9\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF8-\\uDFFF]|\\uDDE6\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF]|\\uDDE7\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF]|\\uDDE8\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF]|\\uDDE9\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF]|\\uDDEA\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA]|\\uDDEB\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7]|\\uDDEC\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE]|\\uDDED\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA]|\\uDDEE\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9]|\\uDDEF\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5]|\\uDDF0\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF]|\\uDDF1\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE]|\\uDDF2\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF]|\\uDDF3\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF]|\\uDDF4\\uD83C\\uDDF2|\\uDDF5\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE]|\\uDDF6\\uD83C\\uDDE6|\\uDDF7\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC]|\\uDDF8\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF]|\\uDDF9\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF]|\\uDDFA\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF]|\\uDDFB\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA]|\\uDDFC\\uD83C[\\uDDEB\\uDDF8]|\\uDDFD\\uD83C\\uDDF0|\\uDDFE\\uD83C[\\uDDEA\\uDDF9]|\\uDDFF\\uD83C[\\uDDE6\\uDDF2\\uDDFC]|\\uDFF3\\uFE0F?(?:\\u200D(?:\\u26A7\\uFE0F?|\\uD83C\\uDF08))?|\\uDFF4(?:\\u200D\\u2620\\uFE0F?|\\uDB40\\uDC67\\uDB40\\uDC62\\uDB40(?:\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67|\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73)\\uDB40\\uDC7F)?)|\\uD83D(?:[\\uDC08\\uDC26](?:\\u200D\\u2B1B)?|[\\uDC3F\\uDCFD\\uDD49\\uDD4A\\uDD6F\\uDD70\\uDD73\\uDD76-\\uDD79\\uDD87\\uDD8A-\\uDD8D\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA\\uDECB\\uDECD-\\uDECF\\uDEE0-\\uDEE5\\uDEE9\\uDEF0\\uDEF3]\\uFE0F?|[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDC8F\\uDC91\\uDCAA\\uDD7A\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDC6E\\uDC70\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDD74\\uDD90](?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDC00-\\uDC07\\uDC09-\\uDC14\\uDC16-\\uDC25\\uDC27-\\uDC3A\\uDC3C-\\uDC3E\\uDC40\\uDC44\\uDC45\\uDC51-\\uDC65\\uDC6A\\uDC79-\\uDC7B\\uDC7D-\\uDC80\\uDC84\\uDC88-\\uDC8E\\uDC90\\uDC92-\\uDCA9\\uDCAB-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDDA4\\uDDFB-\\uDE2D\\uDE2F-\\uDE34\\uDE37-\\uDE44\\uDE48-\\uDE4A\\uDE80-\\uDEA2\\uDEA4-\\uDEB3\\uDEB7-\\uDEBF\\uDEC1-\\uDEC5\\uDED0-\\uDED2\\uDED5-\\uDED7\\uDEDC-\\uDEDF\\uDEEB\\uDEEC\\uDEF4-\\uDEFC\\uDFE0-\\uDFEB\\uDFF0]|\\uDC15(?:\\u200D\\uD83E\\uDDBA)?|\\uDC3B(?:\\u200D\\u2744\\uFE0F?)?|\\uDC41\\uFE0F?(?:\\u200D\\uD83D\\uDDE8\\uFE0F?)?|\\uDC68(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D(?:[\\uDC68\\uDC69]\\u200D\\uD83D(?:\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?)|[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?)|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C(?:\\uDFFB(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFC-\\uDFFF])))?|\\uDFFC(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])))?|\\uDFFD(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])))?|\\uDFFE(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])))?|\\uDFFF(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB-\\uDFFE])))?))?|\\uDC69(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?[\\uDC68\\uDC69]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D(?:[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?|\\uDC69\\u200D\\uD83D(?:\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?))|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C(?:\\uDFFB(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFC-\\uDFFF])))?|\\uDFFC(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])))?|\\uDFFD(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])))?|\\uDFFE(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])))?|\\uDFFF(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB-\\uDFFE])))?))?|\\uDC6F(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|\\uDD75(?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|\\uDE2E(?:\\u200D\\uD83D\\uDCA8)?|\\uDE35(?:\\u200D\\uD83D\\uDCAB)?|\\uDE36(?:\\u200D\\uD83C\\uDF2B\\uFE0F?)?)|\\uD83E(?:[\\uDD0C\\uDD0F\\uDD18-\\uDD1F\\uDD30-\\uDD34\\uDD36\\uDD77\\uDDB5\\uDDB6\\uDDBB\\uDDD2\\uDDD3\\uDDD5\\uDEC3-\\uDEC5\\uDEF0\\uDEF2-\\uDEF8](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDD26\\uDD35\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD4\\uDDD6-\\uDDDD](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDDDE\\uDDDF](?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDD0D\\uDD0E\\uDD10-\\uDD17\\uDD20-\\uDD25\\uDD27-\\uDD2F\\uDD3A\\uDD3F-\\uDD45\\uDD47-\\uDD76\\uDD78-\\uDDB4\\uDDB7\\uDDBA\\uDDBC-\\uDDCC\\uDDD0\\uDDE0-\\uDDFF\\uDE70-\\uDE7C\\uDE80-\\uDE88\\uDE90-\\uDEBD\\uDEBF-\\uDEC2\\uDECE-\\uDEDB\\uDEE0-\\uDEE8]|\\uDD3C(?:\\u200D[\\u2640\\u2642]\\uFE0F?|\\uD83C[\\uDFFB-\\uDFFF])?|\\uDDD1(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1))|\\uD83C(?:\\uDFFB(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFC-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFC(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB\\uDFFD-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFD(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFE(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFD\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFF(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFE]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?))?|\\uDEF1(?:\\uD83C(?:\\uDFFB(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFC-\\uDFFF])?|\\uDFFC(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])?|\\uDFFD(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])?|\\uDFFE(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])?|\\uDFFF(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB-\\uDFFE])?))?)/g;\nvar Wf = new RegExp(Mu(), \"\");\nvar Gn = {\n    emoji: Wf,\n    symbol: /\\p{Symbol}/u,\n    math: /\\p{Math}/u\n};\nvar jn = {\n    \"ja-JP\": /\\p{scx=Hira}|\\p{scx=Kana}|\\p{scx=Han}|[\\u3000]|[\\uFF00-\\uFFEF]/u,\n    \"ko-KR\": /\\p{scx=Hangul}/u,\n    \"zh-CN\": /\\p{scx=Han}/u,\n    \"zh-TW\": /\\p{scx=Han}/u,\n    \"zh-HK\": /\\p{scx=Han}/u,\n    \"th-TH\": /\\p{scx=Thai}/u,\n    \"bn-IN\": /\\p{scx=Bengali}/u,\n    \"ar-AR\": /\\p{scx=Arabic}/u,\n    \"ta-IN\": /\\p{scx=Tamil}/u,\n    \"ml-IN\": /\\p{scx=Malayalam}/u,\n    \"he-IL\": /\\p{scx=Hebrew}/u,\n    \"te-IN\": /\\p{scx=Telugu}/u,\n    devanagari: /\\p{scx=Devanagari}/u,\n    kannada: /\\p{scx=Kannada}/u\n};\nvar Yr = Object.keys({\n    ...jn,\n    ...Gn\n});\nfunction Nu(e) {\n    return Yr.includes(e);\n}\nfunction Wu(e, t) {\n    for (let r of Object.keys(Gn))if (Gn[r].test(e)) return [\n        r\n    ];\n    let n = Object.keys(jn).filter((r)=>jn[r].test(e));\n    if (n.length === 0) return [\n        \"unknown\"\n    ];\n    if (t) {\n        let r = n.findIndex((i)=>i === t);\n        r !== -1 && (n.splice(r, 1), n.unshift(t));\n    }\n    return n;\n}\nfunction $u(e) {\n    if (e) return Yr.find((t)=>t.toLowerCase().startsWith(e.toLowerCase()));\n}\nasync function* qt(e, t) {\n    var L;\n    let n = await qe(), { id: r, inheritedStyle: i, parent: o, font: u, debug: s, locale: a, embedFont: l = true, graphemeImages: f, canLoadAdditionalAssets: c, getTwStyles: d } = t;\n    if (e === null || typeof e > \"u\") return yield, yield, \"\";\n    if (!bt(e) || typeof e.type == \"function\") {\n        let P;\n        if (!bt(e)) P = Mn(String(e), t), yield (await P.next()).value;\n        else {\n            if (Ko(e.type)) throw new Error(\"Class component is not supported.\");\n            P = qt(e.type(e.props), t), yield (await P.next()).value;\n        }\n        await P.next();\n        let he = yield;\n        return (await P.next(he)).value;\n    }\n    let { type: h, props: p } = e;\n    if (p && Jo(p)) throw new Error(\"dangerouslySetInnerHTML property is not supported. See documentation for more information https://github.com/vercel/satori#jsx.\");\n    let { style: m, children: v, tw: D, lang: b = a } = p || {}, y = $u(b);\n    if (D) {\n        let P = d(D, m);\n        m = Object.assign(P, m);\n    }\n    let F = n.Node.create();\n    o.insertChild(F, o.getChildCount());\n    let [x, k] = await Pn(F, h, i, m, p), B = x.transform === i.transform;\n    if (B || (x.transform.__parent = i.transform), (x.overflow === \"hidden\" || x.clipPath && x.clipPath !== \"none\") && (k._inheritedClipPathId = `satori_cp-${r}`, k._inheritedMaskId = `satori_om-${r}`), x.maskImage && (k._inheritedMaskId = `satori_mi-${r}`), x.backgroundClip === \"text\") {\n        let P = {\n            value: \"\"\n        };\n        k._inheritedBackgroundClipTextPath = P, x._inheritedBackgroundClipTextPath = P;\n    }\n    let I = Zo(v), G = [], ue = 0, ae = [];\n    for (let P of I){\n        let he = qt(P, {\n            id: r + \"-\" + ue++,\n            parentStyle: x,\n            inheritedStyle: k,\n            isInheritingTransform: true,\n            parent: F,\n            font: u,\n            embedFont: l,\n            debug: s,\n            graphemeImages: f,\n            canLoadAdditionalAssets: c,\n            locale: y,\n            getTwStyles: d,\n            onNodeDetected: t.onNodeDetected\n        });\n        c ? ae.push(...(await he.next()).value || []) : await he.next(), G.push(he);\n    }\n    yield ae;\n    for (let P of G)await P.next();\n    let [ie, N] = yield, { left: R, top: j, width: K, height: ce } = F.getComputedLayout();\n    R += ie, j += N;\n    let ee = \"\", te = \"\", Ae = \"\", { children: A, ...O } = p;\n    if ((L = t.onNodeDetected) == null || L.call(t, {\n        left: R,\n        top: j,\n        width: K,\n        height: ce,\n        type: h,\n        props: O,\n        key: e.key,\n        textContent: bt(A) ? void 0 : A\n    }), h === \"img\") {\n        let P = x.__src;\n        te = await $t({\n            id: r,\n            left: R,\n            top: j,\n            width: K,\n            height: ce,\n            src: P,\n            isInheritingTransform: B,\n            debug: s\n        }, x, k);\n    } else if (h === \"svg\") {\n        let P = x.color, he = await du(e, P);\n        te = await $t({\n            id: r,\n            left: R,\n            top: j,\n            width: K,\n            height: ce,\n            src: he,\n            isInheritingTransform: B,\n            debug: s\n        }, x, k);\n    } else {\n        let P = m == null ? void 0 : m.display;\n        if (h === \"div\" && v && typeof v != \"string\" && P !== \"flex\" && P !== \"none\") throw new Error('Expected <div> to have explicit \"display: flex\" or \"display: none\" if it has more than one child node.');\n        te = await $t({\n            id: r,\n            left: R,\n            top: j,\n            width: K,\n            height: ce,\n            isInheritingTransform: B,\n            debug: s\n        }, x, k);\n    }\n    for (let P of G)ee += (await P.next([\n        R,\n        j\n    ])).value;\n    return x._inheritedBackgroundClipTextPath && (Ae += S(\"clipPath\", {\n        id: `satori_bct-${r}`,\n        \"clip-path\": x._inheritedClipPathId ? `url(#${x._inheritedClipPathId})` : void 0\n    }, x._inheritedBackgroundClipTextPath.value)), Ae + te + ee;\n}\nvar qu = \"unknown\";\nfunction $f(e, t, [n, r], [i, o]) {\n    if (n !== i) return n ? !i || n === e ? -1 : i === e ? 1 : e === 400 && n === 500 || e === 500 && n === 400 ? -1 : e === 400 && i === 500 || e === 500 && i === 400 ? 1 : e < 400 ? n < e && i < e ? i - n : n < e ? -1 : i < e ? 1 : n - i : e < n && e < i ? n - i : e < n ? -1 : e < i ? 1 : i - n : 1;\n    if (r !== o) {\n        if (r === t) return -1;\n        if (o === t) return 1;\n    }\n    return -1;\n}\nvar zt = class {\n    constructor(t){\n        this.fonts = /* @__PURE__ */ new Map();\n        this.addFonts(t);\n    }\n    get({ name: t, weight: n, style: r }) {\n        if (!this.fonts.has(t)) return null;\n        n === \"normal\" && (n = 400), n === \"bold\" && (n = 700), typeof n == \"string\" && (n = Number.parseInt(n, 10));\n        let i = [\n            ...this.fonts.get(t)\n        ], o = i[0];\n        for(let u = 1; u < i.length; u++){\n            let [, s, a] = o, [, l, f] = i[u];\n            $f(n, r, [\n                s,\n                a\n            ], [\n                l,\n                f\n            ]) > 0 && (o = i[u]);\n        }\n        return o[0];\n    }\n    addFonts(t) {\n        for (let n of t){\n            let { name: r, data: i, lang: o } = n;\n            if (o && !Nu(o)) throw new Error(`Invalid value for props \\`lang\\`: \"${o}\". The value must be one of the following: ${Yr.join(\", \")}.`);\n            let u = o ?? qu, s = opentype_module_default.parse(\"buffer\" in i ? i.buffer.slice(i.byteOffset, i.byteOffset + i.byteLength) : i, {\n                lowMemory: true\n            }), a = s.charToGlyphIndex;\n            s.charToGlyphIndex = (f)=>{\n                let c = a.call(s, f);\n                return c === 0 && s._trackBrokenChars && s._trackBrokenChars.push(f), c;\n            }, this.defaultFont || (this.defaultFont = s);\n            let l = `${r.toLowerCase()}_${u}`;\n            this.fonts.has(l) || this.fonts.set(l, []), this.fonts.get(l).push([\n                s,\n                n.weight,\n                n.style\n            ]);\n        }\n    }\n    getEngine(t = 16, n = 1.2, { fontFamily: r = \"sans-serif\", fontWeight: i = 400, fontStyle: o = \"normal\" }, u) {\n        if (!this.fonts.size) throw new Error(\"No fonts are loaded. At least one font is required to calculate the layout.\");\n        r = (Array.isArray(r) ? r : [\n            r\n        ]).map((b)=>b.toLowerCase());\n        let s = [];\n        r.forEach((b)=>{\n            let y = this.get({\n                name: b,\n                weight: i,\n                style: o\n            });\n            if (y) {\n                s.push(y);\n                return;\n            }\n            let F = this.get({\n                name: b + \"_unknown\",\n                weight: i,\n                style: o\n            });\n            if (F) {\n                s.push(F);\n                return;\n            }\n        });\n        let a = Array.from(this.fonts.keys()), l = [], f = [], c = [];\n        for (let b of a)if (!r.includes(b)) if (u) {\n            let y = qf(b);\n            y ? y === u ? l.push(this.get({\n                name: b,\n                weight: i,\n                style: o\n            })) : f.push(this.get({\n                name: b,\n                weight: i,\n                style: o\n            })) : c.push(this.get({\n                name: b,\n                weight: i,\n                style: o\n            }));\n        } else c.push(this.get({\n            name: b,\n            weight: i,\n            style: o\n        }));\n        let d = /* @__PURE__ */ new Map(), h = (b, y = true)=>{\n            let F = [\n                ...s,\n                ...c,\n                ...l,\n                ...y ? f : []\n            ];\n            if (typeof b > \"u\") return y ? F[F.length - 1] : void 0;\n            let x = b.charCodeAt(0);\n            if (d.has(x)) return d.get(x);\n            let k = F.find((B, I)=>!!B.charToGlyphIndex(b) || y && I === F.length - 1);\n            return k && d.set(x, k), k;\n        }, p = (b, y = false)=>{\n            var x, k;\n            return ((y ? (k = (x = b.tables) == null ? void 0 : x.os2) == null ? void 0 : k.sTypoAscender : 0) || b.ascender) / b.unitsPerEm * t;\n        }, m = (b, y = false)=>{\n            var x, k;\n            return ((y ? (k = (x = b.tables) == null ? void 0 : x.os2) == null ? void 0 : k.sTypoDescender : 0) || b.descender) / b.unitsPerEm * t;\n        }, v = (b)=>h(b, false), D = {\n            has: (b)=>{\n                if (b === `\n`) return true;\n                let y = v(b);\n                return y ? (y._trackBrokenChars = [], y.stringToGlyphs(b), y._trackBrokenChars.length ? (y._trackBrokenChars = void 0, false) : true) : false;\n            },\n            baseline: (b, y = typeof b > \"u\" ? s[0] : h(b))=>{\n                let F = p(y, true), x = m(y, true), k = D.height(b, y), { yMax: B, yMin: I } = y.tables.head, G = F - x, ue = (B / (B - I) - 1) * G;\n                return k * ((1.2 / n + 1) / 2) + ue;\n            },\n            height: (b, y = typeof b > \"u\" ? s[0] : h(b))=>(p(y) - m(y)) * (n / 1.2),\n            measure: (b, y)=>this.measure(h, b, y),\n            getSVG: (b, y)=>this.getSVG(h, b, y)\n        };\n        return D;\n    }\n    patchFontFallbackResolver(t, n) {\n        let r = [];\n        t._trackBrokenChars = r;\n        let i = t.stringToGlyphs;\n        return t.stringToGlyphs = (o, ...u)=>{\n            let s = i.call(t, o, ...u);\n            for(let a = 0; a < s.length; a++)if (s[a].unicode === void 0) {\n                let l = r.shift(), f = n(l);\n                if (f !== t) {\n                    let c = f.charToGlyph(l), d = t.unitsPerEm / f.unitsPerEm, h = new opentype_module_default.Path();\n                    h.unitsPerEm = t.unitsPerEm, h.commands = c.path.commands.map((m)=>{\n                        let v = {\n                            ...m\n                        };\n                        for(let D in v)typeof v[D] == \"number\" && (v[D] *= d);\n                        return v;\n                    });\n                    let p = new opentype_module_default.Glyph({\n                        ...c,\n                        advanceWidth: c.advanceWidth * d,\n                        xMin: c.xMin * d,\n                        xMax: c.xMax * d,\n                        yMin: c.yMin * d,\n                        yMax: c.yMax * d,\n                        path: h\n                    });\n                    s[a] = p;\n                }\n            }\n            return s;\n        }, ()=>{\n            t.stringToGlyphs = i, t._trackBrokenChars = void 0;\n        };\n    }\n    measure(t, n, { fontSize: r, letterSpacing: i = 0 }) {\n        let o = t(n), u = this.patchFontFallbackResolver(o, t);\n        try {\n            return o.getAdvanceWidth(n, r, {\n                letterSpacing: i / r\n            });\n        } finally{\n            u();\n        }\n    }\n    getSVG(t, n, { fontSize: r, top: i, left: o, letterSpacing: u = 0 }) {\n        let s = t(n), a = this.patchFontFallbackResolver(s, t);\n        try {\n            return r === 0 ? \"\" : s.getPath(n.replace(/\\n/g, \"\"), o, i, r, {\n                letterSpacing: u / r\n            }).toPathData(1);\n        } finally{\n            a();\n        }\n    }\n};\nfunction qf(e) {\n    let t = e.split(\"_\"), n = t[t.length - 1];\n    return n === qu ? void 0 : n;\n}\nfunction Vn({ width: e, height: t, content: n }) {\n    return S(\"svg\", {\n        width: e,\n        height: t,\n        viewBox: `0 0 ${e} ${t}`,\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, n);\n}\nvar yl = Bl(Ka());\nvar _m = [\n    \"ios\",\n    \"android\",\n    \"windows\",\n    \"macos\",\n    \"web\"\n];\nfunction Za(e) {\n    return _m.includes(e);\n}\nvar km = [\n    \"portrait\",\n    \"landscape\"\n];\nfunction el(e) {\n    return km.includes(e);\n}\nvar Ja;\n(function(e) {\n    e.fontSize = \"fontSize\", e.lineHeight = \"lineHeight\";\n})(Ja || (Ja = {}));\nvar z;\n(function(e) {\n    e.rem = \"rem\", e.em = \"em\", e.px = \"px\", e.percent = \"%\", e.vw = \"vw\", e.vh = \"vh\", e.none = \"<no-css-unit>\";\n})(z || (z = {}));\nfunction yo(e) {\n    return typeof e == \"string\";\n}\nfunction xo(e) {\n    return typeof e == \"object\";\n}\nvar Fo;\nfunction g(e) {\n    return {\n        kind: \"complete\",\n        style: e\n    };\n}\nfunction de(e, t = {}) {\n    let { fractions: n } = t;\n    if (n && e.includes(\"/\")) {\n        let [o = \"\", u = \"\"] = e.split(\"/\", 2), s = de(o), a = de(u);\n        return !s || !a ? null : [\n            s[0] / a[0],\n            a[1]\n        ];\n    }\n    let r = parseFloat(e);\n    if (Number.isNaN(r)) return null;\n    let i = e.match(/(([a-z]{2,}|%))$/);\n    if (!i) return [\n        r,\n        z.none\n    ];\n    switch(i == null ? void 0 : i[1]){\n        case \"rem\":\n            return [\n                r,\n                z.rem\n            ];\n        case \"px\":\n            return [\n                r,\n                z.px\n            ];\n        case \"em\":\n            return [\n                r,\n                z.em\n            ];\n        case \"%\":\n            return [\n                r,\n                z.percent\n            ];\n        case \"vw\":\n            return [\n                r,\n                z.vw\n            ];\n        case \"vh\":\n            return [\n                r,\n                z.vh\n            ];\n        default:\n            return null;\n    }\n}\nfunction Ge(e, t, n = {}) {\n    let r = Me(t, n);\n    return r === null ? null : g({\n        [e]: r\n    });\n}\nfunction pn(e, t, n) {\n    let r = Me(t);\n    return r !== null && (n[e] = r), n;\n}\nfunction rl(e, t) {\n    let n = Me(t);\n    return n === null ? null : {\n        [e]: n\n    };\n}\nfunction Me(e, t = {}) {\n    if (e === void 0) return null;\n    let n = de(String(e), t);\n    return n ? rt(...n, t) : null;\n}\nfunction rt(e, t, n = {}) {\n    let { isNegative: r, device: i } = n;\n    switch(t){\n        case z.rem:\n            return e * 16 * (r ? -1 : 1);\n        case z.px:\n            return e * (r ? -1 : 1);\n        case z.percent:\n            return `${r ? \"-\" : \"\"}${e}%`;\n        case z.none:\n            return e * (r ? -1 : 1);\n        case z.vw:\n            return i != null && i.windowDimensions ? i.windowDimensions.width * (e / 100) : (Fe(\"`vw` CSS unit requires configuration with `useDeviceContext()`\"), null);\n        case z.vh:\n            return i != null && i.windowDimensions ? i.windowDimensions.height * (e / 100) : (Fe(\"`vh` CSS unit requires configuration with `useDeviceContext()`\"), null);\n        default:\n            return null;\n    }\n}\nfunction wo(e) {\n    let t = de(e);\n    if (!t) return null;\n    let [n, r] = t;\n    switch(r){\n        case z.rem:\n            return n * 16;\n        case z.px:\n            return n;\n        default:\n            return null;\n    }\n}\nvar Tm = {\n    t: \"Top\",\n    tr: \"TopRight\",\n    tl: \"TopLeft\",\n    b: \"Bottom\",\n    br: \"BottomRight\",\n    bl: \"BottomLeft\",\n    l: \"Left\",\n    r: \"Right\",\n    x: \"Horizontal\",\n    y: \"Vertical\"\n};\nfunction Eo(e) {\n    return Tm[e ?? \"\"] || \"All\";\n}\nfunction So(e) {\n    let t = \"All\";\n    return [\n        e.replace(/^-(t|b|r|l|tr|tl|br|bl)(-|$)/, (r, i)=>(t = Eo(i), \"\")),\n        t\n    ];\n}\nfunction ct(e, t = {}) {\n    if (e.includes(\"/\")) {\n        let n = tl(e, {\n            ...t,\n            fractions: true\n        });\n        if (n) return n;\n    }\n    return e[0] === \"[\" && (e = e.slice(1, -1)), tl(e, t);\n}\nfunction Te(e, t, n = {}) {\n    let r = ct(t, n);\n    return r === null ? null : g({\n        [e]: r\n    });\n}\nfunction tl(e, t = {}) {\n    if (e === \"px\") return 1;\n    let n = de(e, t);\n    if (!n) return null;\n    let [r, i] = n;\n    return t.fractions && (i = z.percent, r *= 100), i === z.none && (r = r / 4, i = z.rem), rt(r, i, t);\n}\nfunction Am(...e) {\n    console.warn(...e);\n}\nfunction Om(...e) {}\nvar Fe = typeof process > \"u\" || ((Fo = process == null ? void 0 : process.env) === null || Fo === void 0 ? void 0 : Fo.JEST_WORKER_ID) === void 0 ? Am : Om;\nvar Pm = [\n    [\n        \"aspect-square\",\n        g({\n            aspectRatio: 1\n        })\n    ],\n    [\n        \"aspect-video\",\n        g({\n            aspectRatio: 16 / 9\n        })\n    ],\n    [\n        \"items-center\",\n        g({\n            alignItems: \"center\"\n        })\n    ],\n    [\n        \"items-start\",\n        g({\n            alignItems: \"flex-start\"\n        })\n    ],\n    [\n        \"items-end\",\n        g({\n            alignItems: \"flex-end\"\n        })\n    ],\n    [\n        \"items-baseline\",\n        g({\n            alignItems: \"baseline\"\n        })\n    ],\n    [\n        \"items-stretch\",\n        g({\n            alignItems: \"stretch\"\n        })\n    ],\n    [\n        \"justify-start\",\n        g({\n            justifyContent: \"flex-start\"\n        })\n    ],\n    [\n        \"justify-end\",\n        g({\n            justifyContent: \"flex-end\"\n        })\n    ],\n    [\n        \"justify-center\",\n        g({\n            justifyContent: \"center\"\n        })\n    ],\n    [\n        \"justify-between\",\n        g({\n            justifyContent: \"space-between\"\n        })\n    ],\n    [\n        \"justify-around\",\n        g({\n            justifyContent: \"space-around\"\n        })\n    ],\n    [\n        \"justify-evenly\",\n        g({\n            justifyContent: \"space-evenly\"\n        })\n    ],\n    [\n        \"content-start\",\n        g({\n            alignContent: \"flex-start\"\n        })\n    ],\n    [\n        \"content-end\",\n        g({\n            alignContent: \"flex-end\"\n        })\n    ],\n    [\n        \"content-between\",\n        g({\n            alignContent: \"space-between\"\n        })\n    ],\n    [\n        \"content-around\",\n        g({\n            alignContent: \"space-around\"\n        })\n    ],\n    [\n        \"content-stretch\",\n        g({\n            alignContent: \"stretch\"\n        })\n    ],\n    [\n        \"content-center\",\n        g({\n            alignContent: \"center\"\n        })\n    ],\n    [\n        \"self-auto\",\n        g({\n            alignSelf: \"auto\"\n        })\n    ],\n    [\n        \"self-start\",\n        g({\n            alignSelf: \"flex-start\"\n        })\n    ],\n    [\n        \"self-end\",\n        g({\n            alignSelf: \"flex-end\"\n        })\n    ],\n    [\n        \"self-center\",\n        g({\n            alignSelf: \"center\"\n        })\n    ],\n    [\n        \"self-stretch\",\n        g({\n            alignSelf: \"stretch\"\n        })\n    ],\n    [\n        \"self-baseline\",\n        g({\n            alignSelf: \"baseline\"\n        })\n    ],\n    [\n        \"direction-inherit\",\n        g({\n            direction: \"inherit\"\n        })\n    ],\n    [\n        \"direction-ltr\",\n        g({\n            direction: \"ltr\"\n        })\n    ],\n    [\n        \"direction-rtl\",\n        g({\n            direction: \"rtl\"\n        })\n    ],\n    [\n        \"hidden\",\n        g({\n            display: \"none\"\n        })\n    ],\n    [\n        \"flex\",\n        g({\n            display: \"flex\"\n        })\n    ],\n    [\n        \"flex-row\",\n        g({\n            flexDirection: \"row\"\n        })\n    ],\n    [\n        \"flex-row-reverse\",\n        g({\n            flexDirection: \"row-reverse\"\n        })\n    ],\n    [\n        \"flex-col\",\n        g({\n            flexDirection: \"column\"\n        })\n    ],\n    [\n        \"flex-col-reverse\",\n        g({\n            flexDirection: \"column-reverse\"\n        })\n    ],\n    [\n        \"flex-wrap\",\n        g({\n            flexWrap: \"wrap\"\n        })\n    ],\n    [\n        \"flex-wrap-reverse\",\n        g({\n            flexWrap: \"wrap-reverse\"\n        })\n    ],\n    [\n        \"flex-nowrap\",\n        g({\n            flexWrap: \"nowrap\"\n        })\n    ],\n    [\n        \"flex-auto\",\n        g({\n            flexGrow: 1,\n            flexShrink: 1,\n            flexBasis: \"auto\"\n        })\n    ],\n    [\n        \"flex-initial\",\n        g({\n            flexGrow: 0,\n            flexShrink: 1,\n            flexBasis: \"auto\"\n        })\n    ],\n    [\n        \"flex-none\",\n        g({\n            flexGrow: 0,\n            flexShrink: 0,\n            flexBasis: \"auto\"\n        })\n    ],\n    [\n        \"overflow-hidden\",\n        g({\n            overflow: \"hidden\"\n        })\n    ],\n    [\n        \"overflow-visible\",\n        g({\n            overflow: \"visible\"\n        })\n    ],\n    [\n        \"overflow-scroll\",\n        g({\n            overflow: \"scroll\"\n        })\n    ],\n    [\n        \"absolute\",\n        g({\n            position: \"absolute\"\n        })\n    ],\n    [\n        \"relative\",\n        g({\n            position: \"relative\"\n        })\n    ],\n    [\n        \"italic\",\n        g({\n            fontStyle: \"italic\"\n        })\n    ],\n    [\n        \"not-italic\",\n        g({\n            fontStyle: \"normal\"\n        })\n    ],\n    [\n        \"oldstyle-nums\",\n        vr(\"oldstyle-nums\")\n    ],\n    [\n        \"small-caps\",\n        vr(\"small-caps\")\n    ],\n    [\n        \"lining-nums\",\n        vr(\"lining-nums\")\n    ],\n    [\n        \"tabular-nums\",\n        vr(\"tabular-nums\")\n    ],\n    [\n        \"proportional-nums\",\n        vr(\"proportional-nums\")\n    ],\n    [\n        \"font-thin\",\n        g({\n            fontWeight: \"100\"\n        })\n    ],\n    [\n        \"font-100\",\n        g({\n            fontWeight: \"100\"\n        })\n    ],\n    [\n        \"font-extralight\",\n        g({\n            fontWeight: \"200\"\n        })\n    ],\n    [\n        \"font-200\",\n        g({\n            fontWeight: \"200\"\n        })\n    ],\n    [\n        \"font-light\",\n        g({\n            fontWeight: \"300\"\n        })\n    ],\n    [\n        \"font-300\",\n        g({\n            fontWeight: \"300\"\n        })\n    ],\n    [\n        \"font-normal\",\n        g({\n            fontWeight: \"normal\"\n        })\n    ],\n    [\n        \"font-400\",\n        g({\n            fontWeight: \"400\"\n        })\n    ],\n    [\n        \"font-medium\",\n        g({\n            fontWeight: \"500\"\n        })\n    ],\n    [\n        \"font-500\",\n        g({\n            fontWeight: \"500\"\n        })\n    ],\n    [\n        \"font-semibold\",\n        g({\n            fontWeight: \"600\"\n        })\n    ],\n    [\n        \"font-600\",\n        g({\n            fontWeight: \"600\"\n        })\n    ],\n    [\n        \"font-bold\",\n        g({\n            fontWeight: \"bold\"\n        })\n    ],\n    [\n        \"font-700\",\n        g({\n            fontWeight: \"700\"\n        })\n    ],\n    [\n        \"font-extrabold\",\n        g({\n            fontWeight: \"800\"\n        })\n    ],\n    [\n        \"font-800\",\n        g({\n            fontWeight: \"800\"\n        })\n    ],\n    [\n        \"font-black\",\n        g({\n            fontWeight: \"900\"\n        })\n    ],\n    [\n        \"font-900\",\n        g({\n            fontWeight: \"900\"\n        })\n    ],\n    [\n        \"include-font-padding\",\n        g({\n            includeFontPadding: true\n        })\n    ],\n    [\n        \"remove-font-padding\",\n        g({\n            includeFontPadding: false\n        })\n    ],\n    [\n        \"max-w-none\",\n        g({\n            maxWidth: \"99999%\"\n        })\n    ],\n    [\n        \"text-left\",\n        g({\n            textAlign: \"left\"\n        })\n    ],\n    [\n        \"text-center\",\n        g({\n            textAlign: \"center\"\n        })\n    ],\n    [\n        \"text-right\",\n        g({\n            textAlign: \"right\"\n        })\n    ],\n    [\n        \"text-justify\",\n        g({\n            textAlign: \"justify\"\n        })\n    ],\n    [\n        \"text-auto\",\n        g({\n            textAlign: \"auto\"\n        })\n    ],\n    [\n        \"underline\",\n        g({\n            textDecorationLine: \"underline\"\n        })\n    ],\n    [\n        \"line-through\",\n        g({\n            textDecorationLine: \"line-through\"\n        })\n    ],\n    [\n        \"no-underline\",\n        g({\n            textDecorationLine: \"none\"\n        })\n    ],\n    [\n        \"uppercase\",\n        g({\n            textTransform: \"uppercase\"\n        })\n    ],\n    [\n        \"lowercase\",\n        g({\n            textTransform: \"lowercase\"\n        })\n    ],\n    [\n        \"capitalize\",\n        g({\n            textTransform: \"capitalize\"\n        })\n    ],\n    [\n        \"normal-case\",\n        g({\n            textTransform: \"none\"\n        })\n    ],\n    [\n        \"w-auto\",\n        g({\n            width: \"auto\"\n        })\n    ],\n    [\n        \"h-auto\",\n        g({\n            height: \"auto\"\n        })\n    ],\n    [\n        \"shadow-sm\",\n        g({\n            shadowOffset: {\n                width: 1,\n                height: 1\n            },\n            shadowColor: \"#000\",\n            shadowRadius: 1,\n            shadowOpacity: 0.025,\n            elevation: 1\n        })\n    ],\n    [\n        \"shadow\",\n        g({\n            shadowOffset: {\n                width: 1,\n                height: 1\n            },\n            shadowColor: \"#000\",\n            shadowRadius: 1,\n            shadowOpacity: 0.075,\n            elevation: 2\n        })\n    ],\n    [\n        \"shadow-md\",\n        g({\n            shadowOffset: {\n                width: 1,\n                height: 1\n            },\n            shadowColor: \"#000\",\n            shadowRadius: 3,\n            shadowOpacity: 0.125,\n            elevation: 3\n        })\n    ],\n    [\n        \"shadow-lg\",\n        g({\n            shadowOffset: {\n                width: 1,\n                height: 1\n            },\n            shadowColor: \"#000\",\n            shadowOpacity: 0.15,\n            shadowRadius: 8,\n            elevation: 8\n        })\n    ],\n    [\n        \"shadow-xl\",\n        g({\n            shadowOffset: {\n                width: 1,\n                height: 1\n            },\n            shadowColor: \"#000\",\n            shadowOpacity: 0.19,\n            shadowRadius: 20,\n            elevation: 12\n        })\n    ],\n    [\n        \"shadow-2xl\",\n        g({\n            shadowOffset: {\n                width: 1,\n                height: 1\n            },\n            shadowColor: \"#000\",\n            shadowOpacity: 0.25,\n            shadowRadius: 30,\n            elevation: 16\n        })\n    ],\n    [\n        \"shadow-none\",\n        g({\n            shadowOffset: {\n                width: 0,\n                height: 0\n            },\n            shadowColor: \"#000\",\n            shadowRadius: 0,\n            shadowOpacity: 0,\n            elevation: 0\n        })\n    ]\n];\nvar Co = Pm;\nfunction vr(e) {\n    return {\n        kind: \"dependent\",\n        complete (t) {\n            (!t.fontVariant || !Array.isArray(t.fontVariant)) && (t.fontVariant = []), t.fontVariant.push(e);\n        }\n    };\n}\nvar yr = class {\n    constructor(t){\n        this.ir = new Map(Co), this.styles = /* @__PURE__ */ new Map(), this.prefixes = /* @__PURE__ */ new Map(), this.ir = new Map([\n            ...Co,\n            ...t ?? []\n        ]);\n    }\n    getStyle(t) {\n        return this.styles.get(t);\n    }\n    setStyle(t, n) {\n        this.styles.set(t, n);\n    }\n    getIr(t) {\n        return this.ir.get(t);\n    }\n    setIr(t, n) {\n        this.ir.set(t, n);\n    }\n    getPrefixMatch(t) {\n        return this.prefixes.get(t);\n    }\n    setPrefixMatch(t, n) {\n        this.prefixes.set(t, n);\n    }\n};\nfunction _o(e, t, n = {}) {\n    let r = t == null ? void 0 : t[e];\n    if (!r) return Te(\"fontSize\", e, n);\n    if (typeof r == \"string\") return Ge(\"fontSize\", r);\n    let i = {}, [o, u] = r, s = rl(\"fontSize\", o);\n    if (s && (i = s), typeof u == \"string\") return g(pn(\"lineHeight\", nl(u, i), i));\n    let { lineHeight: a, letterSpacing: l } = u;\n    return a && pn(\"lineHeight\", nl(a, i), i), l && pn(\"letterSpacing\", l, i), g(i);\n}\nfunction nl(e, t) {\n    let n = de(e);\n    if (n) {\n        let [r, i] = n;\n        if ((i === z.none || i === z.em) && typeof t.fontSize == \"number\") return t.fontSize * r;\n    }\n    return e;\n}\nfunction ko(e, t) {\n    var n;\n    let r = (n = t == null ? void 0 : t[e]) !== null && n !== void 0 ? n : e.startsWith(\"[\") ? e.slice(1, -1) : e, i = de(r);\n    if (!i) return null;\n    let [o, u] = i;\n    if (u === z.none) return {\n        kind: \"dependent\",\n        complete (a) {\n            if (typeof a.fontSize != \"number\") return \"relative line-height utilities require that font-size be set\";\n            a.lineHeight = a.fontSize * o;\n        }\n    };\n    let s = rt(o, u);\n    return s !== null ? g({\n        lineHeight: s\n    }) : null;\n}\nfunction To(e, t, n, r, i) {\n    let o = \"\";\n    if (r[0] === \"[\") o = r.slice(1, -1);\n    else {\n        let l = i == null ? void 0 : i[r];\n        if (l) o = l;\n        else {\n            let f = ct(r);\n            return f && typeof f == \"number\" ? il(f, z.px, t, e) : null;\n        }\n    }\n    if (o === \"auto\") return ol(t, e, \"auto\");\n    let u = de(o);\n    if (!u) return null;\n    let [s, a] = u;\n    return n && (s = -s), il(s, a, t, e);\n}\nfunction il(e, t, n, r) {\n    let i = rt(e, t);\n    return i === null ? null : ol(n, r, i);\n}\nfunction ol(e, t, n) {\n    switch(e){\n        case \"All\":\n            return {\n                kind: \"complete\",\n                style: {\n                    [`${t}Top`]: n,\n                    [`${t}Right`]: n,\n                    [`${t}Bottom`]: n,\n                    [`${t}Left`]: n\n                }\n            };\n        case \"Bottom\":\n        case \"Top\":\n        case \"Left\":\n        case \"Right\":\n            return {\n                kind: \"complete\",\n                style: {\n                    [`${t}${e}`]: n\n                }\n            };\n        case \"Vertical\":\n            return {\n                kind: \"complete\",\n                style: {\n                    [`${t}Top`]: n,\n                    [`${t}Bottom`]: n\n                }\n            };\n        case \"Horizontal\":\n            return {\n                kind: \"complete\",\n                style: {\n                    [`${t}Left`]: n,\n                    [`${t}Right`]: n\n                }\n            };\n        default:\n            return null;\n    }\n}\nfunction Ao(e) {\n    if (!e) return {};\n    let t = Object.entries(e).reduce((i, [o, u])=>{\n        let s = [\n            0,\n            1 / 0,\n            0\n        ], a = typeof u == \"string\" ? {\n            min: u\n        } : u, l = a.min ? wo(a.min) : 0;\n        l === null ? Fe(`invalid screen config value: ${o}->min: ${a.min}`) : s[0] = l;\n        let f = a.max ? wo(a.max) : 1 / 0;\n        return f === null ? Fe(`invalid screen config value: ${o}->max: ${a.max}`) : s[1] = f, i[o] = s, i;\n    }, {}), n = Object.values(t);\n    n.sort((i, o)=>{\n        let [u, s] = i, [a, l] = o;\n        return s === 1 / 0 || l === 1 / 0 ? u - a : s - l;\n    });\n    let r = 0;\n    return n.forEach((i)=>i[2] = r++), t;\n}\nfunction Oo(e, t) {\n    let n = t == null ? void 0 : t[e];\n    if (!n) return null;\n    if (typeof n == \"string\") return g({\n        fontFamily: n\n    });\n    let r = n[0];\n    return r ? g({\n        fontFamily: r\n    }) : null;\n}\nfunction dt(e, t, n) {\n    if (!n) return null;\n    let r;\n    t.includes(\"/\") && ([t = \"\", r] = t.split(\"/\", 2));\n    let i = \"\";\n    if (t.startsWith(\"[#\") || t.startsWith(\"[rgb\") ? i = t.slice(1, -1) : i = al(t, n), !i) return null;\n    if (r) {\n        let o = Number(r);\n        if (!Number.isNaN(o)) return i = ul(i, o / 100), g({\n            [hn[e].color]: i\n        });\n    }\n    return {\n        kind: \"dependent\",\n        complete (o) {\n            let u = hn[e].opacity, s = o[u];\n            typeof s == \"number\" && (i = ul(i, s)), o[hn[e].color] = i;\n        }\n    };\n}\nfunction xr(e, t) {\n    let n = parseInt(t, 10);\n    if (Number.isNaN(n)) return null;\n    let r = n / 100;\n    return {\n        kind: \"complete\",\n        style: {\n            [hn[e].opacity]: r\n        }\n    };\n}\nfunction ul(e, t) {\n    return e.startsWith(\"#\") ? e = Bm(e) : e.startsWith(\"rgb(\") && (e = e.replace(/^rgb\\(/, \"rgba(\").replace(/\\)$/, \", 1)\")), e.replace(/, ?\\d*\\.?(\\d+)\\)$/, `, ${t})`);\n}\nfunction sl(e) {\n    for(let t in e)t.startsWith(\"__opacity_\") && delete e[t];\n}\nvar hn = {\n    bg: {\n        opacity: \"__opacity_bg\",\n        color: \"backgroundColor\"\n    },\n    text: {\n        opacity: \"__opacity_text\",\n        color: \"color\"\n    },\n    border: {\n        opacity: \"__opacity_border\",\n        color: \"borderColor\"\n    },\n    borderTop: {\n        opacity: \"__opacity_border\",\n        color: \"borderTopColor\"\n    },\n    borderBottom: {\n        opacity: \"__opacity_border\",\n        color: \"borderBottomColor\"\n    },\n    borderLeft: {\n        opacity: \"__opacity_border\",\n        color: \"borderLeftColor\"\n    },\n    borderRight: {\n        opacity: \"__opacity_border\",\n        color: \"borderRightColor\"\n    },\n    shadow: {\n        opacity: \"__opacity_shadow\",\n        color: \"shadowColor\"\n    },\n    tint: {\n        opacity: \"__opacity_tint\",\n        color: \"tintColor\"\n    }\n};\nfunction Bm(e) {\n    let t = e;\n    e = e.replace(Im, (u, s, a, l)=>s + s + a + a + l + l);\n    let n = Rm.exec(e);\n    if (!n) return Fe(`invalid config hex color value: ${t}`), \"rgba(0, 0, 0, 1)\";\n    let r = parseInt(n[1], 16), i = parseInt(n[2], 16), o = parseInt(n[3], 16);\n    return `rgba(${r}, ${i}, ${o}, 1)`;\n}\nfunction al(e, t) {\n    let n = t[e];\n    if (yo(n)) return n;\n    if (xo(n) && yo(n.DEFAULT)) return n.DEFAULT;\n    let [r = \"\", ...i] = e.split(\"-\");\n    for(; r !== e;){\n        let o = t[r];\n        if (xo(o)) return al(i.join(\"-\"), o);\n        if (i.length === 0) return \"\";\n        r = `${r}-${i.shift()}`;\n    }\n    return \"\";\n}\nvar Im = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\nvar Rm = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\nfunction fl2(e, t) {\n    let [n, r] = So(e);\n    if (n.match(/^(-?(\\d)+)?$/)) return Lm(n, r, t == null ? void 0 : t.borderWidth);\n    if (n = n.replace(/^-/, \"\"), [\n        \"dashed\",\n        \"solid\",\n        \"dotted\"\n    ].includes(n)) return g({\n        borderStyle: n\n    });\n    let o = \"border\";\n    switch(r){\n        case \"Bottom\":\n            o = \"borderBottom\";\n            break;\n        case \"Top\":\n            o = \"borderTop\";\n            break;\n        case \"Left\":\n            o = \"borderLeft\";\n            break;\n        case \"Right\":\n            o = \"borderRight\";\n            break;\n    }\n    let u = dt(o, n, t == null ? void 0 : t.borderColor);\n    if (u) return u;\n    let s = `border${r === \"All\" ? \"\" : r}Width`;\n    n = n.replace(/^-/, \"\");\n    let a = n.slice(1, -1), l = Te(s, a);\n    return typeof (l == null ? void 0 : l.style[s]) != \"number\" ? null : l;\n}\nfunction Lm(e, t, n) {\n    if (!n) return null;\n    e = e.replace(/^-/, \"\");\n    let i = n[e === \"\" ? \"DEFAULT\" : e];\n    if (i === void 0) return null;\n    let o = `border${t === \"All\" ? \"\" : t}Width`;\n    return Ge(o, i);\n}\nfunction cl(e, t) {\n    if (!t) return null;\n    let [n, r] = So(e);\n    n = n.replace(/^-/, \"\"), n === \"\" && (n = \"DEFAULT\");\n    let i = `border${r === \"All\" ? \"\" : r}Radius`, o = t[n];\n    if (o) return ll(Ge(i, o));\n    let u = Te(i, n);\n    return typeof (u == null ? void 0 : u.style[i]) != \"number\" ? null : ll(u);\n}\nfunction ll(e) {\n    if ((e == null ? void 0 : e.kind) !== \"complete\") return e;\n    let t = e.style.borderTopRadius;\n    t !== void 0 && (e.style.borderTopLeftRadius = t, e.style.borderTopRightRadius = t, delete e.style.borderTopRadius);\n    let n = e.style.borderBottomRadius;\n    n !== void 0 && (e.style.borderBottomLeftRadius = n, e.style.borderBottomRightRadius = n, delete e.style.borderBottomRadius);\n    let r = e.style.borderLeftRadius;\n    r !== void 0 && (e.style.borderBottomLeftRadius = r, e.style.borderTopLeftRadius = r, delete e.style.borderLeftRadius);\n    let i = e.style.borderRightRadius;\n    return i !== void 0 && (e.style.borderBottomRightRadius = i, e.style.borderTopRightRadius = i, delete e.style.borderRightRadius), e;\n}\nfunction Ct(e, t, n, r) {\n    let i = null;\n    e === \"inset\" && (t = t.replace(/^(x|y)-/, (s, a)=>(i = a === \"x\" ? \"x\" : \"y\", \"\")));\n    let o = r == null ? void 0 : r[t];\n    if (o) {\n        let s = Me(o, {\n            isNegative: n\n        });\n        if (s !== null) return dl(e, i, s);\n    }\n    let u = ct(t, {\n        isNegative: n\n    });\n    return u !== null ? dl(e, i, u) : null;\n}\nfunction dl(e, t, n) {\n    if (e !== \"inset\") return g({\n        [e]: n\n    });\n    switch(t){\n        case null:\n            return g({\n                top: n,\n                left: n,\n                right: n,\n                bottom: n\n            });\n        case \"y\":\n            return g({\n                top: n,\n                bottom: n\n            });\n        case \"x\":\n            return g({\n                left: n,\n                right: n\n            });\n    }\n}\nfunction Fr(e, t, n) {\n    var r;\n    t = t.replace(/^-/, \"\");\n    let i = t === \"\" ? \"DEFAULT\" : t, o = Number((r = n == null ? void 0 : n[i]) !== null && r !== void 0 ? r : t);\n    return Number.isNaN(o) ? null : g({\n        [`flex${e}`]: o\n    });\n}\nfunction pl(e, t) {\n    var n, r;\n    if (e = (t == null ? void 0 : t[e]) || e, [\n        \"min-content\",\n        \"revert\",\n        \"unset\"\n    ].includes(e)) return null;\n    if (e.match(/^\\d+(\\.\\d+)?$/)) return g({\n        flexGrow: Number(e),\n        flexBasis: \"0%\"\n    });\n    let i = e.match(/^(\\d+)\\s+(\\d+)$/);\n    if (i) return g({\n        flexGrow: Number(i[1]),\n        flexShrink: Number(i[2])\n    });\n    if (i = e.match(/^(\\d+)\\s+([^ ]+)$/), i) {\n        let o = Me((n = i[2]) !== null && n !== void 0 ? n : \"\");\n        return o ? g({\n            flexGrow: Number(i[1]),\n            flexBasis: o\n        }) : null;\n    }\n    if (i = e.match(/^(\\d+)\\s+(\\d+)\\s+(.+)$/), i) {\n        let o = Me((r = i[3]) !== null && r !== void 0 ? r : \"\");\n        return o ? g({\n            flexGrow: Number(i[1]),\n            flexShrink: Number(i[2]),\n            flexBasis: o\n        }) : null;\n    }\n    return null;\n}\nfunction Po(e, t, n = {}, r) {\n    let i = r == null ? void 0 : r[t];\n    return i !== void 0 ? Ge(e, i, n) : Te(e, t, n);\n}\nfunction wr(e, t, n = {}, r) {\n    let i = Me(r == null ? void 0 : r[t], n);\n    return i ? g({\n        [e]: i\n    }) : (t === \"screen\" && (t = e.includes(\"Width\") ? \"100vw\" : \"100vh\"), Te(e, t, n));\n}\nfunction hl(e, t, n) {\n    let r = n == null ? void 0 : n[e];\n    if (r) {\n        let i = de(r, {\n            isNegative: t\n        });\n        if (!i) return null;\n        let [o, u] = i;\n        if (u === z.em) return Mm(o);\n        if (u === z.percent) return Fe(\"percentage-based letter-spacing configuration currently unsupported, switch to `em`s, or open an issue if you'd like to see support added.\"), null;\n        let s = rt(o, u, {\n            isNegative: t\n        });\n        return s !== null ? g({\n            letterSpacing: s\n        }) : null;\n    }\n    return Te(\"letterSpacing\", e, {\n        isNegative: t\n    });\n}\nfunction Mm(e) {\n    return {\n        kind: \"dependent\",\n        complete (t) {\n            let n = t.fontSize;\n            if (typeof n != \"number\" || Number.isNaN(n)) return \"tracking-X relative letter spacing classes require font-size to be set\";\n            t.letterSpacing = Math.round((e * n + Number.EPSILON) * 100) / 100;\n        }\n    };\n}\nfunction ml(e, t) {\n    let n = t == null ? void 0 : t[e];\n    if (n) {\n        let i = de(String(n));\n        if (i) return g({\n            opacity: i[0]\n        });\n    }\n    let r = de(e);\n    return r ? g({\n        opacity: r[0] / 100\n    }) : null;\n}\nfunction Dl(e) {\n    let t = parseInt(e, 10);\n    return Number.isNaN(t) ? null : {\n        kind: \"complete\",\n        style: {\n            shadowOpacity: t / 100\n        }\n    };\n}\nfunction gl(e) {\n    if (e.includes(\"/\")) {\n        let [n = \"\", r = \"\"] = e.split(\"/\", 2), i = Bo(n), o = Bo(r);\n        return i === null || o === null ? null : {\n            kind: \"complete\",\n            style: {\n                shadowOffset: {\n                    width: i,\n                    height: o\n                }\n            }\n        };\n    }\n    let t = Bo(e);\n    return t === null ? null : {\n        kind: \"complete\",\n        style: {\n            shadowOffset: {\n                width: t,\n                height: t\n            }\n        }\n    };\n}\nfunction Bo(e) {\n    let t = ct(e);\n    return typeof t == \"number\" ? t : null;\n}\nvar _t = class {\n    constructor(t, n = {}, r, i, o){\n        var u, s, a, l, f, c;\n        this.config = n, this.cache = r, this.position = 0, this.isNull = false, this.isNegative = false, this.context = {}, this.context.device = i;\n        let d = t.trim().split(\":\"), h = [];\n        d.length === 1 ? this.string = t : (this.string = (u = d.pop()) !== null && u !== void 0 ? u : \"\", h = d), this.char = this.string[0];\n        let p = Ao((s = this.config.theme) === null || s === void 0 ? void 0 : s.screens);\n        for (let m of h)if (p[m]) {\n            let v = (a = p[m]) === null || a === void 0 ? void 0 : a[2];\n            v !== void 0 && (this.order = ((l = this.order) !== null && l !== void 0 ? l : 0) + v);\n            let D = (f = i.windowDimensions) === null || f === void 0 ? void 0 : f.width;\n            if (D) {\n                let [b, y] = (c = p[m]) !== null && c !== void 0 ? c : [\n                    0,\n                    0\n                ];\n                (D <= b || D > y) && (this.isNull = true);\n            } else this.isNull = true;\n        } else Za(m) ? this.isNull = m !== o : el(m) ? i.windowDimensions ? (i.windowDimensions.width > i.windowDimensions.height ? \"landscape\" : \"portrait\") !== m ? this.isNull = true : this.incrementOrder() : this.isNull = true : m === \"retina\" ? i.pixelDensity === 2 ? this.incrementOrder() : this.isNull = true : m === \"dark\" ? i.colorScheme !== \"dark\" ? this.isNull = true : this.incrementOrder() : this.handlePossibleArbitraryBreakpointPrefix(m) || (this.isNull = true);\n    }\n    parse() {\n        if (this.isNull) return {\n            kind: \"null\"\n        };\n        let t = this.cache.getIr(this.rest);\n        if (t) return t;\n        this.parseIsNegative();\n        let n = this.parseUtility();\n        return n ? this.order !== void 0 ? {\n            kind: \"ordered\",\n            order: this.order,\n            styleIr: n\n        } : n : {\n            kind: \"null\"\n        };\n    }\n    parseUtility() {\n        var t, n, r, i, o;\n        let u = this.config.theme, s = null;\n        switch(this.char){\n            case \"m\":\n            case \"p\":\n                {\n                    let a = this.peekSlice(1, 3).match(/^(t|b|r|l|x|y)?-/);\n                    if (a) {\n                        let l = this.char === \"m\" ? \"margin\" : \"padding\";\n                        this.advance(((n = (t = a[0]) === null || t === void 0 ? void 0 : t.length) !== null && n !== void 0 ? n : 0) + 1);\n                        let f = Eo(a[1]), c = To(l, f, this.isNegative, this.rest, (r = this.config.theme) === null || r === void 0 ? void 0 : r[l]);\n                        if (c) return c;\n                    }\n                }\n        }\n        if (this.consumePeeked(\"h-\") && (s = Po(\"height\", this.rest, this.context, u == null ? void 0 : u.height), s) || this.consumePeeked(\"w-\") && (s = Po(\"width\", this.rest, this.context, u == null ? void 0 : u.width), s) || this.consumePeeked(\"min-w-\") && (s = wr(\"minWidth\", this.rest, this.context, u == null ? void 0 : u.minWidth), s) || this.consumePeeked(\"min-h-\") && (s = wr(\"minHeight\", this.rest, this.context, u == null ? void 0 : u.minHeight), s) || this.consumePeeked(\"max-w-\") && (s = wr(\"maxWidth\", this.rest, this.context, u == null ? void 0 : u.maxWidth), s) || this.consumePeeked(\"max-h-\") && (s = wr(\"maxHeight\", this.rest, this.context, u == null ? void 0 : u.maxHeight), s) || this.consumePeeked(\"leading-\") && (s = ko(this.rest, u == null ? void 0 : u.lineHeight), s) || this.consumePeeked(\"text-\") && (s = _o(this.rest, u == null ? void 0 : u.fontSize, this.context), s || (s = dt(\"text\", this.rest, u == null ? void 0 : u.textColor), s) || this.consumePeeked(\"opacity-\") && (s = xr(\"text\", this.rest), s)) || this.consumePeeked(\"font-\") && (s = Oo(this.rest, u == null ? void 0 : u.fontFamily), s) || this.consumePeeked(\"aspect-\") && (this.consumePeeked(\"ratio-\") && Fe(\"`aspect-ratio-{ratio}` is deprecated, use `aspect-{ratio}` instead\"), s = Ge(\"aspectRatio\", this.rest, {\n            fractions: true\n        }), s) || this.consumePeeked(\"tint-\") && (s = dt(\"tint\", this.rest, u == null ? void 0 : u.colors), s) || this.consumePeeked(\"bg-\") && (s = dt(\"bg\", this.rest, u == null ? void 0 : u.backgroundColor), s || this.consumePeeked(\"opacity-\") && (s = xr(\"bg\", this.rest), s)) || this.consumePeeked(\"border\") && (s = fl2(this.rest, u), s || this.consumePeeked(\"-opacity-\") && (s = xr(\"border\", this.rest), s)) || this.consumePeeked(\"rounded\") && (s = cl(this.rest, u == null ? void 0 : u.borderRadius), s) || this.consumePeeked(\"bottom-\") && (s = Ct(\"bottom\", this.rest, this.isNegative, u == null ? void 0 : u.inset), s) || this.consumePeeked(\"top-\") && (s = Ct(\"top\", this.rest, this.isNegative, u == null ? void 0 : u.inset), s) || this.consumePeeked(\"left-\") && (s = Ct(\"left\", this.rest, this.isNegative, u == null ? void 0 : u.inset), s) || this.consumePeeked(\"right-\") && (s = Ct(\"right\", this.rest, this.isNegative, u == null ? void 0 : u.inset), s) || this.consumePeeked(\"inset-\") && (s = Ct(\"inset\", this.rest, this.isNegative, u == null ? void 0 : u.inset), s) || this.consumePeeked(\"flex-\") && (this.consumePeeked(\"grow\") ? s = Fr(\"Grow\", this.rest, u == null ? void 0 : u.flexGrow) : this.consumePeeked(\"shrink\") ? s = Fr(\"Shrink\", this.rest, u == null ? void 0 : u.flexShrink) : s = pl(this.rest, u == null ? void 0 : u.flex), s) || this.consumePeeked(\"grow\") && (s = Fr(\"Grow\", this.rest, u == null ? void 0 : u.flexGrow), s) || this.consumePeeked(\"shrink\") && (s = Fr(\"Shrink\", this.rest, u == null ? void 0 : u.flexShrink), s) || this.consumePeeked(\"shadow-color-opacity-\") && (s = xr(\"shadow\", this.rest), s) || this.consumePeeked(\"shadow-opacity-\") && (s = Dl(this.rest), s) || this.consumePeeked(\"shadow-offset-\") && (s = gl(this.rest), s) || this.consumePeeked(\"shadow-radius-\") && (s = Te(\"shadowRadius\", this.rest), s) || this.consumePeeked(\"shadow-\") && (s = dt(\"shadow\", this.rest, u == null ? void 0 : u.colors), s)) return s;\n        if (this.consumePeeked(\"elevation-\")) {\n            let a = parseInt(this.rest, 10);\n            if (!Number.isNaN(a)) return g({\n                elevation: a\n            });\n        }\n        if (this.consumePeeked(\"opacity-\") && (s = ml(this.rest, u == null ? void 0 : u.opacity), s) || this.consumePeeked(\"tracking-\") && (s = hl(this.rest, this.isNegative, u == null ? void 0 : u.letterSpacing), s)) return s;\n        if (this.consumePeeked(\"z-\")) {\n            let a = Number((o = (i = u == null ? void 0 : u.zIndex) === null || i === void 0 ? void 0 : i[this.rest]) !== null && o !== void 0 ? o : this.rest);\n            if (!Number.isNaN(a)) return g({\n                zIndex: a\n            });\n        }\n        return Fe(`\\`${this.rest}\\` unknown or invalid utility`), null;\n    }\n    handlePossibleArbitraryBreakpointPrefix(t) {\n        var n;\n        if (t[0] !== \"m\") return false;\n        let r = t.match(/^(min|max)-(w|h)-\\[([^\\]]+)\\]$/);\n        if (!r) return false;\n        if (!(!((n = this.context.device) === null || n === void 0) && n.windowDimensions)) return this.isNull = true, true;\n        let i = this.context.device.windowDimensions, [, o = \"\", u = \"\", s = \"\"] = r, a = u === \"w\" ? i.width : i.height, l = de(s, this.context);\n        if (l === null) return this.isNull = true, true;\n        let [f, c] = l;\n        return c !== \"px\" && (this.isNull = true), (o === \"min\" ? a >= f : a <= f) ? this.incrementOrder() : this.isNull = true, true;\n    }\n    advance(t = 1) {\n        this.position += t, this.char = this.string[this.position];\n    }\n    get rest() {\n        return this.peekSlice(0, this.string.length);\n    }\n    peekSlice(t, n) {\n        return this.string.slice(this.position + t, this.position + n);\n    }\n    consumePeeked(t) {\n        return this.peekSlice(0, t.length) === t ? (this.advance(t.length), true) : false;\n    }\n    parseIsNegative() {\n        this.char === \"-\" && (this.advance(), this.isNegative = true, this.context.isNegative = true);\n    }\n    incrementOrder() {\n        var t;\n        this.order = ((t = this.order) !== null && t !== void 0 ? t : 0) + 1;\n    }\n};\nfunction bl(e) {\n    let t = [], n = null;\n    return e.forEach((r)=>{\n        if (typeof r == \"string\") t = [\n            ...t,\n            ...Io(r)\n        ];\n        else if (Array.isArray(r)) t = [\n            ...t,\n            ...r.flatMap(Io)\n        ];\n        else if (typeof r == \"object\" && r !== null) for (let [i, o] of Object.entries(r))typeof o == \"boolean\" ? t = [\n            ...t,\n            ...o ? Io(i) : []\n        ] : n ? n[i] = o : n = {\n            [i]: o\n        };\n    }), [\n        t.filter(Boolean).filter(Nm),\n        n\n    ];\n}\nfunction Io(e) {\n    return e.trim().split(/\\s+/);\n}\nfunction Nm(e, t, n) {\n    return n.indexOf(e) === t;\n}\nfunction vl(e) {\n    var t;\n    return (t = e == null ? void 0 : e.reduce((n, r)=>({\n            ...n,\n            ...Wm(r.handler)\n        }), {})) !== null && t !== void 0 ? t : {};\n}\nfunction Wm(e) {\n    let t = {};\n    return e({\n        addUtilities: (n)=>{\n            t = n;\n        },\n        ...$m\n    }), t;\n}\nfunction Ne(e) {\n    throw new Error(`tailwindcss plugin function argument object prop \"${e}\" not implemented`);\n}\nvar $m = {\n    addComponents: Ne,\n    addBase: Ne,\n    addVariant: Ne,\n    e: Ne,\n    prefix: Ne,\n    theme: Ne,\n    variants: Ne,\n    config: Ne,\n    corePlugins: Ne,\n    matchUtilities: Ne,\n    postcss: null\n};\nfunction xl(e, t) {\n    let n = (0, yl.default)(qm(e)), r = {}, i = vl(n.plugins), o = {}, u = Object.entries(i).map(([p, m])=>typeof m == \"string\" ? (o[p] = m, [\n            p,\n            {\n                kind: \"null\"\n            }\n        ]) : [\n            p,\n            g(m)\n        ]).filter(([, p])=>p.kind !== \"null\");\n    function s() {\n        return [\n            r.windowDimensions ? `w${r.windowDimensions.width}` : false,\n            r.windowDimensions ? `h${r.windowDimensions.height}` : false,\n            r.fontScale ? `fs${r.fontScale}` : false,\n            r.colorScheme === \"dark\" ? \"dark\" : false,\n            r.pixelDensity === 2 ? \"retina\" : false\n        ].filter(Boolean).join(\"--\") || \"default\";\n    }\n    let a = s(), l = {};\n    function f() {\n        let p = l[a];\n        if (p) return p;\n        let m = new yr(u);\n        return l[a] = m, m;\n    }\n    function c(...p) {\n        let m = f(), v = {}, D = [], b = [], [y, F] = bl(p), x = y.join(\" \"), k = m.getStyle(x);\n        if (k) return {\n            ...k,\n            ...F || {}\n        };\n        for (let B of y){\n            let I = m.getIr(B);\n            if (!I && B in o) {\n                let ue = c(o[B]);\n                m.setIr(B, g(ue)), v = {\n                    ...v,\n                    ...ue\n                };\n                continue;\n            }\n            switch(I = new _t(B, n, m, r, t).parse(), I.kind){\n                case \"complete\":\n                    v = {\n                        ...v,\n                        ...I.style\n                    }, m.setIr(B, I);\n                    break;\n                case \"dependent\":\n                    D.push(I);\n                    break;\n                case \"ordered\":\n                    b.push(I);\n                    break;\n                case \"null\":\n                    m.setIr(B, I);\n                    break;\n            }\n        }\n        if (b.length > 0) {\n            b.sort((B, I)=>B.order - I.order);\n            for (let B of b)switch(B.styleIr.kind){\n                case \"complete\":\n                    v = {\n                        ...v,\n                        ...B.styleIr.style\n                    };\n                    break;\n                case \"dependent\":\n                    D.push(B.styleIr);\n                    break;\n            }\n        }\n        if (D.length > 0) {\n            for (let B of D){\n                let I = B.complete(v);\n                I && Fe(I);\n            }\n            sl(v);\n        }\n        return x !== \"\" && m.setStyle(x, v), F && (v = {\n            ...v,\n            ...F\n        }), v;\n    }\n    function d(p) {\n        let m = c(p.split(/\\s+/g).map((v)=>v.replace(/^(bg|text|border)-/, \"\")).map((v)=>`bg-${v}`).join(\" \"));\n        return typeof m.backgroundColor == \"string\" ? m.backgroundColor : void 0;\n    }\n    let h = (p, ...m)=>{\n        let v = \"\";\n        return p.forEach((D, b)=>{\n            var y;\n            v += D + ((y = m[b]) !== null && y !== void 0 ? y : \"\");\n        }), c(v);\n    };\n    return h.style = c, h.color = d, h.prefixMatch = (...p)=>{\n        let m = p.sort().join(\":\"), v = f(), D = v.getPrefixMatch(m);\n        if (D !== void 0) return D;\n        let F = new _t(`${m}:flex`, n, v, r, t).parse().kind !== \"null\";\n        return v.setPrefixMatch(m, F), F;\n    }, h.setWindowDimensions = (p)=>{\n        r.windowDimensions = p, a = s();\n    }, h.setFontScale = (p)=>{\n        r.fontScale = p, a = s();\n    }, h.setPixelDensity = (p)=>{\n        r.pixelDensity = p, a = s();\n    }, h.setColorScheme = (p)=>{\n        r.colorScheme = p, a = s();\n    }, h;\n}\nfunction qm(e) {\n    return {\n        ...e,\n        content: [\n            \"_no_warnings_please\"\n        ]\n    };\n}\nvar Um = {\n    handler: ({ addUtilities: e })=>{\n        e({\n            \"shadow-sm\": {\n                boxShadow: \"0 1px 2px 0 rgb(0 0 0 / 0.05)\"\n            },\n            shadow: {\n                boxShadow: \"0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)\"\n            },\n            \"shadow-md\": {\n                boxShadow: \"0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)\"\n            },\n            \"shadow-lg\": {\n                boxShadow: \"0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)\"\n            },\n            \"shadow-xl\": {\n                boxShadow: \"0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)\"\n            },\n            \"shadow-2xl\": {\n                boxShadow: \"0 25px 50px -12px rgb(0 0 0 / 0.25)\"\n            },\n            \"shadow-inner\": {\n                boxShadow: \"inset 0 2px 4px 0 rgb(0 0 0 / 0.05)\"\n            },\n            \"shadow-none\": {\n                boxShadow: \"0 0 #0000\"\n            }\n        });\n    }\n};\nfunction Gm(e) {\n    return xl({\n        ...e,\n        plugins: [\n            ...(e == null ? void 0 : e.plugins) ?? [],\n            Um\n        ]\n    }, \"web\");\n}\nvar mn;\nfunction Ro({ width: e, height: t, config: n }) {\n    return mn || (mn = Gm(n)), mn.setWindowDimensions({\n        width: +e,\n        height: +t\n    }), mn;\n}\nvar Lo = /* @__PURE__ */ new WeakMap();\nasync function wl(e, t) {\n    let n = await qe();\n    if (!n || !n.Node) throw new Error(\"Satori is not initialized: expect `yoga` to be loaded, got \" + n);\n    t.fonts = t.fonts || [];\n    let r;\n    Lo.has(t.fonts) ? r = Lo.get(t.fonts) : Lo.set(t.fonts, r = new zt(t.fonts));\n    let i = \"width\" in t ? t.width : void 0, o = \"height\" in t ? t.height : void 0, u = n.Node.create();\n    i && u.setWidth(i), o && u.setHeight(o), u.setFlexDirection(n.FLEX_DIRECTION_ROW), u.setFlexWrap(n.WRAP_WRAP), u.setAlignContent(n.ALIGN_AUTO), u.setAlignItems(n.ALIGN_FLEX_START), u.setJustifyContent(n.JUSTIFY_FLEX_START), u.setOverflow(n.OVERFLOW_HIDDEN);\n    let s = {\n        ...t.graphemeImages\n    }, a = /* @__PURE__ */ new Set();\n    Re.clear(), await cu(e);\n    let l = qt(e, {\n        id: \"id\",\n        parentStyle: {},\n        inheritedStyle: {\n            fontSize: 16,\n            fontWeight: \"normal\",\n            fontFamily: \"serif\",\n            fontStyle: \"normal\",\n            lineHeight: 1.2,\n            color: \"black\",\n            opacity: 1,\n            whiteSpace: \"normal\",\n            _viewportWidth: i,\n            _viewportHeight: o\n        },\n        parent: u,\n        font: r,\n        embedFont: t.embedFont,\n        debug: t.debug,\n        graphemeImages: s,\n        canLoadAdditionalAssets: !!t.loadAdditionalAsset,\n        onNodeDetected: t.onNodeDetected,\n        getTwStyles: (p, m)=>{\n            let D = {\n                ...Ro({\n                    width: i,\n                    height: o,\n                    config: t.tailwindConfig\n                })([\n                    p\n                ])\n            };\n            return typeof D.lineHeight == \"number\" && (D.lineHeight = D.lineHeight / (+D.fontSize || m.fontSize || 16)), D.shadowColor && D.boxShadow && (D.boxShadow = D.boxShadow.replace(/rgba?\\([^)]+\\)/, D.shadowColor)), D;\n        }\n    }), f = (await l.next()).value;\n    if (t.loadAdditionalAsset && f.length) {\n        let p = jm(f), m = [], v = {};\n        await Promise.all(Object.entries(p).flatMap(([D, b])=>b.map((y)=>{\n                let F = `${D}_${y}`;\n                return a.has(F) ? null : (a.add(F), t.loadAdditionalAsset(D, y).then((x)=>{\n                    typeof x == \"string\" ? v[y] = x : x && (Array.isArray(x) ? m.push(...x) : m.push(x));\n                }));\n            }))), r.addFonts(m), Object.assign(s, v);\n    }\n    await l.next(), u.calculateLayout(i, o, n.DIRECTION_LTR);\n    let c = (await l.next([\n        0,\n        0\n    ])).value, d = u.getComputedWidth(), h = u.getComputedHeight();\n    return u.freeRecursive(), Vn({\n        width: d,\n        height: h,\n        content: c\n    });\n}\nfunction jm(e) {\n    let t = {}, n = {};\n    for (let { word: r, locale: i } of e){\n        let o = Wu(r, i).join(\"|\");\n        n[o] = n[o] || \"\", n[o] += r;\n    }\n    return Object.keys(n).forEach((r)=>{\n        t[r] = t[r] || [], r === \"emoji\" ? t[r].push(...Fl(be(n[r], \"grapheme\"))) : (t[r][0] = t[r][0] || \"\", t[r][0] += Fl(be(n[r], \"grapheme\", r === \"unknown\" ? void 0 : r)).join(\"\"));\n    }), t;\n}\nfunction Fl(e) {\n    return Array.from(new Set(e));\n}\n// node_modules/.pnpm/yoga-wasm-web@0.3.3/node_modules/yoga-wasm-web/dist/wrapAsm-f766f97f.js\nvar YGEnums = {};\nvar ALIGN_AUTO = YGEnums.ALIGN_AUTO = 0;\nvar ALIGN_FLEX_START = YGEnums.ALIGN_FLEX_START = 1;\nvar ALIGN_CENTER = YGEnums.ALIGN_CENTER = 2;\nvar ALIGN_FLEX_END = YGEnums.ALIGN_FLEX_END = 3;\nvar ALIGN_STRETCH = YGEnums.ALIGN_STRETCH = 4;\nvar ALIGN_BASELINE = YGEnums.ALIGN_BASELINE = 5;\nvar ALIGN_SPACE_BETWEEN = YGEnums.ALIGN_SPACE_BETWEEN = 6;\nvar ALIGN_SPACE_AROUND = YGEnums.ALIGN_SPACE_AROUND = 7;\nvar DIMENSION_WIDTH = YGEnums.DIMENSION_WIDTH = 0;\nvar DIMENSION_HEIGHT = YGEnums.DIMENSION_HEIGHT = 1;\nvar DIRECTION_INHERIT = YGEnums.DIRECTION_INHERIT = 0;\nvar DIRECTION_LTR = YGEnums.DIRECTION_LTR = 1;\nvar DIRECTION_RTL = YGEnums.DIRECTION_RTL = 2;\nvar DISPLAY_FLEX = YGEnums.DISPLAY_FLEX = 0;\nvar DISPLAY_NONE = YGEnums.DISPLAY_NONE = 1;\nvar EDGE_LEFT = YGEnums.EDGE_LEFT = 0;\nvar EDGE_TOP = YGEnums.EDGE_TOP = 1;\nvar EDGE_RIGHT = YGEnums.EDGE_RIGHT = 2;\nvar EDGE_BOTTOM = YGEnums.EDGE_BOTTOM = 3;\nvar EDGE_START = YGEnums.EDGE_START = 4;\nvar EDGE_END = YGEnums.EDGE_END = 5;\nvar EDGE_HORIZONTAL = YGEnums.EDGE_HORIZONTAL = 6;\nvar EDGE_VERTICAL = YGEnums.EDGE_VERTICAL = 7;\nvar EDGE_ALL = YGEnums.EDGE_ALL = 8;\nvar EXPERIMENTAL_FEATURE_WEB_FLEX_BASIS = YGEnums.EXPERIMENTAL_FEATURE_WEB_FLEX_BASIS = 0;\nvar EXPERIMENTAL_FEATURE_ABSOLUTE_PERCENTAGE_AGAINST_PADDING_EDGE = YGEnums.EXPERIMENTAL_FEATURE_ABSOLUTE_PERCENTAGE_AGAINST_PADDING_EDGE = 1;\nvar EXPERIMENTAL_FEATURE_FIX_ABSOLUTE_TRAILING_COLUMN_MARGIN = YGEnums.EXPERIMENTAL_FEATURE_FIX_ABSOLUTE_TRAILING_COLUMN_MARGIN = 2;\nvar FLEX_DIRECTION_COLUMN = YGEnums.FLEX_DIRECTION_COLUMN = 0;\nvar FLEX_DIRECTION_COLUMN_REVERSE = YGEnums.FLEX_DIRECTION_COLUMN_REVERSE = 1;\nvar FLEX_DIRECTION_ROW = YGEnums.FLEX_DIRECTION_ROW = 2;\nvar FLEX_DIRECTION_ROW_REVERSE = YGEnums.FLEX_DIRECTION_ROW_REVERSE = 3;\nvar GUTTER_COLUMN = YGEnums.GUTTER_COLUMN = 0;\nvar GUTTER_ROW = YGEnums.GUTTER_ROW = 1;\nvar GUTTER_ALL = YGEnums.GUTTER_ALL = 2;\nvar JUSTIFY_FLEX_START = YGEnums.JUSTIFY_FLEX_START = 0;\nvar JUSTIFY_CENTER = YGEnums.JUSTIFY_CENTER = 1;\nvar JUSTIFY_FLEX_END = YGEnums.JUSTIFY_FLEX_END = 2;\nvar JUSTIFY_SPACE_BETWEEN = YGEnums.JUSTIFY_SPACE_BETWEEN = 3;\nvar JUSTIFY_SPACE_AROUND = YGEnums.JUSTIFY_SPACE_AROUND = 4;\nvar JUSTIFY_SPACE_EVENLY = YGEnums.JUSTIFY_SPACE_EVENLY = 5;\nvar LOG_LEVEL_ERROR = YGEnums.LOG_LEVEL_ERROR = 0;\nvar LOG_LEVEL_WARN = YGEnums.LOG_LEVEL_WARN = 1;\nvar LOG_LEVEL_INFO = YGEnums.LOG_LEVEL_INFO = 2;\nvar LOG_LEVEL_DEBUG = YGEnums.LOG_LEVEL_DEBUG = 3;\nvar LOG_LEVEL_VERBOSE = YGEnums.LOG_LEVEL_VERBOSE = 4;\nvar LOG_LEVEL_FATAL = YGEnums.LOG_LEVEL_FATAL = 5;\nvar MEASURE_MODE_UNDEFINED = YGEnums.MEASURE_MODE_UNDEFINED = 0;\nvar MEASURE_MODE_EXACTLY = YGEnums.MEASURE_MODE_EXACTLY = 1;\nvar MEASURE_MODE_AT_MOST = YGEnums.MEASURE_MODE_AT_MOST = 2;\nvar NODE_TYPE_DEFAULT = YGEnums.NODE_TYPE_DEFAULT = 0;\nvar NODE_TYPE_TEXT = YGEnums.NODE_TYPE_TEXT = 1;\nvar OVERFLOW_VISIBLE = YGEnums.OVERFLOW_VISIBLE = 0;\nvar OVERFLOW_HIDDEN = YGEnums.OVERFLOW_HIDDEN = 1;\nvar OVERFLOW_SCROLL = YGEnums.OVERFLOW_SCROLL = 2;\nvar POSITION_TYPE_STATIC = YGEnums.POSITION_TYPE_STATIC = 0;\nvar POSITION_TYPE_RELATIVE = YGEnums.POSITION_TYPE_RELATIVE = 1;\nvar POSITION_TYPE_ABSOLUTE = YGEnums.POSITION_TYPE_ABSOLUTE = 2;\nvar PRINT_OPTIONS_LAYOUT = YGEnums.PRINT_OPTIONS_LAYOUT = 1;\nvar PRINT_OPTIONS_STYLE = YGEnums.PRINT_OPTIONS_STYLE = 2;\nvar PRINT_OPTIONS_CHILDREN = YGEnums.PRINT_OPTIONS_CHILDREN = 4;\nvar UNIT_UNDEFINED = YGEnums.UNIT_UNDEFINED = 0;\nvar UNIT_POINT = YGEnums.UNIT_POINT = 1;\nvar UNIT_PERCENT = YGEnums.UNIT_PERCENT = 2;\nvar UNIT_AUTO = YGEnums.UNIT_AUTO = 3;\nvar WRAP_NO_WRAP = YGEnums.WRAP_NO_WRAP = 0;\nvar WRAP_WRAP = YGEnums.WRAP_WRAP = 1;\nvar WRAP_WRAP_REVERSE = YGEnums.WRAP_WRAP_REVERSE = 2;\nvar wrapAsm = (E)=>{\n    function _(E2, _2, T3) {\n        let N2 = E2[_2];\n        E2[_2] = function(...E3) {\n            return T3.call(this, N2, ...E3);\n        };\n    }\n    for (let T3 of [\n        \"setPosition\",\n        \"setMargin\",\n        \"setFlexBasis\",\n        \"setWidth\",\n        \"setHeight\",\n        \"setMinWidth\",\n        \"setMinHeight\",\n        \"setMaxWidth\",\n        \"setMaxHeight\",\n        \"setPadding\"\n    ]){\n        let N2 = {\n            [YGEnums.UNIT_POINT]: E.Node.prototype[T3],\n            [YGEnums.UNIT_PERCENT]: E.Node.prototype[`${T3}Percent`],\n            [YGEnums.UNIT_AUTO]: E.Node.prototype[`${T3}Auto`]\n        };\n        _(E.Node.prototype, T3, function(E2, ..._2) {\n            let I, L;\n            let O = _2.pop();\n            if (O === \"auto\") I = YGEnums.UNIT_AUTO, L = void 0;\n            else if (typeof O == \"object\") I = O.unit, L = O.valueOf();\n            else if (I = typeof O == \"string\" && O.endsWith(\"%\") ? YGEnums.UNIT_PERCENT : YGEnums.UNIT_POINT, L = parseFloat(O), !Number.isNaN(O) && Number.isNaN(L)) throw Error(`Invalid value ${O} for ${T3}`);\n            if (!N2[I]) throw Error(`Failed to execute \"${T3}\": Unsupported unit '${O}'`);\n            return L !== void 0 ? N2[I].call(this, ..._2, L) : N2[I].call(this, ..._2);\n        });\n    }\n    function T2(_2) {\n        return E.MeasureCallback.implement({\n            measure: (...E2)=>{\n                let { width: T3, height: N2 } = _2(...E2);\n                return {\n                    width: T3 ?? NaN,\n                    height: N2 ?? NaN\n                };\n            }\n        });\n    }\n    function N(_2) {\n        return E.DirtiedCallback.implement({\n            dirtied: _2\n        });\n    }\n    return _(E.Node.prototype, \"setMeasureFunc\", function(E2, _2) {\n        return _2 ? E2.call(this, T2(_2)) : this.unsetMeasureFunc();\n    }), _(E.Node.prototype, \"setDirtiedFunc\", function(E2, _2) {\n        E2.call(this, N(_2));\n    }), _(E.Config.prototype, \"free\", function() {\n        E.Config.destroy(this);\n    }), _(E.Node, \"create\", (_2, T3)=>T3 ? E.Node.createWithConfig(T3) : E.Node.createDefault()), _(E.Node.prototype, \"free\", function() {\n        E.Node.destroy(this);\n    }), _(E.Node.prototype, \"freeRecursive\", function() {\n        for(let E2 = 0, _2 = this.getChildCount(); E2 < _2; ++E2)this.getChild(0).freeRecursive();\n        this.free();\n    }), _(E.Node.prototype, \"calculateLayout\", function(E2, _2 = NaN, T3 = NaN, N2 = YGEnums.DIRECTION_LTR) {\n        return E2.call(this, _2, T3, N2);\n    }), {\n        Config: E.Config,\n        Node: E.Node,\n        ...YGEnums\n    };\n};\n// node_modules/.pnpm/yoga-wasm-web@0.3.3/node_modules/yoga-wasm-web/dist/index.js\nvar yoga = (()=>{\n    var n = typeof document != \"undefined\" && document.currentScript ? document.currentScript.src : void 0;\n    return function(t = {}) {\n        u || (u = t !== void 0 ? t : {}), u.ready = new Promise(function(n2, t2) {\n            c = n2, f = t2;\n        });\n        var r, e, a = Object.assign({}, u), i = \"\";\n        typeof document != \"undefined\" && document.currentScript && (i = document.currentScript.src), n && (i = n), i = i.indexOf(\"blob:\") !== 0 ? i.substr(0, i.replace(/[?#].*/, \"\").lastIndexOf(\"/\") + 1) : \"\";\n        var o = console.log.bind(console), s = console.warn.bind(console);\n        Object.assign(u, a), a = null, typeof WebAssembly != \"object\" && w(\"no native wasm support detected\");\n        var u, c, f, l, h = false;\n        function p(n2, t2, r2) {\n            r2 = t2 + r2;\n            for(var e2 = \"\"; !(t2 >= r2);){\n                var a2 = n2[t2++];\n                if (!a2) break;\n                if (128 & a2) {\n                    var i2 = 63 & n2[t2++];\n                    if ((224 & a2) == 192) e2 += String.fromCharCode((31 & a2) << 6 | i2);\n                    else {\n                        var o2 = 63 & n2[t2++];\n                        65536 > (a2 = (240 & a2) == 224 ? (15 & a2) << 12 | i2 << 6 | o2 : (7 & a2) << 18 | i2 << 12 | o2 << 6 | 63 & n2[t2++]) ? e2 += String.fromCharCode(a2) : (a2 -= 65536, e2 += String.fromCharCode(55296 | a2 >> 10, 56320 | 1023 & a2));\n                    }\n                } else e2 += String.fromCharCode(a2);\n            }\n            return e2;\n        }\n        function v() {\n            var n2 = l.buffer;\n            u.HEAP8 = d = new Int8Array(n2), u.HEAP16 = m = new Int16Array(n2), u.HEAP32 = g2 = new Int32Array(n2), u.HEAPU8 = y = new Uint8Array(n2), u.HEAPU16 = E = new Uint16Array(n2), u.HEAPU32 = _ = new Uint32Array(n2), u.HEAPF32 = T2 = new Float32Array(n2), u.HEAPF64 = L = new Float64Array(n2);\n        }\n        var d, y, m, E, g2, _, T2, L, A, O = [], P = [], b = [], N = 0, I = null;\n        function w(n2) {\n            throw s(n2 = \"Aborted(\" + n2 + \")\"), h = true, f(n2 = new WebAssembly.RuntimeError(n2 + \". Build with -sASSERTIONS for more info.\")), n2;\n        }\n        function S2() {\n            return r.startsWith(\"data:application/octet-stream;base64,\");\n        }\n        function R() {\n            try {\n                throw \"both async and sync fetching of the wasm failed\";\n            } catch (n2) {\n                w(n2);\n            }\n        }\n        function C(n2) {\n            for(; 0 < n2.length;)n2.shift()(u);\n        }\n        function W2(n2) {\n            if (n2 === void 0) return \"_unknown\";\n            var t2 = (n2 = n2.replace(/[^a-zA-Z0-9_]/g, \"$\")).charCodeAt(0);\n            return 48 <= t2 && 57 >= t2 ? \"_\" + n2 : n2;\n        }\n        function U(n2, t2) {\n            return n2 = W2(n2), function() {\n                return t2.apply(this, arguments);\n            };\n        }\n        r = \"yoga.wasm\", S2() || (r = i + r);\n        var M = [\n            {},\n            {\n                value: void 0\n            },\n            {\n                value: null\n            },\n            {\n                value: true\n            },\n            {\n                value: false\n            }\n        ], F = [];\n        function D(n2) {\n            var t2 = Error, r2 = U(n2, function(t3) {\n                this.name = n2, this.message = t3, (t3 = Error(t3).stack) !== void 0 && (this.stack = this.toString() + \"\\n\" + t3.replace(/^Error(:[^\\n]*)?\\n/, \"\"));\n            });\n            return r2.prototype = Object.create(t2.prototype), r2.prototype.constructor = r2, r2.prototype.toString = function() {\n                return this.message === void 0 ? this.name : this.name + \": \" + this.message;\n            }, r2;\n        }\n        var k = void 0;\n        function V(n2) {\n            throw new k(n2);\n        }\n        var j = (n2)=>(n2 || V(\"Cannot use deleted val. handle = \" + n2), M[n2].value), G = (n2)=>{\n            switch(n2){\n                case void 0:\n                    return 1;\n                case null:\n                    return 2;\n                case true:\n                    return 3;\n                case false:\n                    return 4;\n                default:\n                    var t2 = F.length ? F.pop() : M.length;\n                    return M[t2] = {\n                        fa: 1,\n                        value: n2\n                    }, t2;\n            }\n        }, Y = void 0, X = void 0;\n        function B(n2) {\n            for(var t2 = \"\"; y[n2];)t2 += X[y[n2++]];\n            return t2;\n        }\n        var H = [];\n        function x() {\n            for(; H.length;){\n                var n2 = H.pop();\n                n2.L.Z = false, n2.delete();\n            }\n        }\n        var z2 = void 0, $ = {};\n        function Z(n2, t2) {\n            for(t2 === void 0 && V(\"ptr should not be undefined\"); n2.P;)t2 = n2.aa(t2), n2 = n2.P;\n            return t2;\n        }\n        var J = {};\n        function q(n2) {\n            var t2 = B(n2 = nz(n2));\n            return nZ(n2), t2;\n        }\n        function K(n2, t2) {\n            var r2 = J[n2];\n            return r2 === void 0 && V(t2 + \" has unknown type \" + q(n2)), r2;\n        }\n        function Q() {}\n        var nn2 = false;\n        function nt(n2) {\n            --n2.count.value, n2.count.value === 0 && (n2.S ? n2.T.V(n2.S) : n2.O.M.V(n2.N));\n        }\n        var nr = {}, ne = void 0;\n        function na(n2) {\n            throw new ne(n2);\n        }\n        function ni(n2, t2) {\n            return t2.O && t2.N || na(\"makeClassHandle requires ptr and ptrType\"), !!t2.T != !!t2.S && na(\"Both smartPtrType and smartPtr must be specified\"), t2.count = {\n                value: 1\n            }, no2(Object.create(n2, {\n                L: {\n                    value: t2\n                }\n            }));\n        }\n        function no2(n2) {\n            return typeof FinalizationRegistry == \"undefined\" ? (no2 = (n3)=>n3, n2) : (nn2 = new FinalizationRegistry((n3)=>{\n                nt(n3.L);\n            }), no2 = (n3)=>{\n                var t2 = n3.L;\n                return t2.S && nn2.register(n3, {\n                    L: t2\n                }, n3), n3;\n            }, Q = (n3)=>{\n                nn2.unregister(n3);\n            }, no2(n2));\n        }\n        var ns = {};\n        function nu2(n2) {\n            for(; n2.length;){\n                var t2 = n2.pop();\n                n2.pop()(t2);\n            }\n        }\n        function nc(n2) {\n            return this.fromWireType(g2[n2 >> 2]);\n        }\n        var nf2 = {}, nl2 = {};\n        function nh(n2, t2, r2) {\n            function e2(t3) {\n                (t3 = r2(t3)).length !== n2.length && na(\"Mismatched type converter count\");\n                for(var e3 = 0; e3 < n2.length; ++e3)nv(n2[e3], t3[e3]);\n            }\n            n2.forEach(function(n3) {\n                nl2[n3] = t2;\n            });\n            var a2 = Array(t2.length), i2 = [], o2 = 0;\n            t2.forEach((n3, t3)=>{\n                J.hasOwnProperty(n3) ? a2[t3] = J[n3] : (i2.push(n3), nf2.hasOwnProperty(n3) || (nf2[n3] = []), nf2[n3].push(()=>{\n                    a2[t3] = J[n3], ++o2 === i2.length && e2(a2);\n                }));\n            }), i2.length === 0 && e2(a2);\n        }\n        function np(n2) {\n            switch(n2){\n                case 1:\n                    return 0;\n                case 2:\n                    return 1;\n                case 4:\n                    return 2;\n                case 8:\n                    return 3;\n                default:\n                    throw TypeError(\"Unknown type size: \" + n2);\n            }\n        }\n        function nv(n2, t2, r2 = {}) {\n            if (!(\"argPackAdvance\" in t2)) throw TypeError(\"registerType registeredInstance requires argPackAdvance\");\n            var e2 = t2.name;\n            if (n2 || V('type \"' + e2 + '\" must have a positive integer typeid pointer'), J.hasOwnProperty(n2)) {\n                if (r2.ta) return;\n                V(\"Cannot register type '\" + e2 + \"' twice\");\n            }\n            J[n2] = t2, delete nl2[n2], nf2.hasOwnProperty(n2) && (t2 = nf2[n2], delete nf2[n2], t2.forEach((n3)=>n3()));\n        }\n        function nd(n2) {\n            V(n2.L.O.M.name + \" instance already deleted\");\n        }\n        function ny() {}\n        function nm(n2, t2, r2) {\n            if (n2[t2].R === void 0) {\n                var e2 = n2[t2];\n                n2[t2] = function() {\n                    return n2[t2].R.hasOwnProperty(arguments.length) || V(\"Function '\" + r2 + \"' called with an invalid number of arguments (\" + arguments.length + \") - expects one of (\" + n2[t2].R + \")!\"), n2[t2].R[arguments.length].apply(this, arguments);\n                }, n2[t2].R = [], n2[t2].R[e2.Y] = e2;\n            }\n        }\n        function nE(n2, t2, r2, e2, a2, i2, o2, s2) {\n            this.name = n2, this.constructor = t2, this.W = r2, this.V = e2, this.P = a2, this.oa = i2, this.aa = o2, this.ma = s2, this.ia = [];\n        }\n        function ng(n2, t2, r2) {\n            for(; t2 !== r2;)t2.aa || V(\"Expected null or instance of \" + r2.name + \", got an instance of \" + t2.name), n2 = t2.aa(n2), t2 = t2.P;\n            return n2;\n        }\n        function n_(n2, t2) {\n            return t2 === null ? (this.da && V(\"null is not a valid \" + this.name), 0) : (t2.L || V('Cannot pass \"' + nC(t2) + '\" as a ' + this.name), t2.L.N || V(\"Cannot pass deleted object as a pointer of type \" + this.name), ng(t2.L.N, t2.L.O.M, this.M));\n        }\n        function nT(n2, t2) {\n            if (t2 === null) {\n                if (this.da && V(\"null is not a valid \" + this.name), this.ca) {\n                    var r2 = this.ea();\n                    return n2 !== null && n2.push(this.V, r2), r2;\n                }\n                return 0;\n            }\n            if (t2.L || V('Cannot pass \"' + nC(t2) + '\" as a ' + this.name), t2.L.N || V(\"Cannot pass deleted object as a pointer of type \" + this.name), !this.ba && t2.L.O.ba && V(\"Cannot convert argument of type \" + (t2.L.T ? t2.L.T.name : t2.L.O.name) + \" to parameter type \" + this.name), r2 = ng(t2.L.N, t2.L.O.M, this.M), this.ca) switch(t2.L.S === void 0 && V(\"Passing raw pointer to smart pointer is illegal\"), this.Aa){\n                case 0:\n                    t2.L.T === this ? r2 = t2.L.S : V(\"Cannot convert argument of type \" + (t2.L.T ? t2.L.T.name : t2.L.O.name) + \" to parameter type \" + this.name);\n                    break;\n                case 1:\n                    r2 = t2.L.S;\n                    break;\n                case 2:\n                    if (t2.L.T === this) r2 = t2.L.S;\n                    else {\n                        var e2 = t2.clone();\n                        r2 = this.wa(r2, G(function() {\n                            e2.delete();\n                        })), n2 !== null && n2.push(this.V, r2);\n                    }\n                    break;\n                default:\n                    V(\"Unsupporting sharing policy\");\n            }\n            return r2;\n        }\n        function nL(n2, t2) {\n            return t2 === null ? (this.da && V(\"null is not a valid \" + this.name), 0) : (t2.L || V('Cannot pass \"' + nC(t2) + '\" as a ' + this.name), t2.L.N || V(\"Cannot pass deleted object as a pointer of type \" + this.name), t2.L.O.ba && V(\"Cannot convert argument of type \" + t2.L.O.name + \" to parameter type \" + this.name), ng(t2.L.N, t2.L.O.M, this.M));\n        }\n        function nA(n2, t2, r2, e2) {\n            this.name = n2, this.M = t2, this.da = r2, this.ba = e2, this.ca = false, this.V = this.wa = this.ea = this.ja = this.Aa = this.va = void 0, t2.P !== void 0 ? this.toWireType = nT : (this.toWireType = e2 ? n_ : nL, this.U = null);\n        }\n        var nO = [];\n        function nP(n2) {\n            var t2 = nO[n2];\n            return t2 || (n2 >= nO.length && (nO.length = n2 + 1), nO[n2] = t2 = A.get(n2)), t2;\n        }\n        function nb(n2, t2) {\n            var r2, e2, a2 = (n2 = B(n2)).includes(\"j\") ? (r2 = n2, e2 = [], function() {\n                if (e2.length = 0, Object.assign(e2, arguments), r2.includes(\"j\")) {\n                    var n3 = u[\"dynCall_\" + r2];\n                    n3 = e2 && e2.length ? n3.apply(null, [\n                        t2\n                    ].concat(e2)) : n3.call(null, t2);\n                } else n3 = nP(t2).apply(null, e2);\n                return n3;\n            }) : nP(t2);\n            return typeof a2 != \"function\" && V(\"unknown function pointer with signature \" + n2 + \": \" + t2), a2;\n        }\n        var nN = void 0;\n        function nI(n2, t2) {\n            var r2 = [], e2 = {};\n            throw t2.forEach(function n3(t3) {\n                e2[t3] || J[t3] || (nl2[t3] ? nl2[t3].forEach(n3) : (r2.push(t3), e2[t3] = true));\n            }), new nN(n2 + \": \" + r2.map(q).join([\n                \", \"\n            ]));\n        }\n        function nw(n2, t2, r2, e2, a2) {\n            var i2 = t2.length;\n            2 > i2 && V(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");\n            var o2 = t2[1] !== null && r2 !== null, s2 = false;\n            for(r2 = 1; r2 < t2.length; ++r2)if (t2[r2] !== null && t2[r2].U === void 0) {\n                s2 = true;\n                break;\n            }\n            var u2 = t2[0].name !== \"void\", c2 = i2 - 2, f2 = Array(c2), l2 = [], h2 = [];\n            return function() {\n                if (arguments.length !== c2 && V(\"function \" + n2 + \" called with \" + arguments.length + \" arguments, expected \" + c2 + \" args!\"), h2.length = 0, l2.length = o2 ? 2 : 1, l2[0] = a2, o2) {\n                    var r3 = t2[1].toWireType(h2, this);\n                    l2[1] = r3;\n                }\n                for(var i3 = 0; i3 < c2; ++i3)f2[i3] = t2[i3 + 2].toWireType(h2, arguments[i3]), l2.push(f2[i3]);\n                if (i3 = e2.apply(null, l2), s2) nu2(h2);\n                else for(var p2 = o2 ? 1 : 2; p2 < t2.length; p2++){\n                    var v2 = p2 === 1 ? r3 : f2[p2 - 2];\n                    t2[p2].U !== null && t2[p2].U(v2);\n                }\n                return u2 ? t2[0].fromWireType(i3) : void 0;\n            };\n        }\n        function nS(n2, t2) {\n            for(var r2 = [], e2 = 0; e2 < n2; e2++)r2.push(_[t2 + 4 * e2 >> 2]);\n            return r2;\n        }\n        function nR(n2) {\n            4 < n2 && --M[n2].fa == 0 && (M[n2] = void 0, F.push(n2));\n        }\n        function nC(n2) {\n            if (n2 === null) return \"null\";\n            var t2 = typeof n2;\n            return t2 === \"object\" || t2 === \"array\" || t2 === \"function\" ? n2.toString() : \"\" + n2;\n        }\n        function nW(n2, t2) {\n            for(var r2 = \"\", e2 = 0; !(e2 >= t2 / 2); ++e2){\n                var a2 = m[n2 + 2 * e2 >> 1];\n                if (a2 == 0) break;\n                r2 += String.fromCharCode(a2);\n            }\n            return r2;\n        }\n        function nU(n2, t2, r2) {\n            if (r2 === void 0 && (r2 = 2147483647), 2 > r2) return 0;\n            r2 -= 2;\n            var e2 = t2;\n            r2 = r2 < 2 * n2.length ? r2 / 2 : n2.length;\n            for(var a2 = 0; a2 < r2; ++a2)m[t2 >> 1] = n2.charCodeAt(a2), t2 += 2;\n            return m[t2 >> 1] = 0, t2 - e2;\n        }\n        function nM(n2) {\n            return 2 * n2.length;\n        }\n        function nF(n2, t2) {\n            for(var r2 = 0, e2 = \"\"; !(r2 >= t2 / 4);){\n                var a2 = g2[n2 + 4 * r2 >> 2];\n                if (a2 == 0) break;\n                ++r2, 65536 <= a2 ? (a2 -= 65536, e2 += String.fromCharCode(55296 | a2 >> 10, 56320 | 1023 & a2)) : e2 += String.fromCharCode(a2);\n            }\n            return e2;\n        }\n        function nD(n2, t2, r2) {\n            if (r2 === void 0 && (r2 = 2147483647), 4 > r2) return 0;\n            var e2 = t2;\n            r2 = e2 + r2 - 4;\n            for(var a2 = 0; a2 < n2.length; ++a2){\n                var i2 = n2.charCodeAt(a2);\n                if (55296 <= i2 && 57343 >= i2 && (i2 = 65536 + ((1023 & i2) << 10) | 1023 & n2.charCodeAt(++a2)), g2[t2 >> 2] = i2, (t2 += 4) + 4 > r2) break;\n            }\n            return g2[t2 >> 2] = 0, t2 - e2;\n        }\n        function nk(n2) {\n            for(var t2 = 0, r2 = 0; r2 < n2.length; ++r2){\n                var e2 = n2.charCodeAt(r2);\n                55296 <= e2 && 57343 >= e2 && ++r2, t2 += 4;\n            }\n            return t2;\n        }\n        var nV = {};\n        function nj(n2) {\n            var t2 = nV[n2];\n            return t2 === void 0 ? B(n2) : t2;\n        }\n        var nG = [], nY = [], nX = [\n            null,\n            [],\n            []\n        ];\n        k = u.BindingError = D(\"BindingError\"), u.count_emval_handles = function() {\n            for(var n2 = 0, t2 = 5; t2 < M.length; ++t2)M[t2] !== void 0 && ++n2;\n            return n2;\n        }, u.get_first_emval = function() {\n            for(var n2 = 5; n2 < M.length; ++n2)if (M[n2] !== void 0) return M[n2];\n            return null;\n        }, Y = u.PureVirtualError = D(\"PureVirtualError\");\n        for(var nB = Array(256), nH = 0; 256 > nH; ++nH)nB[nH] = String.fromCharCode(nH);\n        X = nB, u.getInheritedInstanceCount = function() {\n            return Object.keys($).length;\n        }, u.getLiveInheritedInstances = function() {\n            var n2, t2 = [];\n            for(n2 in $)$.hasOwnProperty(n2) && t2.push($[n2]);\n            return t2;\n        }, u.flushPendingDeletes = x, u.setDelayFunction = function(n2) {\n            z2 = n2, H.length && z2 && z2(x);\n        }, ne = u.InternalError = D(\"InternalError\"), ny.prototype.isAliasOf = function(n2) {\n            if (!(this instanceof ny && n2 instanceof ny)) return false;\n            var t2 = this.L.O.M, r2 = this.L.N, e2 = n2.L.O.M;\n            for(n2 = n2.L.N; t2.P;)r2 = t2.aa(r2), t2 = t2.P;\n            for(; e2.P;)n2 = e2.aa(n2), e2 = e2.P;\n            return t2 === e2 && r2 === n2;\n        }, ny.prototype.clone = function() {\n            if (this.L.N || nd(this), this.L.$) return this.L.count.value += 1, this;\n            var n2 = no2, t2 = Object, r2 = t2.create, e2 = Object.getPrototypeOf(this), a2 = this.L;\n            return n2 = n2(r2.call(t2, e2, {\n                L: {\n                    value: {\n                        count: a2.count,\n                        Z: a2.Z,\n                        $: a2.$,\n                        N: a2.N,\n                        O: a2.O,\n                        S: a2.S,\n                        T: a2.T\n                    }\n                }\n            })), n2.L.count.value += 1, n2.L.Z = false, n2;\n        }, ny.prototype.delete = function() {\n            this.L.N || nd(this), this.L.Z && !this.L.$ && V(\"Object already scheduled for deletion\"), Q(this), nt(this.L), this.L.$ || (this.L.S = void 0, this.L.N = void 0);\n        }, ny.prototype.isDeleted = function() {\n            return !this.L.N;\n        }, ny.prototype.deleteLater = function() {\n            return this.L.N || nd(this), this.L.Z && !this.L.$ && V(\"Object already scheduled for deletion\"), H.push(this), H.length === 1 && z2 && z2(x), this.L.Z = true, this;\n        }, nA.prototype.pa = function(n2) {\n            return this.ja && (n2 = this.ja(n2)), n2;\n        }, nA.prototype.ga = function(n2) {\n            this.V && this.V(n2);\n        }, nA.prototype.argPackAdvance = 8, nA.prototype.readValueFromPointer = nc, nA.prototype.deleteObject = function(n2) {\n            n2 !== null && n2.delete();\n        }, nA.prototype.fromWireType = function(n2) {\n            function t2() {\n                return this.ca ? ni(this.M.W, {\n                    O: this.va,\n                    N: e2,\n                    T: this,\n                    S: n2\n                }) : ni(this.M.W, {\n                    O: this,\n                    N: n2\n                });\n            }\n            var r2, e2 = this.pa(n2);\n            if (!e2) return this.ga(n2), null;\n            var a2 = $[Z(this.M, e2)];\n            if (a2 !== void 0) return a2.L.count.value === 0 ? (a2.L.N = e2, a2.L.S = n2, a2.clone()) : (a2 = a2.clone(), this.ga(n2), a2);\n            if (!(a2 = nr[a2 = this.M.oa(e2)])) return t2.call(this);\n            a2 = this.ba ? a2.ka : a2.pointerType;\n            var i2 = function n3(t3, r3, e3) {\n                return r3 === e3 ? t3 : e3.P === void 0 ? null : (t3 = n3(t3, r3, e3.P)) === null ? null : e3.ma(t3);\n            }(e2, this.M, a2.M);\n            return i2 === null ? t2.call(this) : this.ca ? ni(a2.M.W, {\n                O: a2,\n                N: i2,\n                T: this,\n                S: n2\n            }) : ni(a2.M.W, {\n                O: a2,\n                N: i2\n            });\n        }, nN = u.UnboundTypeError = D(\"UnboundTypeError\");\n        var nx = {\n            q: function(n2, t2, r2) {\n                n2 = B(n2), t2 = K(t2, \"wrapper\"), r2 = j(r2);\n                var e2 = [].slice, a2 = t2.M, i2 = a2.W, o2 = a2.P.W, s2 = a2.P.constructor;\n                for(var u2 in n2 = U(n2, function() {\n                    a2.P.ia.forEach((function(n3) {\n                        if (this[n3] === o2[n3]) throw new Y(\"Pure virtual function \" + n3 + \" must be implemented in JavaScript\");\n                    }).bind(this)), Object.defineProperty(this, \"__parent\", {\n                        value: i2\n                    }), this.__construct.apply(this, e2.call(arguments));\n                }), i2.__construct = function() {\n                    this === i2 && V(\"Pass correct 'this' to __construct\");\n                    var n3 = s2.implement.apply(void 0, [\n                        this\n                    ].concat(e2.call(arguments)));\n                    Q(n3);\n                    var t3 = n3.L;\n                    n3.notifyOnDestruction(), t3.$ = true, Object.defineProperties(this, {\n                        L: {\n                            value: t3\n                        }\n                    }), no2(this), n3 = Z(a2, n3 = t3.N), $.hasOwnProperty(n3) ? V(\"Tried to register registered instance: \" + n3) : $[n3] = this;\n                }, i2.__destruct = function() {\n                    this === i2 && V(\"Pass correct 'this' to __destruct\"), Q(this);\n                    var n3 = this.L.N;\n                    n3 = Z(a2, n3), $.hasOwnProperty(n3) ? delete $[n3] : V(\"Tried to unregister unregistered instance: \" + n3);\n                }, n2.prototype = Object.create(i2), r2)n2.prototype[u2] = r2[u2];\n                return G(n2);\n            },\n            l: function(n2) {\n                var t2 = ns[n2];\n                delete ns[n2];\n                var r2 = t2.ea, e2 = t2.V, a2 = t2.ha;\n                nh([\n                    n2\n                ], a2.map((n3)=>n3.sa).concat(a2.map((n3)=>n3.ya)), (n3)=>{\n                    var i2 = {};\n                    return a2.forEach((t3, r3)=>{\n                        var e3 = n3[r3], o2 = t3.qa, s2 = t3.ra, u2 = n3[r3 + a2.length], c2 = t3.xa, f2 = t3.za;\n                        i2[t3.na] = {\n                            read: (n4)=>e3.fromWireType(o2(s2, n4)),\n                            write: (n4, t4)=>{\n                                var r4 = [];\n                                c2(f2, n4, u2.toWireType(r4, t4)), nu2(r4);\n                            }\n                        };\n                    }), [\n                        {\n                            name: t2.name,\n                            fromWireType: function(n4) {\n                                var t3, r3 = {};\n                                for(t3 in i2)r3[t3] = i2[t3].read(n4);\n                                return e2(n4), r3;\n                            },\n                            toWireType: function(n4, t3) {\n                                for(var a3 in i2)if (!(a3 in t3)) throw TypeError('Missing field:  \"' + a3 + '\"');\n                                var o2 = r2();\n                                for(a3 in i2)i2[a3].write(o2, t3[a3]);\n                                return n4 !== null && n4.push(e2, o2), o2;\n                            },\n                            argPackAdvance: 8,\n                            readValueFromPointer: nc,\n                            U: e2\n                        }\n                    ];\n                });\n            },\n            v: function() {},\n            B: function(n2, t2, r2, e2, a2) {\n                var i2 = np(r2);\n                nv(n2, {\n                    name: t2 = B(t2),\n                    fromWireType: function(n3) {\n                        return !!n3;\n                    },\n                    toWireType: function(n3, t3) {\n                        return t3 ? e2 : a2;\n                    },\n                    argPackAdvance: 8,\n                    readValueFromPointer: function(n3) {\n                        if (r2 === 1) var e3 = d;\n                        else if (r2 === 2) e3 = m;\n                        else if (r2 === 4) e3 = g2;\n                        else throw TypeError(\"Unknown boolean type size: \" + t2);\n                        return this.fromWireType(e3[n3 >> i2]);\n                    },\n                    U: null\n                });\n            },\n            h: function(n2, t2, r2, e2, a2, i2, o2, s2, c2, f2, l2, h2, p2) {\n                l2 = B(l2), i2 = nb(a2, i2), s2 && (s2 = nb(o2, s2)), f2 && (f2 = nb(c2, f2)), p2 = nb(h2, p2);\n                var v2, d2 = W2(l2);\n                v2 = function() {\n                    nI(\"Cannot construct \" + l2 + \" due to unbound types\", [\n                        e2\n                    ]);\n                }, u.hasOwnProperty(d2) ? (V(\"Cannot register public name '\" + d2 + \"' twice\"), nm(u, d2, d2), u.hasOwnProperty(void 0) && V(\"Cannot register multiple overloads of a function with the same number of arguments (undefined)!\"), u[d2].R[void 0] = v2) : u[d2] = v2, nh([\n                    n2,\n                    t2,\n                    r2\n                ], e2 ? [\n                    e2\n                ] : [], function(t3) {\n                    if (t3 = t3[0], e2) var r3, a3 = t3.M, o3 = a3.W;\n                    else o3 = ny.prototype;\n                    t3 = U(d2, function() {\n                        if (Object.getPrototypeOf(this) !== c3) throw new k(\"Use 'new' to construct \" + l2);\n                        if (h3.X === void 0) throw new k(l2 + \" has no accessible constructor\");\n                        var n3 = h3.X[arguments.length];\n                        if (n3 === void 0) throw new k(\"Tried to invoke ctor of \" + l2 + \" with invalid number of parameters (\" + arguments.length + \") - expected (\" + Object.keys(h3.X).toString() + \") parameters instead!\");\n                        return n3.apply(this, arguments);\n                    });\n                    var c3 = Object.create(o3, {\n                        constructor: {\n                            value: t3\n                        }\n                    });\n                    t3.prototype = c3;\n                    var h3 = new nE(l2, t3, c3, p2, a3, i2, s2, f2);\n                    a3 = new nA(l2, h3, true, false), o3 = new nA(l2 + \"*\", h3, false, false);\n                    var v3 = new nA(l2 + \" const*\", h3, false, true);\n                    return nr[n2] = {\n                        pointerType: o3,\n                        ka: v3\n                    }, r3 = t3, u.hasOwnProperty(d2) || na(\"Replacing nonexistant public symbol\"), u[d2] = r3, u[d2].Y = void 0, [\n                        a3,\n                        o3,\n                        v3\n                    ];\n                });\n            },\n            d: function(n2, t2, r2, e2, a2, i2, o2) {\n                var s2 = nS(r2, e2);\n                t2 = B(t2), i2 = nb(a2, i2), nh([], [\n                    n2\n                ], function(n3) {\n                    function e3() {\n                        nI(\"Cannot call \" + a3 + \" due to unbound types\", s2);\n                    }\n                    var a3 = (n3 = n3[0]).name + \".\" + t2;\n                    t2.startsWith(\"@@\") && (t2 = Symbol[t2.substring(2)]);\n                    var u2 = n3.M.constructor;\n                    return u2[t2] === void 0 ? (e3.Y = r2 - 1, u2[t2] = e3) : (nm(u2, t2, a3), u2[t2].R[r2 - 1] = e3), nh([], s2, function(n4) {\n                        return n4 = nw(a3, [\n                            n4[0],\n                            null\n                        ].concat(n4.slice(1)), null, i2, o2), u2[t2].R === void 0 ? (n4.Y = r2 - 1, u2[t2] = n4) : u2[t2].R[r2 - 1] = n4, [];\n                    }), [];\n                });\n            },\n            p: function(n2, t2, r2, e2, a2, i2) {\n                0 < t2 || w();\n                var o2 = nS(t2, r2);\n                a2 = nb(e2, a2), nh([], [\n                    n2\n                ], function(n3) {\n                    var r3 = \"constructor \" + (n3 = n3[0]).name;\n                    if (n3.M.X === void 0 && (n3.M.X = []), n3.M.X[t2 - 1] !== void 0) throw new k(\"Cannot register multiple constructors with identical number of parameters (\" + (t2 - 1) + \") for class '\" + n3.name + \"'! Overload resolution is currently only performed using the parameter count, not actual type info!\");\n                    return n3.M.X[t2 - 1] = ()=>{\n                        nI(\"Cannot construct \" + n3.name + \" due to unbound types\", o2);\n                    }, nh([], o2, function(e3) {\n                        return e3.splice(1, 0, null), n3.M.X[t2 - 1] = nw(r3, e3, null, a2, i2), [];\n                    }), [];\n                });\n            },\n            a: function(n2, t2, r2, e2, a2, i2, o2, s2) {\n                var u2 = nS(r2, e2);\n                t2 = B(t2), i2 = nb(a2, i2), nh([], [\n                    n2\n                ], function(n3) {\n                    function e3() {\n                        nI(\"Cannot call \" + a3 + \" due to unbound types\", u2);\n                    }\n                    var a3 = (n3 = n3[0]).name + \".\" + t2;\n                    t2.startsWith(\"@@\") && (t2 = Symbol[t2.substring(2)]), s2 && n3.M.ia.push(t2);\n                    var c2 = n3.M.W, f2 = c2[t2];\n                    return f2 === void 0 || f2.R === void 0 && f2.className !== n3.name && f2.Y === r2 - 2 ? (e3.Y = r2 - 2, e3.className = n3.name, c2[t2] = e3) : (nm(c2, t2, a3), c2[t2].R[r2 - 2] = e3), nh([], u2, function(e4) {\n                        return e4 = nw(a3, e4, n3, i2, o2), c2[t2].R === void 0 ? (e4.Y = r2 - 2, c2[t2] = e4) : c2[t2].R[r2 - 2] = e4, [];\n                    }), [];\n                });\n            },\n            A: function(n2, t2) {\n                nv(n2, {\n                    name: t2 = B(t2),\n                    fromWireType: function(n3) {\n                        var t3 = j(n3);\n                        return nR(n3), t3;\n                    },\n                    toWireType: function(n3, t3) {\n                        return G(t3);\n                    },\n                    argPackAdvance: 8,\n                    readValueFromPointer: nc,\n                    U: null\n                });\n            },\n            n: function(n2, t2, r2) {\n                r2 = np(r2), nv(n2, {\n                    name: t2 = B(t2),\n                    fromWireType: function(n3) {\n                        return n3;\n                    },\n                    toWireType: function(n3, t3) {\n                        return t3;\n                    },\n                    argPackAdvance: 8,\n                    readValueFromPointer: function(n3, t3) {\n                        switch(t3){\n                            case 2:\n                                return function(n4) {\n                                    return this.fromWireType(T2[n4 >> 2]);\n                                };\n                            case 3:\n                                return function(n4) {\n                                    return this.fromWireType(L[n4 >> 3]);\n                                };\n                            default:\n                                throw TypeError(\"Unknown float type: \" + n3);\n                        }\n                    }(t2, r2),\n                    U: null\n                });\n            },\n            e: function(n2, t2, r2, e2, a2) {\n                t2 = B(t2), a2 === -1 && (a2 = 4294967295), a2 = np(r2);\n                var i2 = (n3)=>n3;\n                if (e2 === 0) {\n                    var o2 = 32 - 8 * r2;\n                    i2 = (n3)=>n3 << o2 >>> o2;\n                }\n                r2 = t2.includes(\"unsigned\") ? function(n3, t3) {\n                    return t3 >>> 0;\n                } : function(n3, t3) {\n                    return t3;\n                }, nv(n2, {\n                    name: t2,\n                    fromWireType: i2,\n                    toWireType: r2,\n                    argPackAdvance: 8,\n                    readValueFromPointer: function(n3, t3, r3) {\n                        switch(t3){\n                            case 0:\n                                return r3 ? function(n4) {\n                                    return d[n4];\n                                } : function(n4) {\n                                    return y[n4];\n                                };\n                            case 1:\n                                return r3 ? function(n4) {\n                                    return m[n4 >> 1];\n                                } : function(n4) {\n                                    return E[n4 >> 1];\n                                };\n                            case 2:\n                                return r3 ? function(n4) {\n                                    return g2[n4 >> 2];\n                                } : function(n4) {\n                                    return _[n4 >> 2];\n                                };\n                            default:\n                                throw TypeError(\"Unknown integer type: \" + n3);\n                        }\n                    }(t2, a2, e2 !== 0),\n                    U: null\n                });\n            },\n            b: function(n2, t2, r2) {\n                function e2(n3) {\n                    n3 >>= 2;\n                    var t3 = _;\n                    return new a2(t3.buffer, t3[n3 + 1], t3[n3]);\n                }\n                var a2 = [\n                    Int8Array,\n                    Uint8Array,\n                    Int16Array,\n                    Uint16Array,\n                    Int32Array,\n                    Uint32Array,\n                    Float32Array,\n                    Float64Array\n                ][t2];\n                nv(n2, {\n                    name: r2 = B(r2),\n                    fromWireType: e2,\n                    argPackAdvance: 8,\n                    readValueFromPointer: e2\n                }, {\n                    ta: true\n                });\n            },\n            o: function(n2, t2) {\n                var r2 = (t2 = B(t2)) === \"std::string\";\n                nv(n2, {\n                    name: t2,\n                    fromWireType: function(n3) {\n                        var t3 = _[n3 >> 2], e2 = n3 + 4;\n                        if (r2) for(var a2 = e2, i2 = 0; i2 <= t3; ++i2){\n                            var o2 = e2 + i2;\n                            if (i2 == t3 || y[o2] == 0) {\n                                if (a2 = a2 ? p(y, a2, o2 - a2) : \"\", s2 === void 0) var s2 = a2;\n                                else s2 += \"\\x00\" + a2;\n                                a2 = o2 + 1;\n                            }\n                        }\n                        else {\n                            for(i2 = 0, s2 = Array(t3); i2 < t3; ++i2)s2[i2] = String.fromCharCode(y[e2 + i2]);\n                            s2 = s2.join(\"\");\n                        }\n                        return nZ(n3), s2;\n                    },\n                    toWireType: function(n3, t3) {\n                        t3 instanceof ArrayBuffer && (t3 = new Uint8Array(t3));\n                        var e2, a2 = typeof t3 == \"string\";\n                        if (a2 || t3 instanceof Uint8Array || t3 instanceof Uint8ClampedArray || t3 instanceof Int8Array || V(\"Cannot pass non-string to std::string\"), r2 && a2) {\n                            var i2 = 0;\n                            for(e2 = 0; e2 < t3.length; ++e2){\n                                var o2 = t3.charCodeAt(e2);\n                                127 >= o2 ? i2++ : 2047 >= o2 ? i2 += 2 : 55296 <= o2 && 57343 >= o2 ? (i2 += 4, ++e2) : i2 += 3;\n                            }\n                            e2 = i2;\n                        } else e2 = t3.length;\n                        if (o2 = (i2 = n$(4 + e2 + 1)) + 4, _[i2 >> 2] = e2, r2 && a2) {\n                            if (a2 = o2, o2 = e2 + 1, e2 = y, 0 < o2) {\n                                o2 = a2 + o2 - 1;\n                                for(var s2 = 0; s2 < t3.length; ++s2){\n                                    var u2 = t3.charCodeAt(s2);\n                                    if (55296 <= u2 && 57343 >= u2 && (u2 = 65536 + ((1023 & u2) << 10) | 1023 & t3.charCodeAt(++s2)), 127 >= u2) {\n                                        if (a2 >= o2) break;\n                                        e2[a2++] = u2;\n                                    } else {\n                                        if (2047 >= u2) {\n                                            if (a2 + 1 >= o2) break;\n                                            e2[a2++] = 192 | u2 >> 6;\n                                        } else {\n                                            if (65535 >= u2) {\n                                                if (a2 + 2 >= o2) break;\n                                                e2[a2++] = 224 | u2 >> 12;\n                                            } else {\n                                                if (a2 + 3 >= o2) break;\n                                                e2[a2++] = 240 | u2 >> 18, e2[a2++] = 128 | u2 >> 12 & 63;\n                                            }\n                                            e2[a2++] = 128 | u2 >> 6 & 63;\n                                        }\n                                        e2[a2++] = 128 | 63 & u2;\n                                    }\n                                }\n                                e2[a2] = 0;\n                            }\n                        } else if (a2) for(a2 = 0; a2 < e2; ++a2)255 < (s2 = t3.charCodeAt(a2)) && (nZ(o2), V(\"String has UTF-16 code units that do not fit in 8 bits\")), y[o2 + a2] = s2;\n                        else for(a2 = 0; a2 < e2; ++a2)y[o2 + a2] = t3[a2];\n                        return n3 !== null && n3.push(nZ, i2), i2;\n                    },\n                    argPackAdvance: 8,\n                    readValueFromPointer: nc,\n                    U: function(n3) {\n                        nZ(n3);\n                    }\n                });\n            },\n            k: function(n2, t2, r2) {\n                if (r2 = B(r2), t2 === 2) var e2 = nW, a2 = nU, i2 = nM, o2 = ()=>E, s2 = 1;\n                else t2 === 4 && (e2 = nF, a2 = nD, i2 = nk, o2 = ()=>_, s2 = 2);\n                nv(n2, {\n                    name: r2,\n                    fromWireType: function(n3) {\n                        for(var r3, a3 = _[n3 >> 2], i3 = o2(), u2 = n3 + 4, c2 = 0; c2 <= a3; ++c2){\n                            var f2 = n3 + 4 + c2 * t2;\n                            (c2 == a3 || i3[f2 >> s2] == 0) && (u2 = e2(u2, f2 - u2), r3 === void 0 ? r3 = u2 : r3 += \"\\x00\" + u2, u2 = f2 + t2);\n                        }\n                        return nZ(n3), r3;\n                    },\n                    toWireType: function(n3, e3) {\n                        typeof e3 != \"string\" && V(\"Cannot pass non-string to C++ string type \" + r2);\n                        var o3 = i2(e3), u2 = n$(4 + o3 + t2);\n                        return _[u2 >> 2] = o3 >> s2, a2(e3, u2 + 4, o3 + t2), n3 !== null && n3.push(nZ, u2), u2;\n                    },\n                    argPackAdvance: 8,\n                    readValueFromPointer: nc,\n                    U: function(n3) {\n                        nZ(n3);\n                    }\n                });\n            },\n            m: function(n2, t2, r2, e2, a2, i2) {\n                ns[n2] = {\n                    name: B(t2),\n                    ea: nb(r2, e2),\n                    V: nb(a2, i2),\n                    ha: []\n                };\n            },\n            c: function(n2, t2, r2, e2, a2, i2, o2, s2, u2, c2) {\n                ns[n2].ha.push({\n                    na: B(t2),\n                    sa: r2,\n                    qa: nb(e2, a2),\n                    ra: i2,\n                    ya: o2,\n                    xa: nb(s2, u2),\n                    za: c2\n                });\n            },\n            C: function(n2, t2) {\n                nv(n2, {\n                    ua: true,\n                    name: t2 = B(t2),\n                    argPackAdvance: 0,\n                    fromWireType: function() {},\n                    toWireType: function() {}\n                });\n            },\n            t: function(n2, t2, r2, e2, a2) {\n                n2 = nG[n2], t2 = j(t2), r2 = nj(r2);\n                var i2 = [];\n                return _[e2 >> 2] = G(i2), n2(t2, r2, i2, a2);\n            },\n            j: function(n2, t2, r2, e2) {\n                n2 = nG[n2], n2(t2 = j(t2), r2 = nj(r2), null, e2);\n            },\n            f: nR,\n            g: function(n2, t2) {\n                var r2, e2, a2 = function(n3, t3) {\n                    for(var r3 = Array(n3), e3 = 0; e3 < n3; ++e3)r3[e3] = K(_[t3 + 4 * e3 >> 2], \"parameter \" + e3);\n                    return r3;\n                }(n2, t2), i2 = a2[0], o2 = nY[t2 = i2.name + \"_$\" + a2.slice(1).map(function(n3) {\n                    return n3.name;\n                }).join(\"_\") + \"$\"];\n                if (o2 !== void 0) return o2;\n                var s2 = Array(n2 - 1);\n                return r2 = (t3, r3, e3, o3)=>{\n                    for(var u2 = 0, c2 = 0; c2 < n2 - 1; ++c2)s2[c2] = a2[c2 + 1].readValueFromPointer(o3 + u2), u2 += a2[c2 + 1].argPackAdvance;\n                    for(c2 = 0, t3 = t3[r3].apply(t3, s2); c2 < n2 - 1; ++c2)a2[c2 + 1].la && a2[c2 + 1].la(s2[c2]);\n                    if (!i2.ua) return i2.toWireType(e3, t3);\n                }, e2 = nG.length, nG.push(r2), o2 = e2, nY[t2] = o2;\n            },\n            r: function(n2) {\n                4 < n2 && (M[n2].fa += 1);\n            },\n            s: function(n2) {\n                nu2(j(n2)), nR(n2);\n            },\n            i: function() {\n                w(\"\");\n            },\n            x: function(n2, t2, r2) {\n                y.copyWithin(n2, t2, t2 + r2);\n            },\n            w: function(n2) {\n                var t2 = y.length;\n                if (2147483648 < (n2 >>>= 0)) return false;\n                for(var r2 = 1; 4 >= r2; r2 *= 2){\n                    var e2 = t2 * (1 + 0.2 / r2);\n                    e2 = Math.min(e2, n2 + 100663296);\n                    var a2 = Math, i2 = a2.min;\n                    e2 = Math.max(n2, e2), e2 += (65536 - e2 % 65536) % 65536;\n                    n: {\n                        var o2 = l.buffer;\n                        try {\n                            l.grow(i2.call(a2, 2147483648, e2) - o2.byteLength + 65535 >>> 16), v();\n                            var s2 = 1;\n                            break n;\n                        } catch (n3) {}\n                        s2 = void 0;\n                    }\n                    if (s2) return true;\n                }\n                return false;\n            },\n            z: function() {\n                return 52;\n            },\n            u: function() {\n                return 70;\n            },\n            y: function(n2, t2, r2, e2) {\n                for(var a2 = 0, i2 = 0; i2 < r2; i2++){\n                    var u2 = _[t2 >> 2], c2 = _[t2 + 4 >> 2];\n                    t2 += 8;\n                    for(var f2 = 0; f2 < c2; f2++){\n                        var l2 = y[u2 + f2], h2 = nX[n2];\n                        l2 === 0 || l2 === 10 ? ((n2 === 1 ? o : s)(p(h2, 0)), h2.length = 0) : h2.push(l2);\n                    }\n                    a2 += c2;\n                }\n                return _[e2 >> 2] = a2, 0;\n            }\n        };\n        !function() {\n            function n2(n3) {\n                u.asm = n3.exports, l = u.asm.D, v(), A = u.asm.I, P.unshift(u.asm.E), --N == 0 && I && (n3 = I, I = null, n3());\n            }\n            function t2(t3) {\n                n2(t3.instance);\n            }\n            function e2(n3) {\n                return (typeof fetch == \"function\" ? fetch(r, {\n                    credentials: \"same-origin\"\n                }).then(function(n4) {\n                    if (!n4.ok) throw \"failed to load wasm binary file at '\" + r + \"'\";\n                    return n4.arrayBuffer();\n                }).catch(function() {\n                    return R();\n                }) : Promise.resolve().then(function() {\n                    return R();\n                })).then(function(n4) {\n                    return WebAssembly.instantiate(n4, a2);\n                }).then(function(n4) {\n                    return n4;\n                }).then(n3, function(n4) {\n                    s(\"failed to asynchronously prepare wasm: \" + n4), w(n4);\n                });\n            }\n            var a2 = {\n                a: nx\n            };\n            if (N++, u.instantiateWasm) try {\n                return u.instantiateWasm(a2, n2);\n            } catch (n3) {\n                s(\"Module.instantiateWasm callback failed with error: \" + n3), f(n3);\n            }\n            (typeof WebAssembly.instantiateStreaming != \"function\" || S2() || typeof fetch != \"function\" ? e2(t2) : fetch(r, {\n                credentials: \"same-origin\"\n            }).then(function(n3) {\n                return WebAssembly.instantiateStreaming(n3, a2).then(t2, function(n4) {\n                    return s(\"wasm streaming compile failed: \" + n4), s(\"falling back to ArrayBuffer instantiation\"), e2(t2);\n                });\n            })).catch(f);\n        }();\n        var nz = u.___getTypeName = function() {\n            return (nz = u.___getTypeName = u.asm.F).apply(null, arguments);\n        };\n        function n$() {\n            return (n$ = u.asm.H).apply(null, arguments);\n        }\n        function nZ() {\n            return (nZ = u.asm.J).apply(null, arguments);\n        }\n        function nJ() {\n            0 < N || (C(O), 0 < N || e || (e = true, u.calledRun = true, h || (C(P), c(u), C(b))));\n        }\n        return u.__embind_initialize_bindings = function() {\n            return (u.__embind_initialize_bindings = u.asm.G).apply(null, arguments);\n        }, u.dynCall_jiji = function() {\n            return (u.dynCall_jiji = u.asm.K).apply(null, arguments);\n        }, I = function n2() {\n            e || nJ(), e || (I = n2);\n        }, nJ(), t.ready;\n    };\n})();\nasync function initYoga(t) {\n    let r = await yoga({\n        instantiateWasm (n, r2) {\n            WebAssembly.instantiate(t, n).then((n2)=>{\n                n2 instanceof WebAssembly.Instance ? r2(n2) : r2(n2.instance);\n            });\n        }\n    });\n    return wrapAsm(r);\n}\n// node_modules/.pnpm/@resvg+resvg-wasm@2.4.0/node_modules/@resvg/resvg-wasm/index.mjs\nvar resvg_wasm_exports = {};\n__export(resvg_wasm_exports, {\n    Resvg: ()=>Resvg2,\n    initWasm: ()=>initWasm\n});\nvar wasm;\nvar heap = new Array(128).fill(void 0);\nheap.push(void 0, null, true, false);\nvar heap_next = heap.length;\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n    heap[idx] = obj;\n    return idx;\n}\nfunction getObject(idx) {\n    return heap[idx];\n}\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\nvar WASM_VECTOR_LEN = 0;\nvar cachedUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\nvar cachedTextEncoder = new TextEncoder(\"utf-8\");\nvar encodeString = typeof cachedTextEncoder.encodeInto === \"function\" ? function(arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n} : function(arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n};\nfunction passStringToWasm0(arg, malloc, realloc) {\n    if (realloc === void 0) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr2 = malloc(buf.length);\n        getUint8Memory0().subarray(ptr2, ptr2 + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr2;\n    }\n    let len = arg.length;\n    let ptr = malloc(len);\n    const mem = getUint8Memory0();\n    let offset = 0;\n    for(; offset < len; offset++){\n        const code = arg.charCodeAt(offset);\n        if (code > 127) break;\n        mem[ptr + offset] = code;\n    }\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n        offset += ret.written;\n    }\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\nfunction isLikeNone(x) {\n    return x === void 0 || x === null;\n}\nvar cachedInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\nvar cachedTextDecoder = new TextDecoder(\"utf-8\", {\n    ignoreBOM: true,\n    fatal: true\n});\ncachedTextDecoder.decode();\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\nvar BBox = class {\n    static __wrap(ptr) {\n        const obj = Object.create(BBox.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bbox_free(ptr);\n    }\n    get x() {\n        const ret = wasm.__wbg_get_bbox_x(this.ptr);\n        return ret;\n    }\n    set x(arg0) {\n        wasm.__wbg_set_bbox_x(this.ptr, arg0);\n    }\n    get y() {\n        const ret = wasm.__wbg_get_bbox_y(this.ptr);\n        return ret;\n    }\n    set y(arg0) {\n        wasm.__wbg_set_bbox_y(this.ptr, arg0);\n    }\n    get width() {\n        const ret = wasm.__wbg_get_bbox_width(this.ptr);\n        return ret;\n    }\n    set width(arg0) {\n        wasm.__wbg_set_bbox_width(this.ptr, arg0);\n    }\n    get height() {\n        const ret = wasm.__wbg_get_bbox_height(this.ptr);\n        return ret;\n    }\n    set height(arg0) {\n        wasm.__wbg_set_bbox_height(this.ptr, arg0);\n    }\n};\nvar RenderedImage = class {\n    static __wrap(ptr) {\n        const obj = Object.create(RenderedImage.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_renderedimage_free(ptr);\n    }\n    get width() {\n        const ret = wasm.renderedimage_width(this.ptr);\n        return ret >>> 0;\n    }\n    get height() {\n        const ret = wasm.renderedimage_height(this.ptr);\n        return ret >>> 0;\n    }\n    asPng() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.renderedimage_asPng(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally{\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    get pixels() {\n        const ret = wasm.renderedimage_pixels(this.ptr);\n        return takeObject(ret);\n    }\n};\nvar Resvg = class {\n    static __wrap(ptr) {\n        const obj = Object.create(Resvg.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_resvg_free(ptr);\n    }\n    constructor(svg, options){\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(options) ? 0 : passStringToWasm0(options, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.resvg_new(retptr, addHeapObject(svg), ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Resvg.__wrap(r0);\n        } finally{\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    get width() {\n        const ret = wasm.resvg_width(this.ptr);\n        return ret;\n    }\n    get height() {\n        const ret = wasm.resvg_height(this.ptr);\n        return ret;\n    }\n    render() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.resvg_render(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RenderedImage.__wrap(r0);\n        } finally{\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    toString() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.resvg_toString(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally{\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    innerBBox() {\n        const ret = wasm.resvg_innerBBox(this.ptr);\n        return ret === 0 ? void 0 : BBox.__wrap(ret);\n    }\n    getBBox() {\n        const ret = wasm.resvg_getBBox(this.ptr);\n        return ret === 0 ? void 0 : BBox.__wrap(ret);\n    }\n    cropByBBox(bbox) {\n        _assertClass(bbox, BBox);\n        wasm.resvg_cropByBBox(this.ptr, bbox.ptr);\n    }\n    imagesToResolve() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.resvg_imagesToResolve(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally{\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    resolveImage(href, buffer) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(href, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.resvg_resolveImage(retptr, this.ptr, ptr0, len0, addHeapObject(buffer));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally{\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n};\nasync function load2(module, imports) {\n    if (typeof Response === \"function\" && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === \"function\") {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n            } catch (e) {\n                if (module.headers.get(\"Content-Type\") != \"application/wasm\") {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n                } else {\n                    throw e;\n                }\n            }\n        }\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n        if (instance instanceof WebAssembly.Instance) {\n            return {\n                instance,\n                module\n            };\n        } else {\n            return instance;\n        }\n    }\n}\nfunction getImports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_new_15d3966e9981a196 = function(arg0, arg1) {\n        const ret = new Error(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_buffer_cf65c07de34b9a08 = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_9fb2f11355ecadf5 = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_new_537b7341ce90bb31 = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_instanceof_Uint8Array_01cebe79ca606cca = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Uint8Array;\n        } catch (e) {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof obj === \"string\" ? obj : void 0;\n        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_new_b525de17f44a8943 = function() {\n        const ret = new Array();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_push_49c286f04dd3bf59 = function(arg0, arg1) {\n        const ret = getObject(arg0).push(getObject(arg1));\n        return ret;\n    };\n    imports.wbg.__wbg_length_27a2afe8ab42b09f = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_set_17499e8aa4003ebd = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    return imports;\n}\nfunction initMemory(imports, maybe_memory) {}\nfunction finalizeInit(instance, module) {\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n    return wasm;\n}\nasync function init(input) {\n    if (typeof input === \"undefined\") {\n        input = new URL(\"index_bg.wasm\", void 0);\n    }\n    const imports = getImports();\n    if (typeof input === \"string\" || typeof Request === \"function\" && input instanceof Request || typeof URL === \"function\" && input instanceof URL) {\n        input = fetch(input);\n    }\n    initMemory(imports);\n    const { instance, module } = await load2(await input, imports);\n    return finalizeInit(instance, module);\n}\nvar dist_default = init;\nvar initialized = false;\nvar initWasm = async (module_or_path)=>{\n    if (initialized) {\n        throw new Error(\"Already initialized. The `initWasm()` function can be used only once.\");\n    }\n    await dist_default(await module_or_path);\n    initialized = true;\n};\nvar Resvg2 = class extends Resvg {\n    constructor(svg, options){\n        if (!initialized) throw new Error(\"Wasm has not been initialized. Call `initWasm()` function.\");\n        super(svg, JSON.stringify(options));\n    }\n};\n// src/index.edge.ts\n\n\n// src/emoji/index.ts\nvar U200D = String.fromCharCode(8205);\nvar UFE0Fg = /\\uFE0F/g;\nfunction getIconCode(char) {\n    return toCodePoint(char.indexOf(U200D) < 0 ? char.replace(UFE0Fg, \"\") : char);\n}\nfunction toCodePoint(unicodeSurrogates) {\n    var r = [], c = 0, p = 0, i = 0;\n    while(i < unicodeSurrogates.length){\n        c = unicodeSurrogates.charCodeAt(i++);\n        if (p) {\n            r.push((65536 + (p - 55296 << 10) + (c - 56320)).toString(16));\n            p = 0;\n        } else if (55296 <= c && c <= 56319) {\n            p = c;\n        } else {\n            r.push(c.toString(16));\n        }\n    }\n    return r.join(\"-\");\n}\nvar apis = {\n    twemoji: (code)=>\"https://cdn.jsdelivr.net/gh/twitter/twemoji@14.0.2/assets/svg/\" + code.toLowerCase() + \".svg\",\n    openmoji: \"https://cdn.jsdelivr.net/npm/@svgmoji/openmoji@2.0.0/svg/\",\n    blobmoji: \"https://cdn.jsdelivr.net/npm/@svgmoji/blob@2.0.0/svg/\",\n    noto: \"https://cdn.jsdelivr.net/gh/svgmoji/svgmoji/packages/svgmoji__noto/svg/\",\n    fluent: (code)=>\"https://cdn.jsdelivr.net/gh/shuding/fluentui-emoji-unicode/assets/\" + code.toLowerCase() + \"_color.svg\",\n    fluentFlat: (code)=>\"https://cdn.jsdelivr.net/gh/shuding/fluentui-emoji-unicode/assets/\" + code.toLowerCase() + \"_flat.svg\"\n};\nfunction loadEmoji(code, type) {\n    if (!type || !apis[type]) {\n        type = \"twemoji\";\n    }\n    const api = apis[type];\n    if (typeof api === \"function\") {\n        return fetch(api(code));\n    }\n    return fetch(`${api}${code.toUpperCase()}.svg`);\n}\n// src/language/index.ts\nvar FontDetector = class {\n    constructor(){\n        this.rangesByLang = {};\n    }\n    async detect(text, fonts) {\n        await this.load(fonts);\n        const result = {};\n        for (const segment of text){\n            const lang = this.detectSegment(segment, fonts);\n            if (lang) {\n                result[lang] = result[lang] || \"\";\n                result[lang] += segment;\n            }\n        }\n        return result;\n    }\n    detectSegment(segment, fonts) {\n        for (const font of fonts){\n            const range = this.rangesByLang[font];\n            if (range && checkSegmentInRange(segment, range)) {\n                return font;\n            }\n        }\n        return null;\n    }\n    async load(fonts) {\n        let params = \"\";\n        const existingLang = Object.keys(this.rangesByLang);\n        const langNeedsToLoad = fonts.filter((font)=>!existingLang.includes(font));\n        if (langNeedsToLoad.length === 0) {\n            return;\n        }\n        for (const font of langNeedsToLoad){\n            params += `family=${font}&`;\n        }\n        params += \"display=swap\";\n        const API = `https://fonts.googleapis.com/css2?${params}`;\n        const fontFace = await (await fetch(API, {\n            headers: {\n                \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36\"\n            }\n        })).text();\n        this.addDetectors(fontFace);\n    }\n    addDetectors(input) {\n        const regex = /font-family:\\s*'(.+?)';.+?unicode-range:\\s*(.+?);/gms;\n        const matches = input.matchAll(regex);\n        for (const [, _lang, range] of matches){\n            const lang = _lang.replaceAll(\" \", \"+\");\n            if (!this.rangesByLang[lang]) {\n                this.rangesByLang[lang] = [];\n            }\n            this.rangesByLang[lang].push(...convert(range));\n        }\n    }\n};\nfunction convert(input) {\n    return input.split(\", \").map((range)=>{\n        range = range.replaceAll(\"U+\", \"\");\n        const [start, end] = range.split(\"-\").map((hex)=>parseInt(hex, 16));\n        if (isNaN(end)) {\n            return start;\n        }\n        return [\n            start,\n            end\n        ];\n    });\n}\nfunction checkSegmentInRange(segment, range) {\n    const codePoint = segment.codePointAt(0);\n    if (!codePoint) return false;\n    return range.some((val)=>{\n        if (typeof val === \"number\") {\n            return codePoint === val;\n        } else {\n            const [start, end] = val;\n            return start <= codePoint && codePoint <= end;\n        }\n    });\n}\nvar languageFontMap = {\n    \"ja-JP\": \"Noto+Sans+JP\",\n    \"ko-KR\": \"Noto+Sans+KR\",\n    \"zh-CN\": \"Noto+Sans+SC\",\n    \"zh-TW\": \"Noto+Sans+TC\",\n    \"zh-HK\": \"Noto+Sans+HK\",\n    \"th-TH\": \"Noto+Sans+Thai\",\n    \"bn-IN\": \"Noto+Sans+Bengali\",\n    \"ar-AR\": \"Noto+Sans+Arabic\",\n    \"ta-IN\": \"Noto+Sans+Tamil\",\n    \"ml-IN\": \"Noto+Sans+Malayalam\",\n    \"he-IL\": \"Noto+Sans+Hebrew\",\n    \"te-IN\": \"Noto+Sans+Telugu\",\n    devanagari: \"Noto+Sans+Devanagari\",\n    kannada: \"Noto+Sans+Kannada\",\n    symbol: [\n        \"Noto+Sans+Symbols\",\n        \"Noto+Sans+Symbols+2\"\n    ],\n    math: \"Noto+Sans+Math\",\n    unknown: \"Noto+Sans\"\n};\n// src/og.ts\nasync function loadGoogleFont(font, text) {\n    if (!font || !text) return;\n    const API = `https://fonts.googleapis.com/css2?family=${font}&text=${encodeURIComponent(text)}`;\n    const css = await (await fetch(API, {\n        headers: {\n            \"User-Agent\": \"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; de-at) AppleWebKit/533.21.1 (KHTML, like Gecko) Version/5.0.5 Safari/533.21.1\"\n        }\n    })).text();\n    const resource = css.match(/src: url\\((.+)\\) format\\('(opentype|truetype)'\\)/);\n    if (!resource) throw new Error(\"Failed to download dynamic font\");\n    const res = await fetch(resource[1]);\n    if (!res.ok) {\n        throw new Error(\"Failed to download dynamic font. Status: \" + res.status);\n    }\n    return res.arrayBuffer();\n}\nvar detector = new FontDetector();\nvar assetCache = /* @__PURE__ */ new Map();\nvar loadDynamicAsset = ({ emoji })=>{\n    const fn = async (code, text)=>{\n        if (code === \"emoji\") {\n            return `data:image/svg+xml;base64,` + btoa(await (await loadEmoji(getIconCode(text), emoji)).text());\n        }\n        const codes = code.split(\"|\");\n        const names = codes.map((code2)=>languageFontMap[code2]).filter(Boolean).flat();\n        if (names.length === 0) return [];\n        try {\n            const textByFont = await detector.detect(text, names);\n            const fonts = Object.keys(textByFont);\n            const fontData = await Promise.all(fonts.map((font)=>loadGoogleFont(font, textByFont[font])));\n            return fontData.map((data, index)=>({\n                    name: `satori_${codes[index]}_fallback_${text}`,\n                    data,\n                    weight: 400,\n                    style: \"normal\",\n                    lang: codes[index] === \"unknown\" ? void 0 : codes[index]\n                }));\n        } catch (e) {\n            console.error(\"Failed to load dynamic font for\", text, \". Error:\", e);\n        }\n    };\n    return async (...args)=>{\n        const key = JSON.stringify(args);\n        const cache = assetCache.get(key);\n        if (cache) return cache;\n        const asset = await fn(...args);\n        assetCache.set(key, asset);\n        return asset;\n    };\n};\nasync function render(satori, resvg, opts, defaultFonts, element) {\n    const options = Object.assign({\n        width: 1200,\n        height: 630,\n        debug: false\n    }, opts);\n    const svg = await satori(element, {\n        width: options.width,\n        height: options.height,\n        debug: options.debug,\n        fonts: options.fonts || defaultFonts,\n        loadAdditionalAsset: loadDynamicAsset({\n            emoji: options.emoji\n        })\n    });\n    const resvgJS = new resvg.Resvg(svg, {\n        fitTo: {\n            mode: \"width\",\n            value: options.width\n        }\n    });\n    return resvgJS.render().asPng();\n}\n// src/figma/index.tsx\nvar FigmaImageResponse = async ({ url, template, fonts, imageResponseOptions, Response: Response2 })=>{\n    const { fileId, nodeId } = parseFigmaUrl(url);\n    const figmaAPIToken = assertValue(process.env.FIGMA_PERSONAL_ACCESS_TOKEN, \"Missing environment variable: `FIGMA_PERSONAL_ACCESS_TOKEN`. You can get one at https://www.figma.com/developers/api#authentication\");\n    const figmaResponse = await fetch(`https://api.figma.com/v1/images/${fileId}?ids=${nodeId}&svg_outline_text=false&format=svg&svg_include_id=true`, {\n        method: \"GET\",\n        headers: {\n            \"X-FIGMA-TOKEN\": figmaAPIToken\n        },\n        cache: \"no-store\"\n    });\n    const figmaResponseJson = await figmaResponse.json();\n    const svgDownloadPath = figmaResponseJson.images[nodeId.replace(\"-\", \":\")];\n    const svgResponse = await fetch(svgDownloadPath, {\n        cache: \"no-store\"\n    });\n    const svg = await svgResponse.text();\n    const { width, height } = getSvgDimensions(svg);\n    const textNodes = getTextNodes(svg);\n    const textNodeAttributes = textNodes.map(parseSvgText);\n    return new Response2({\n        key: \"0\",\n        type: \"div\",\n        props: {\n            style: {\n                display: \"flex\"\n            },\n            children: [\n                {\n                    type: \"img\",\n                    props: {\n                        style: {\n                            position: \"absolute\"\n                        },\n                        alt: \"\",\n                        width,\n                        height,\n                        src: svgToBase64(svg)\n                    }\n                },\n                {\n                    type: \"div\",\n                    props: {\n                        style: {\n                            display: \"flex\",\n                            position: \"relative\",\n                            width: \"100%\"\n                        },\n                        children: textNodeAttributes.map((textNode)=>{\n                            const t = template[textNode.id];\n                            let value = \"\";\n                            if (t === void 0) {\n                                value = textNode.content;\n                            } else if (isComplexTemplate(t)) {\n                                value = t.value;\n                            } else {\n                                value = t;\n                            }\n                            let cssProps = {};\n                            let centerHorizontally = false;\n                            if (isComplexTemplate(t) && t.props) {\n                                const { centerHorizontally: centerHorizontallyProp, ...otherCSSProps } = t.props;\n                                cssProps = otherCSSProps;\n                                centerHorizontally = centerHorizontallyProp || false;\n                            }\n                            if (centerHorizontally) {\n                                const templateStyles = {\n                                    color: textNode.fill,\n                                    marginTop: `${parseInt(textNode.y) - parseInt(textNode.fontSize)}px`,\n                                    fontWeight: textNode.fontWeight || \"400\",\n                                    fontSize: textNode.fontSize,\n                                    fontFamily: textNode.fontFamily,\n                                    letterSpacing: textNode.letterSpacing,\n                                    textAlign: \"center\",\n                                    ...cssProps\n                                };\n                                return {\n                                    type: \"div\",\n                                    props: {\n                                        style: {\n                                            display: \"flex\",\n                                            justifyContent: \"center\",\n                                            position: \"absolute\",\n                                            width: \"100%\"\n                                        },\n                                        children: {\n                                            type: \"div\",\n                                            props: {\n                                                style: templateStyles,\n                                                children: value\n                                            }\n                                        }\n                                    }\n                                };\n                            }\n                            return {\n                                type: \"div\",\n                                props: {\n                                    style: {\n                                        position: \"absolute\",\n                                        color: textNode.fill,\n                                        left: `${textNode.x}px`,\n                                        top: `${parseInt(textNode.y) - parseInt(textNode.fontSize)}px`,\n                                        fontWeight: textNode.fontWeight || \"400\",\n                                        fontSize: textNode.fontSize,\n                                        fontFamily: textNode.fontFamily,\n                                        letterSpacing: textNode.letterSpacing,\n                                        ...cssProps\n                                    },\n                                    children: value\n                                }\n                            };\n                        })\n                    }\n                }\n            ]\n        }\n    }, {\n        width,\n        height,\n        fonts,\n        ...imageResponseOptions\n    });\n};\nvar isComplexTemplate = (template)=>{\n    return typeof template !== \"string\" && template !== void 0 && \"value\" in template;\n};\nfunction svgToBase64(svg) {\n    const base64 = Buffer.from(svg).toString(\"base64\");\n    return \"data:image/svg+xml;base64,\" + base64;\n}\nfunction getSvgDimensions(svg) {\n    const widthMatch = svg.match(/width=\"(\\d+)/);\n    const heightMatch = svg.match(/height=\"(\\d+)/);\n    if (widthMatch && heightMatch) {\n        const width = parseInt(widthMatch[1], 10);\n        const height = parseInt(heightMatch[1], 10);\n        return {\n            width,\n            height\n        };\n    }\n    return {\n        width: 0,\n        height: 0\n    };\n}\nfunction getTextNodes(svg) {\n    const regex = /<text[^>]*>(.*?)<\\/text>/g;\n    let match;\n    const matches = [];\n    while((match = regex.exec(svg)) !== null){\n        matches.push(match[0]);\n    }\n    return matches;\n}\nfunction parseSvgText(svgText) {\n    var _a2, _b2, _c, _d, _e, _f2, _g, _h, _i;\n    const id = ((_a2 = svgText.match(/id=\"([^\"]*)\"/)) == null ? void 0 : _a2[1]) || \"\";\n    const fill = ((_b2 = svgText.match(/fill=\"([^\"]*)\"/)) == null ? void 0 : _b2[1]) || \"\";\n    const fontFamily = ((_c = svgText.match(/font-family=\"([^\"]*)\"/)) == null ? void 0 : _c[1]) || \"\";\n    const fontSize = ((_d = svgText.match(/font-size=\"([^\"]*)\"/)) == null ? void 0 : _d[1]) || \"\";\n    const fontWeight = ((_e = svgText.match(/font-weight=\"([^\"]*)\"/)) == null ? void 0 : _e[1]) || \"\";\n    const letterSpacing = ((_f2 = svgText.match(/letter-spacing=\"([^\"]*)\"/)) == null ? void 0 : _f2[1]) || \"\";\n    const x = ((_g = svgText.match(/<tspan[^>]*x=\"([^\"]*)\"/)) == null ? void 0 : _g[1]) || \"\";\n    const y = ((_h = svgText.match(/<tspan[^>]*y=\"([^\"]*)\"/)) == null ? void 0 : _h[1]) || \"\";\n    const content = ((_i = svgText.match(/<tspan[^>]*>([^<]*)<\\/tspan>/)) == null ? void 0 : _i[1]) || \"\";\n    return {\n        id,\n        fill,\n        fontFamily,\n        fontSize,\n        fontWeight,\n        letterSpacing,\n        x,\n        y,\n        content\n    };\n}\nfunction parseFigmaUrl(figmaUrl) {\n    const regex = /\\/file\\/([^/]+)\\/[^?]+\\?[^#]*node-id=([^&#]+)/;\n    const match = figmaUrl.match(regex);\n    let fileId = \"\";\n    let nodeId = \"\";\n    if (match) {\n        fileId = match[1] || \"\";\n        nodeId = match[2] || \"\";\n    }\n    return {\n        fileId,\n        nodeId\n    };\n}\nfunction assertValue(v, errorMessage) {\n    if (v === void 0) {\n        throw new Error(errorMessage);\n    }\n    return v;\n}\n// src/index.edge.ts\nvar initializedResvg = initWasm(_resvg_wasm_module__WEBPACK_IMPORTED_MODULE_0__);\nvar initializedYoga = initYoga(_yoga_wasm_module__WEBPACK_IMPORTED_MODULE_1__).then((yoga2)=>Rl(yoga2));\nvar fallbackFont = fetch(/* asset import */ new __webpack_require__.U(__webpack_require__(/*! ./noto-sans-v27-latin-regular.ttf */ \"(edge-asset)/./node_modules/next/dist/compiled/@vercel/og/noto-sans-v27-latin-regular.ttf\"))).then((res)=>res.arrayBuffer());\nvar ImageResponse = class extends Response {\n    constructor(element, options = {}){\n        const result = new ReadableStream({\n            async start (controller) {\n                await initializedYoga;\n                await initializedResvg;\n                const fontData = await fallbackFont;\n                const fonts = [\n                    {\n                        name: \"sans serif\",\n                        data: fontData,\n                        weight: 700,\n                        style: \"normal\"\n                    }\n                ];\n                const result2 = await render(wl, resvg_wasm_exports, options, fonts, element);\n                controller.enqueue(result2);\n                controller.close();\n            }\n        });\n        super(result, {\n            headers: {\n                \"content-type\": \"image/png\",\n                \"cache-control\":  true ? \"no-cache, no-store\" : 0,\n                ...options.headers\n            },\n            status: options.status,\n            statusText: options.statusText\n        });\n    }\n};\nvar experimental_FigmaImageResponse = async (props)=>{\n    return FigmaImageResponse({\n        ...props,\n        Response: ImageResponse\n    });\n};\n /*!\n * escape-html\n * Copyright(c) 2012-2013 TJ Holowaychuk\n * Copyright(c) 2015 Andreas Lubbe\n * Copyright(c) 2015 Tiancheng \"Timothy\" Gu\n * MIT Licensed\n */  /*!\n * https://github.com/gilmoreorless/css-background-parser\n * Copyright © 2015 Gilmore Davidson under the MIT license: http://gilmoreorless.mit-license.org/\n */  /*! Copyright Twitter Inc. and other contributors. Licensed under MIT */  /**\n * parse-css-color\n * @version v0.2.1\n * @link http://github.com/noeldelgado/parse-css-color/\n * @license MIT\n */  //# sourceMappingURL=index.edge.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-metadata-route)/./node_modules/next/dist/compiled/@vercel/og/index.edge.js\n");

/***/ })

});